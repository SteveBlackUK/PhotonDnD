
/Users/steve_black_spare/Dropbox/PhotonDnD/target/1.4.4/photon/PhotonDnD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001db4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1dd0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080a1dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005bc  2000007c  2000007c  0003007c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1e50  080a1e50  00021e50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1e78  080a1e78  00021e78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a33e3  00000000  00000000  00021e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ed8b  00000000  00000000  000c525f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00012905  00000000  00000000  000d3fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e00  00000000  00000000  000e68ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002ff8  00000000  00000000  000e86ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000239d0  00000000  00000000  000eb6e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002213d  00000000  00000000  0010f0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a4e72  00000000  00000000  001311f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b594  00000000  00000000  001d6068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fccf 	bl	80a19d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fcd4 	bl	80a19e6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1dd4 	.word	0x080a1dd4
 80a004c:	2000007c 	.word	0x2000007c
 80a0050:	2000007c 	.word	0x2000007c
 80a0054:	20000638 	.word	0x20000638
 80a0058:	20000638 	.word	0x20000638

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fa6f 	bl	80a1540 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1d9c 	.word	0x080a1d9c
 80a0084:	080a1dd0 	.word	0x080a1dd0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f861 	bl	80a0154 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 ba15 	b.w	80a14c4 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 badf 	b.w	80a065c <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bae5 	b.w	80a066c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
String switchStatusChanged = "true";
int switchStatus;
int currentSwitchVal;

// setup() runs once, when the device is first turned on.
void setup() {
 80a00b4:	b570      	push	{r4, r5, r6, lr}
    //for LETs and Button
    pinMode(button, INPUT_PULLUP);
 80a00b6:	4b16      	ldr	r3, [pc, #88]	; (80a0110 <setup+0x5c>)
    pinMode(led, OUTPUT);
 80a00b8:	4e16      	ldr	r6, [pc, #88]	; (80a0114 <setup+0x60>)
int currentSwitchVal;

// setup() runs once, when the device is first turned on.
void setup() {
    //for LETs and Button
    pinMode(button, INPUT_PULLUP);
 80a00ba:	8818      	ldrh	r0, [r3, #0]
    pinMode(led, OUTPUT);
    pinMode(red, OUTPUT);
 80a00bc:	4d16      	ldr	r5, [pc, #88]	; (80a0118 <setup+0x64>)
int currentSwitchVal;

// setup() runs once, when the device is first turned on.
void setup() {
    //for LETs and Button
    pinMode(button, INPUT_PULLUP);
 80a00be:	2102      	movs	r1, #2
 80a00c0:	f001 fa8e 	bl	80a15e0 <pinMode>
    pinMode(led, OUTPUT);
    pinMode(red, OUTPUT);
    pinMode(green, OUTPUT);
 80a00c4:	4c15      	ldr	r4, [pc, #84]	; (80a011c <setup+0x68>)

// setup() runs once, when the device is first turned on.
void setup() {
    //for LETs and Button
    pinMode(button, INPUT_PULLUP);
    pinMode(led, OUTPUT);
 80a00c6:	8830      	ldrh	r0, [r6, #0]
 80a00c8:	2101      	movs	r1, #1
 80a00ca:	f001 fa89 	bl	80a15e0 <pinMode>
    pinMode(red, OUTPUT);
 80a00ce:	8828      	ldrh	r0, [r5, #0]
 80a00d0:	2101      	movs	r1, #1
 80a00d2:	f001 fa85 	bl	80a15e0 <pinMode>
    pinMode(green, OUTPUT);
 80a00d6:	8820      	ldrh	r0, [r4, #0]
 80a00d8:	2101      	movs	r1, #1
 80a00da:	f001 fa81 	bl	80a15e0 <pinMode>

    // turn off light at start to match ledStatus
    digitalWrite(led, LOW);
 80a00de:	8830      	ldrh	r0, [r6, #0]
 80a00e0:	2100      	movs	r1, #0
 80a00e2:	f001 fa8e 	bl	80a1602 <digitalWrite>
    digitalWrite(red, LOW);
 80a00e6:	8828      	ldrh	r0, [r5, #0]
 80a00e8:	2100      	movs	r1, #0
 80a00ea:	f001 fa8a 	bl	80a1602 <digitalWrite>
    digitalWrite(green, LOW);
 80a00ee:	8820      	ldrh	r0, [r4, #0]
 80a00f0:	2100      	movs	r1, #0
 80a00f2:	f001 fa86 	bl	80a1602 <digitalWrite>
    
    //for switch
    pinMode(switchPin, INPUT);
 80a00f6:	4b0a      	ldr	r3, [pc, #40]	; (80a0120 <setup+0x6c>)
 80a00f8:	2100      	movs	r1, #0
 80a00fa:	8818      	ldrh	r0, [r3, #0]
 80a00fc:	f001 fa70 	bl	80a15e0 <pinMode>
    pinMode(switchRed, OUTPUT);

    
}
 80a0100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(red, LOW);
    digitalWrite(green, LOW);
    
    //for switch
    pinMode(switchPin, INPUT);
    pinMode(switchRed, OUTPUT);
 80a0104:	4b07      	ldr	r3, [pc, #28]	; (80a0124 <setup+0x70>)
 80a0106:	2101      	movs	r1, #1
 80a0108:	8818      	ldrh	r0, [r3, #0]
 80a010a:	f001 ba69 	b.w	80a15e0 <pinMode>
 80a010e:	bf00      	nop
 80a0110:	2000000c 	.word	0x2000000c
 80a0114:	20000010 	.word	0x20000010
 80a0118:	20000008 	.word	0x20000008
 80a011c:	20000004 	.word	0x20000004
 80a0120:	20000098 	.word	0x20000098
 80a0124:	20000000 	.word	0x20000000

080a0128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0128:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a012a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a012c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a012e:	b17c      	cbz	r4, 80a0150 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0130:	6863      	ldr	r3, [r4, #4]
 80a0132:	3b01      	subs	r3, #1
 80a0134:	6063      	str	r3, [r4, #4]
 80a0136:	b95b      	cbnz	r3, 80a0150 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0138:	6823      	ldr	r3, [r4, #0]
 80a013a:	4620      	mov	r0, r4
 80a013c:	689b      	ldr	r3, [r3, #8]
 80a013e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0140:	68a3      	ldr	r3, [r4, #8]
 80a0142:	3b01      	subs	r3, #1
 80a0144:	60a3      	str	r3, [r4, #8]
 80a0146:	b91b      	cbnz	r3, 80a0150 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0148:	6823      	ldr	r3, [r4, #0]
 80a014a:	4620      	mov	r0, r4
 80a014c:	68db      	ldr	r3, [r3, #12]
 80a014e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0150:	4628      	mov	r0, r5
 80a0152:	bd38      	pop	{r3, r4, r5, pc}

080a0154 <loop>:

    
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0154:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    // check button
    int buttonState = digitalRead(button);
 80a0158:	4b47      	ldr	r3, [pc, #284]	; (80a0278 <loop+0x124>)

    
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a015a:	b085      	sub	sp, #20
    // check button
    int buttonState = digitalRead(button);
 80a015c:	8818      	ldrh	r0, [r3, #0]
 80a015e:	f001 fa69 	bl	80a1634 <digitalRead>

    // LOW means button is being pushed
    if(buttonState == LOW) {
 80a0162:	4681      	mov	r9, r0
 80a0164:	2800      	cmp	r0, #0
 80a0166:	d142      	bne.n	80a01ee <loop+0x9a>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0168:	4944      	ldr	r1, [pc, #272]	; (80a027c <loop+0x128>)
 80a016a:	4845      	ldr	r0, [pc, #276]	; (80a0280 <loop+0x12c>)
 80a016c:	f000 ffa0 	bl	80a10b0 <_ZNK6String6equalsEPKc>
 80a0170:	f8df 8140 	ldr.w	r8, [pc, #320]	; 80a02b4 <loop+0x160>

        // if light is currently off, switch to on
        if(ledStatus == "off") {
 80a0174:	4604      	mov	r4, r0
 80a0176:	4f43      	ldr	r7, [pc, #268]	; (80a0284 <loop+0x130>)
 80a0178:	4e43      	ldr	r6, [pc, #268]	; (80a0288 <loop+0x134>)
 80a017a:	4d44      	ldr	r5, [pc, #272]	; (80a028c <loop+0x138>)
 80a017c:	b1d0      	cbz	r0, 80a01b4 <loop+0x60>
 80a017e:	f898 3000 	ldrb.w	r3, [r8]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0182:	4a43      	ldr	r2, [pc, #268]	; (80a0290 <loop+0x13c>)
 80a0184:	4943      	ldr	r1, [pc, #268]	; (80a0294 <loop+0x140>)
 80a0186:	f88d 3000 	strb.w	r3, [sp]
 80a018a:	a802      	add	r0, sp, #8
 80a018c:	233c      	movs	r3, #60	; 0x3c
 80a018e:	f000 fc05 	bl	80a099c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0192:	a803      	add	r0, sp, #12
 80a0194:	f7ff ffc8 	bl	80a0128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            // Particle.publish("LightOn", PRIVATE);
            Particle.publish("LedOn","on", PRIVATE);
            ledStatus = "on";
 80a0198:	493d      	ldr	r1, [pc, #244]	; (80a0290 <loop+0x13c>)
 80a019a:	4839      	ldr	r0, [pc, #228]	; (80a0280 <loop+0x12c>)
 80a019c:	f000 ff77 	bl	80a108e <_ZN6StringaSEPKc>
            digitalWrite(led, HIGH);
 80a01a0:	2101      	movs	r1, #1
 80a01a2:	8838      	ldrh	r0, [r7, #0]
 80a01a4:	f001 fa2d 	bl	80a1602 <digitalWrite>
            digitalWrite(green, HIGH);
 80a01a8:	2101      	movs	r1, #1
 80a01aa:	8830      	ldrh	r0, [r6, #0]
 80a01ac:	f001 fa29 	bl	80a1602 <digitalWrite>
            digitalWrite(red, LOW);
 80a01b0:	4649      	mov	r1, r9
 80a01b2:	e019      	b.n	80a01e8 <loop+0x94>


        }
        // else light must be on, so switch to off
        else {
            ledStatus = "off";
 80a01b4:	4931      	ldr	r1, [pc, #196]	; (80a027c <loop+0x128>)
 80a01b6:	4832      	ldr	r0, [pc, #200]	; (80a0280 <loop+0x12c>)
 80a01b8:	f000 ff69 	bl	80a108e <_ZN6StringaSEPKc>
 80a01bc:	f898 3000 	ldrb.w	r3, [r8]
 80a01c0:	4a2e      	ldr	r2, [pc, #184]	; (80a027c <loop+0x128>)
 80a01c2:	4935      	ldr	r1, [pc, #212]	; (80a0298 <loop+0x144>)
 80a01c4:	f88d 3000 	strb.w	r3, [sp]
 80a01c8:	a802      	add	r0, sp, #8
 80a01ca:	233c      	movs	r3, #60	; 0x3c
 80a01cc:	f000 fbe6 	bl	80a099c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a01d0:	a803      	add	r0, sp, #12
 80a01d2:	f7ff ffa9 	bl	80a0128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            // Particle.publish("LightOff", PRIVATE);
            Particle.publish("LedOff","off", PRIVATE);
            digitalWrite(led, LOW);
 80a01d6:	4621      	mov	r1, r4
 80a01d8:	8838      	ldrh	r0, [r7, #0]
 80a01da:	f001 fa12 	bl	80a1602 <digitalWrite>
            digitalWrite(green, LOW);
 80a01de:	4621      	mov	r1, r4
 80a01e0:	8830      	ldrh	r0, [r6, #0]
 80a01e2:	f001 fa0e 	bl	80a1602 <digitalWrite>
            digitalWrite(red, HIGH);
 80a01e6:	2101      	movs	r1, #1
 80a01e8:	8828      	ldrh	r0, [r5, #0]
 80a01ea:	f001 fa0a 	bl	80a1602 <digitalWrite>
        }
    }

    // wait 0.5 seconds before checking button again
    delay(500);
 80a01ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a01f2:	f000 fa5b 	bl	80a06ac <delay>
    
   
    currentSwitchVal = digitalRead(switchPin);
 80a01f6:	4b29      	ldr	r3, [pc, #164]	; (80a029c <loop+0x148>)
 80a01f8:	4c29      	ldr	r4, [pc, #164]	; (80a02a0 <loop+0x14c>)
 80a01fa:	8818      	ldrh	r0, [r3, #0]
 80a01fc:	f001 fa1a 	bl	80a1634 <digitalRead>
       
    
    if (currentSwitchVal != switchStatus) {
 80a0200:	4b28      	ldr	r3, [pc, #160]	; (80a02a4 <loop+0x150>)

    // wait 0.5 seconds before checking button again
    delay(500);
    
   
    currentSwitchVal = digitalRead(switchPin);
 80a0202:	6020      	str	r0, [r4, #0]
       
    
    if (currentSwitchVal != switchStatus) {
 80a0204:	681a      	ldr	r2, [r3, #0]
 80a0206:	461d      	mov	r5, r3
 80a0208:	4290      	cmp	r0, r2
 80a020a:	d003      	beq.n	80a0214 <loop+0xc0>
        switchStatusChanged = "true";
 80a020c:	4926      	ldr	r1, [pc, #152]	; (80a02a8 <loop+0x154>)
 80a020e:	4827      	ldr	r0, [pc, #156]	; (80a02ac <loop+0x158>)
 80a0210:	f000 ff3d 	bl	80a108e <_ZN6StringaSEPKc>
 80a0214:	4924      	ldr	r1, [pc, #144]	; (80a02a8 <loop+0x154>)
 80a0216:	4825      	ldr	r0, [pc, #148]	; (80a02ac <loop+0x158>)
 80a0218:	f000 ff4a 	bl	80a10b0 <_ZNK6String6equalsEPKc>
    }
    
    if(switchStatusChanged == "true") {
 80a021c:	b340      	cbz	r0, 80a0270 <loop+0x11c>
        switchStatus = currentSwitchVal;
 80a021e:	6823      	ldr	r3, [r4, #0]
        switchStatusChanged = "false";
 80a0220:	4923      	ldr	r1, [pc, #140]	; (80a02b0 <loop+0x15c>)
 80a0222:	4822      	ldr	r0, [pc, #136]	; (80a02ac <loop+0x158>)
    if (currentSwitchVal != switchStatus) {
        switchStatusChanged = "true";
    }
    
    if(switchStatusChanged == "true") {
        switchStatus = currentSwitchVal;
 80a0224:	602b      	str	r3, [r5, #0]
        switchStatusChanged = "false";
 80a0226:	f000 ff32 	bl	80a108e <_ZN6StringaSEPKc>
        
        if (currentSwitchVal == HIGH)
 80a022a:	6822      	ldr	r2, [r4, #0]
    if (currentSwitchVal != switchStatus) {
        switchStatusChanged = "true";
    }
    
    if(switchStatusChanged == "true") {
        switchStatus = currentSwitchVal;
 80a022c:	4e1d      	ldr	r6, [pc, #116]	; (80a02a4 <loop+0x150>)
        switchStatusChanged = "false";
        
        if (currentSwitchVal == HIGH)
 80a022e:	2a01      	cmp	r2, #1
 80a0230:	4c20      	ldr	r4, [pc, #128]	; (80a02b4 <loop+0x160>)
 80a0232:	4b21      	ldr	r3, [pc, #132]	; (80a02b8 <loop+0x164>)
 80a0234:	d10a      	bne.n	80a024c <loop+0xf8>
        {
            switchStatus = HIGH; 
            digitalWrite(switchRed, LOW);
 80a0236:	8818      	ldrh	r0, [r3, #0]
 80a0238:	2100      	movs	r1, #0
        switchStatus = currentSwitchVal;
        switchStatusChanged = "false";
        
        if (currentSwitchVal == HIGH)
        {
            switchStatus = HIGH; 
 80a023a:	6032      	str	r2, [r6, #0]
            digitalWrite(switchRed, LOW);
 80a023c:	f001 f9e1 	bl	80a1602 <digitalWrite>
 80a0240:	7823      	ldrb	r3, [r4, #0]
 80a0242:	4a1e      	ldr	r2, [pc, #120]	; (80a02bc <loop+0x168>)
 80a0244:	f88d 3000 	strb.w	r3, [sp]
 80a0248:	233c      	movs	r3, #60	; 0x3c
 80a024a:	e00a      	b.n	80a0262 <loop+0x10e>
            Particle.publish("MasterPower","MasterOn",PRIVATE);
        }
        else
        {
            switchStatus = LOW; 
 80a024c:	2200      	movs	r2, #0
            digitalWrite(switchRed, HIGH);
 80a024e:	8818      	ldrh	r0, [r3, #0]
 80a0250:	2101      	movs	r1, #1
            digitalWrite(switchRed, LOW);
            Particle.publish("MasterPower","MasterOn",PRIVATE);
        }
        else
        {
            switchStatus = LOW; 
 80a0252:	6032      	str	r2, [r6, #0]
            digitalWrite(switchRed, HIGH);
 80a0254:	f001 f9d5 	bl	80a1602 <digitalWrite>
 80a0258:	7823      	ldrb	r3, [r4, #0]
 80a025a:	4a19      	ldr	r2, [pc, #100]	; (80a02c0 <loop+0x16c>)
 80a025c:	f88d 3000 	strb.w	r3, [sp]
 80a0260:	233c      	movs	r3, #60	; 0x3c
 80a0262:	a802      	add	r0, sp, #8
 80a0264:	4917      	ldr	r1, [pc, #92]	; (80a02c4 <loop+0x170>)
 80a0266:	f000 fb99 	bl	80a099c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a026a:	a803      	add	r0, sp, #12
 80a026c:	f7ff ff5c 	bl	80a0128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Particle.publish("MasterPower","MasterOff",PRIVATE);
        }
    }
 80a0270:	b005      	add	sp, #20
 80a0272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0276:	bf00      	nop
 80a0278:	2000000c 	.word	0x2000000c
 80a027c:	080a1ab8 	.word	0x080a1ab8
 80a0280:	2000009c 	.word	0x2000009c
 80a0284:	20000010 	.word	0x20000010
 80a0288:	20000004 	.word	0x20000004
 80a028c:	20000008 	.word	0x20000008
 80a0290:	080a1abc 	.word	0x080a1abc
 80a0294:	080a1abf 	.word	0x080a1abf
 80a0298:	080a1ac5 	.word	0x080a1ac5
 80a029c:	20000098 	.word	0x20000098
 80a02a0:	20000090 	.word	0x20000090
 80a02a4:	200000ac 	.word	0x200000ac
 80a02a8:	080a1acc 	.word	0x080a1acc
 80a02ac:	20000080 	.word	0x20000080
 80a02b0:	080a1ad1 	.word	0x080a1ad1
 80a02b4:	20000094 	.word	0x20000094
 80a02b8:	20000000 	.word	0x20000000
 80a02bc:	080a1ad7 	.word	0x080a1ad7
 80a02c0:	080a1aec 	.word	0x080a1aec
 80a02c4:	080a1ae0 	.word	0x080a1ae0

080a02c8 <_GLOBAL__sub_I_led>:
 80a02c8:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a02ca:	4b0e      	ldr	r3, [pc, #56]	; (80a0304 <_GLOBAL__sub_I_led+0x3c>)
int red = D4;
int green = D5;
int button = D2;
int switchPin = D0;
int switchRed = D1;
String ledStatus = "off";
 80a02cc:	4c0e      	ldr	r4, [pc, #56]	; (80a0308 <_GLOBAL__sub_I_led+0x40>)
 80a02ce:	2201      	movs	r2, #1
 80a02d0:	701a      	strb	r2, [r3, #0]
 80a02d2:	4e0e      	ldr	r6, [pc, #56]	; (80a030c <_GLOBAL__sub_I_led+0x44>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02d4:	f000 f83c 	bl	80a0350 <HAL_Pin_Map>
 80a02d8:	4d0d      	ldr	r5, [pc, #52]	; (80a0310 <_GLOBAL__sub_I_led+0x48>)
 80a02da:	490e      	ldr	r1, [pc, #56]	; (80a0314 <_GLOBAL__sub_I_led+0x4c>)
 80a02dc:	4620      	mov	r0, r4
 80a02de:	f000 fec3 	bl	80a1068 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02e2:	4620      	mov	r0, r4
String switchStatusChanged = "true";
 80a02e4:	4c0c      	ldr	r4, [pc, #48]	; (80a0318 <_GLOBAL__sub_I_led+0x50>)
int red = D4;
int green = D5;
int button = D2;
int switchPin = D0;
int switchRed = D1;
String ledStatus = "off";
 80a02e6:	4632      	mov	r2, r6
 80a02e8:	4629      	mov	r1, r5
 80a02ea:	f001 fa11 	bl	80a1710 <__aeabi_atexit>
String switchStatusChanged = "true";
 80a02ee:	490b      	ldr	r1, [pc, #44]	; (80a031c <_GLOBAL__sub_I_led+0x54>)
 80a02f0:	4620      	mov	r0, r4
 80a02f2:	f000 feb9 	bl	80a1068 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02f6:	4632      	mov	r2, r6
 80a02f8:	4629      	mov	r1, r5
 80a02fa:	4620      	mov	r0, r4
            switchStatus = LOW; 
            digitalWrite(switchRed, HIGH);
            Particle.publish("MasterPower","MasterOff",PRIVATE);
        }
    }
 80a02fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
int green = D5;
int button = D2;
int switchPin = D0;
int switchRed = D1;
String ledStatus = "off";
String switchStatusChanged = "true";
 80a0300:	f001 ba06 	b.w	80a1710 <__aeabi_atexit>
 80a0304:	20000094 	.word	0x20000094
 80a0308:	2000009c 	.word	0x2000009c
 80a030c:	2000007c 	.word	0x2000007c
 80a0310:	080a0fdb 	.word	0x080a0fdb
 80a0314:	080a1ab8 	.word	0x080a1ab8
 80a0318:	20000080 	.word	0x20000080
 80a031c:	080a1acc 	.word	0x080a1acc

080a0320 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b02      	ldr	r3, [pc, #8]	; (80a032c <os_mutex_create+0xc>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0328:	9301      	str	r3, [sp, #4]
 80a032a:	bd08      	pop	{r3, pc}
 80a032c:	080601d0 	.word	0x080601d0

080a0330 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0330:	b508      	push	{r3, lr}
 80a0332:	4b02      	ldr	r3, [pc, #8]	; (80a033c <HAL_RNG_GetRandomNumber+0xc>)
 80a0334:	681b      	ldr	r3, [r3, #0]
 80a0336:	685b      	ldr	r3, [r3, #4]
 80a0338:	9301      	str	r3, [sp, #4]
 80a033a:	bd08      	pop	{r3, pc}
 80a033c:	0806019c 	.word	0x0806019c

080a0340 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0340:	b508      	push	{r3, lr}
 80a0342:	4b02      	ldr	r3, [pc, #8]	; (80a034c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0344:	681b      	ldr	r3, [r3, #0]
 80a0346:	695b      	ldr	r3, [r3, #20]
 80a0348:	9301      	str	r3, [sp, #4]
 80a034a:	bd08      	pop	{r3, pc}
 80a034c:	0806019c 	.word	0x0806019c

080a0350 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0350:	b508      	push	{r3, lr}
 80a0352:	4b02      	ldr	r3, [pc, #8]	; (80a035c <HAL_Pin_Map+0xc>)
 80a0354:	681b      	ldr	r3, [r3, #0]
 80a0356:	681b      	ldr	r3, [r3, #0]
 80a0358:	9301      	str	r3, [sp, #4]
 80a035a:	bd08      	pop	{r3, pc}
 80a035c:	080601b0 	.word	0x080601b0

080a0360 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0360:	b508      	push	{r3, lr}
 80a0362:	4b02      	ldr	r3, [pc, #8]	; (80a036c <HAL_Pin_Mode+0xc>)
 80a0364:	681b      	ldr	r3, [r3, #0]
 80a0366:	689b      	ldr	r3, [r3, #8]
 80a0368:	9301      	str	r3, [sp, #4]
 80a036a:	bd08      	pop	{r3, pc}
 80a036c:	080601b0 	.word	0x080601b0

080a0370 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0370:	b508      	push	{r3, lr}
 80a0372:	4b02      	ldr	r3, [pc, #8]	; (80a037c <HAL_Get_Pin_Mode+0xc>)
 80a0374:	681b      	ldr	r3, [r3, #0]
 80a0376:	68db      	ldr	r3, [r3, #12]
 80a0378:	9301      	str	r3, [sp, #4]
 80a037a:	bd08      	pop	{r3, pc}
 80a037c:	080601b0 	.word	0x080601b0

080a0380 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0380:	b508      	push	{r3, lr}
 80a0382:	4b02      	ldr	r3, [pc, #8]	; (80a038c <HAL_GPIO_Write+0xc>)
 80a0384:	681b      	ldr	r3, [r3, #0]
 80a0386:	691b      	ldr	r3, [r3, #16]
 80a0388:	9301      	str	r3, [sp, #4]
 80a038a:	bd08      	pop	{r3, pc}
 80a038c:	080601b0 	.word	0x080601b0

080a0390 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0390:	b508      	push	{r3, lr}
 80a0392:	4b02      	ldr	r3, [pc, #8]	; (80a039c <HAL_GPIO_Read+0xc>)
 80a0394:	681b      	ldr	r3, [r3, #0]
 80a0396:	695b      	ldr	r3, [r3, #20]
 80a0398:	9301      	str	r3, [sp, #4]
 80a039a:	bd08      	pop	{r3, pc}
 80a039c:	080601b0 	.word	0x080601b0

080a03a0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a03a0:	b508      	push	{r3, lr}
 80a03a2:	4b02      	ldr	r3, [pc, #8]	; (80a03ac <HAL_I2C_Write_Data+0xc>)
 80a03a4:	681b      	ldr	r3, [r3, #0]
 80a03a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a03a8:	9301      	str	r3, [sp, #4]
 80a03aa:	bd08      	pop	{r3, pc}
 80a03ac:	080601ac 	.word	0x080601ac

080a03b0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a03b0:	b508      	push	{r3, lr}
 80a03b2:	4b02      	ldr	r3, [pc, #8]	; (80a03bc <HAL_I2C_Available_Data+0xc>)
 80a03b4:	681b      	ldr	r3, [r3, #0]
 80a03b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a03b8:	9301      	str	r3, [sp, #4]
 80a03ba:	bd08      	pop	{r3, pc}
 80a03bc:	080601ac 	.word	0x080601ac

080a03c0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a03c0:	b508      	push	{r3, lr}
 80a03c2:	4b02      	ldr	r3, [pc, #8]	; (80a03cc <HAL_I2C_Read_Data+0xc>)
 80a03c4:	681b      	ldr	r3, [r3, #0]
 80a03c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a03c8:	9301      	str	r3, [sp, #4]
 80a03ca:	bd08      	pop	{r3, pc}
 80a03cc:	080601ac 	.word	0x080601ac

080a03d0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a03d0:	b508      	push	{r3, lr}
 80a03d2:	4b02      	ldr	r3, [pc, #8]	; (80a03dc <HAL_I2C_Peek_Data+0xc>)
 80a03d4:	681b      	ldr	r3, [r3, #0]
 80a03d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a03d8:	9301      	str	r3, [sp, #4]
 80a03da:	bd08      	pop	{r3, pc}
 80a03dc:	080601ac 	.word	0x080601ac

080a03e0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a03e0:	b508      	push	{r3, lr}
 80a03e2:	4b02      	ldr	r3, [pc, #8]	; (80a03ec <HAL_I2C_Flush_Data+0xc>)
 80a03e4:	681b      	ldr	r3, [r3, #0]
 80a03e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a03e8:	9301      	str	r3, [sp, #4]
 80a03ea:	bd08      	pop	{r3, pc}
 80a03ec:	080601ac 	.word	0x080601ac

080a03f0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a03f0:	b508      	push	{r3, lr}
 80a03f2:	4b02      	ldr	r3, [pc, #8]	; (80a03fc <HAL_I2C_Is_Enabled+0xc>)
 80a03f4:	681b      	ldr	r3, [r3, #0]
 80a03f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a03f8:	9301      	str	r3, [sp, #4]
 80a03fa:	bd08      	pop	{r3, pc}
 80a03fc:	080601ac 	.word	0x080601ac

080a0400 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0400:	b508      	push	{r3, lr}
 80a0402:	4b03      	ldr	r3, [pc, #12]	; (80a0410 <HAL_I2C_Init+0x10>)
 80a0404:	681b      	ldr	r3, [r3, #0]
 80a0406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a040a:	9301      	str	r3, [sp, #4]
 80a040c:	bd08      	pop	{r3, pc}
 80a040e:	0000      	.short	0x0000
 80a0410:	080601ac 	.word	0x080601ac

080a0414 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0414:	b508      	push	{r3, lr}
 80a0416:	4b02      	ldr	r3, [pc, #8]	; (80a0420 <HAL_SPI_Init+0xc>)
 80a0418:	681b      	ldr	r3, [r3, #0]
 80a041a:	69db      	ldr	r3, [r3, #28]
 80a041c:	9301      	str	r3, [sp, #4]
 80a041e:	bd08      	pop	{r3, pc}
 80a0420:	080601b4 	.word	0x080601b4

080a0424 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0424:	b508      	push	{r3, lr}
 80a0426:	4b02      	ldr	r3, [pc, #8]	; (80a0430 <HAL_SPI_Is_Enabled+0xc>)
 80a0428:	681b      	ldr	r3, [r3, #0]
 80a042a:	6a1b      	ldr	r3, [r3, #32]
 80a042c:	9301      	str	r3, [sp, #4]
 80a042e:	bd08      	pop	{r3, pc}
 80a0430:	080601b4 	.word	0x080601b4

080a0434 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0434:	b508      	push	{r3, lr}
 80a0436:	4b02      	ldr	r3, [pc, #8]	; (80a0440 <HAL_USART_Init+0xc>)
 80a0438:	681b      	ldr	r3, [r3, #0]
 80a043a:	699b      	ldr	r3, [r3, #24]
 80a043c:	9301      	str	r3, [sp, #4]
 80a043e:	bd08      	pop	{r3, pc}
 80a0440:	080601c4 	.word	0x080601c4

080a0444 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b02      	ldr	r3, [pc, #8]	; (80a0450 <HAL_USART_Write_Data+0xc>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a044c:	9301      	str	r3, [sp, #4]
 80a044e:	bd08      	pop	{r3, pc}
 80a0450:	080601c4 	.word	0x080601c4

080a0454 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <HAL_USART_Available_Data+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601c4 	.word	0x080601c4

080a0464 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <HAL_USART_Read_Data+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601c4 	.word	0x080601c4

080a0474 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <HAL_USART_Peek_Data+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601c4 	.word	0x080601c4

080a0484 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <HAL_USART_Flush_Data+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601c4 	.word	0x080601c4

080a0494 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <HAL_USART_Is_Enabled+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601c4 	.word	0x080601c4

080a04a4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601c4 	.word	0x080601c4

080a04b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <HAL_USB_USART_Init+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	681b      	ldr	r3, [r3, #0]
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601d8 	.word	0x080601d8

080a04c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <HAL_USB_USART_Available_Data+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	691b      	ldr	r3, [r3, #16]
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	080601d8 	.word	0x080601d8

080a04d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	695b      	ldr	r3, [r3, #20]
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601d8 	.word	0x080601d8

080a04e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <HAL_USB_USART_Receive_Data+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	699b      	ldr	r3, [r3, #24]
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601d8 	.word	0x080601d8

080a04f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <HAL_USB_USART_Send_Data+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	69db      	ldr	r3, [r3, #28]
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	080601d8 	.word	0x080601d8

080a0504 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <HAL_USB_USART_Flush_Data+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	6a1b      	ldr	r3, [r3, #32]
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	080601d8 	.word	0x080601d8

080a0514 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b02      	ldr	r3, [pc, #8]	; (80a0520 <inet_gethostbyname+0xc>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a051c:	9301      	str	r3, [sp, #4]
 80a051e:	bd08      	pop	{r3, pc}
 80a0520:	080601c0 	.word	0x080601c0

080a0524 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <set_system_mode+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	685b      	ldr	r3, [r3, #4]
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	080601a4 	.word	0x080601a4

080a0534 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <system_delay_ms+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	695b      	ldr	r3, [r3, #20]
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	080601a4 	.word	0x080601a4

080a0544 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <application_thread_current+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601a4 	.word	0x080601a4

080a0554 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <application_thread_invoke+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601a4 	.word	0x080601a4

080a0564 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b03      	ldr	r3, [pc, #12]	; (80a0574 <system_ctrl_set_app_request_handler+0x10>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a056e:	9301      	str	r3, [sp, #4]
 80a0570:	bd08      	pop	{r3, pc}
 80a0572:	0000      	.short	0x0000
 80a0574:	080601a4 	.word	0x080601a4

080a0578 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0578:	b508      	push	{r3, lr}
 80a057a:	4b03      	ldr	r3, [pc, #12]	; (80a0588 <system_ctrl_set_result+0x10>)
 80a057c:	681b      	ldr	r3, [r3, #0]
 80a057e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0582:	9301      	str	r3, [sp, #4]
 80a0584:	bd08      	pop	{r3, pc}
 80a0586:	0000      	.short	0x0000
 80a0588:	080601a4 	.word	0x080601a4

080a058c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a058c:	b508      	push	{r3, lr}
 80a058e:	4b02      	ldr	r3, [pc, #8]	; (80a0598 <spark_cloud_flag_connected+0xc>)
 80a0590:	681b      	ldr	r3, [r3, #0]
 80a0592:	695b      	ldr	r3, [r3, #20]
 80a0594:	9301      	str	r3, [sp, #4]
 80a0596:	bd08      	pop	{r3, pc}
 80a0598:	080601cc 	.word	0x080601cc

080a059c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a059c:	b508      	push	{r3, lr}
 80a059e:	4b02      	ldr	r3, [pc, #8]	; (80a05a8 <spark_send_event+0xc>)
 80a05a0:	681b      	ldr	r3, [r3, #0]
 80a05a2:	6a1b      	ldr	r3, [r3, #32]
 80a05a4:	9301      	str	r3, [sp, #4]
 80a05a6:	bd08      	pop	{r3, pc}
 80a05a8:	080601cc 	.word	0x080601cc

080a05ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b02      	ldr	r3, [pc, #8]	; (80a05b8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a05b4:	9301      	str	r3, [sp, #4]
 80a05b6:	bd08      	pop	{r3, pc}
 80a05b8:	080601cc 	.word	0x080601cc

080a05bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b02      	ldr	r3, [pc, #8]	; (80a05c8 <network_connect+0xc>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	685b      	ldr	r3, [r3, #4]
 80a05c4:	9301      	str	r3, [sp, #4]
 80a05c6:	bd08      	pop	{r3, pc}
 80a05c8:	080601c8 	.word	0x080601c8

080a05cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a05cc:	b508      	push	{r3, lr}
 80a05ce:	4b02      	ldr	r3, [pc, #8]	; (80a05d8 <network_connecting+0xc>)
 80a05d0:	681b      	ldr	r3, [r3, #0]
 80a05d2:	689b      	ldr	r3, [r3, #8]
 80a05d4:	9301      	str	r3, [sp, #4]
 80a05d6:	bd08      	pop	{r3, pc}
 80a05d8:	080601c8 	.word	0x080601c8

080a05dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a05dc:	b508      	push	{r3, lr}
 80a05de:	4b02      	ldr	r3, [pc, #8]	; (80a05e8 <network_disconnect+0xc>)
 80a05e0:	681b      	ldr	r3, [r3, #0]
 80a05e2:	68db      	ldr	r3, [r3, #12]
 80a05e4:	9301      	str	r3, [sp, #4]
 80a05e6:	bd08      	pop	{r3, pc}
 80a05e8:	080601c8 	.word	0x080601c8

080a05ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a05ec:	b508      	push	{r3, lr}
 80a05ee:	4b02      	ldr	r3, [pc, #8]	; (80a05f8 <network_ready+0xc>)
 80a05f0:	681b      	ldr	r3, [r3, #0]
 80a05f2:	691b      	ldr	r3, [r3, #16]
 80a05f4:	9301      	str	r3, [sp, #4]
 80a05f6:	bd08      	pop	{r3, pc}
 80a05f8:	080601c8 	.word	0x080601c8

080a05fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05fc:	b508      	push	{r3, lr}
 80a05fe:	4b02      	ldr	r3, [pc, #8]	; (80a0608 <network_on+0xc>)
 80a0600:	681b      	ldr	r3, [r3, #0]
 80a0602:	695b      	ldr	r3, [r3, #20]
 80a0604:	9301      	str	r3, [sp, #4]
 80a0606:	bd08      	pop	{r3, pc}
 80a0608:	080601c8 	.word	0x080601c8

080a060c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <network_off+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	699b      	ldr	r3, [r3, #24]
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	080601c8 	.word	0x080601c8

080a061c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <network_listen+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	69db      	ldr	r3, [r3, #28]
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	080601c8 	.word	0x080601c8

080a062c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b02      	ldr	r3, [pc, #8]	; (80a0638 <network_listening+0xc>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	6a1b      	ldr	r3, [r3, #32]
 80a0634:	9301      	str	r3, [sp, #4]
 80a0636:	bd08      	pop	{r3, pc}
 80a0638:	080601c8 	.word	0x080601c8

080a063c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a063c:	b508      	push	{r3, lr}
 80a063e:	4b02      	ldr	r3, [pc, #8]	; (80a0648 <network_set_listen_timeout+0xc>)
 80a0640:	681b      	ldr	r3, [r3, #0]
 80a0642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0644:	9301      	str	r3, [sp, #4]
 80a0646:	bd08      	pop	{r3, pc}
 80a0648:	080601c8 	.word	0x080601c8

080a064c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a064c:	b508      	push	{r3, lr}
 80a064e:	4b02      	ldr	r3, [pc, #8]	; (80a0658 <network_get_listen_timeout+0xc>)
 80a0650:	681b      	ldr	r3, [r3, #0]
 80a0652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0654:	9301      	str	r3, [sp, #4]
 80a0656:	bd08      	pop	{r3, pc}
 80a0658:	080601c8 	.word	0x080601c8

080a065c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a065c:	b508      	push	{r3, lr}
 80a065e:	4b02      	ldr	r3, [pc, #8]	; (80a0668 <malloc+0xc>)
 80a0660:	681b      	ldr	r3, [r3, #0]
 80a0662:	681b      	ldr	r3, [r3, #0]
 80a0664:	9301      	str	r3, [sp, #4]
 80a0666:	bd08      	pop	{r3, pc}
 80a0668:	080601a0 	.word	0x080601a0

080a066c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a066c:	b508      	push	{r3, lr}
 80a066e:	4b02      	ldr	r3, [pc, #8]	; (80a0678 <free+0xc>)
 80a0670:	681b      	ldr	r3, [r3, #0]
 80a0672:	685b      	ldr	r3, [r3, #4]
 80a0674:	9301      	str	r3, [sp, #4]
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	080601a0 	.word	0x080601a0

080a067c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a067c:	b508      	push	{r3, lr}
 80a067e:	4b02      	ldr	r3, [pc, #8]	; (80a0688 <realloc+0xc>)
 80a0680:	681b      	ldr	r3, [r3, #0]
 80a0682:	689b      	ldr	r3, [r3, #8]
 80a0684:	9301      	str	r3, [sp, #4]
 80a0686:	bd08      	pop	{r3, pc}
 80a0688:	080601a0 	.word	0x080601a0

080a068c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a068c:	b508      	push	{r3, lr}
 80a068e:	4b02      	ldr	r3, [pc, #8]	; (80a0698 <abort+0xc>)
 80a0690:	681b      	ldr	r3, [r3, #0]
 80a0692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0694:	9301      	str	r3, [sp, #4]
 80a0696:	bd08      	pop	{r3, pc}
 80a0698:	080601a0 	.word	0x080601a0

080a069c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a069c:	b508      	push	{r3, lr}
 80a069e:	4b02      	ldr	r3, [pc, #8]	; (80a06a8 <_malloc_r+0xc>)
 80a06a0:	681b      	ldr	r3, [r3, #0]
 80a06a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06a4:	9301      	str	r3, [sp, #4]
 80a06a6:	bd08      	pop	{r3, pc}
 80a06a8:	080601a0 	.word	0x080601a0

080a06ac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a06ac:	2100      	movs	r1, #0
 80a06ae:	f7ff bf41 	b.w	80a0534 <system_delay_ms>

080a06b2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a06b2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a06b4:	6883      	ldr	r3, [r0, #8]
 80a06b6:	4604      	mov	r4, r0
 80a06b8:	b90b      	cbnz	r3, 80a06be <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a06ba:	f001 f830 	bl	80a171e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a06be:	68c3      	ldr	r3, [r0, #12]
 80a06c0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a06c2:	68a3      	ldr	r3, [r4, #8]
 80a06c4:	b11b      	cbz	r3, 80a06ce <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a06c6:	2203      	movs	r2, #3
 80a06c8:	4621      	mov	r1, r4
 80a06ca:	4620      	mov	r0, r4
 80a06cc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a06ce:	4620      	mov	r0, r4
}
 80a06d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a06d4:	2110      	movs	r1, #16
 80a06d6:	f001 b820 	b.w	80a171a <_ZdlPvj>

080a06da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a06da:	4770      	bx	lr

080a06dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a06dc:	2000      	movs	r0, #0
 80a06de:	4770      	bx	lr

080a06e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a06e0:	b510      	push	{r4, lr}
 80a06e2:	4604      	mov	r4, r0
 80a06e4:	2110      	movs	r1, #16
 80a06e6:	f001 f818 	bl	80a171a <_ZdlPvj>
 80a06ea:	4620      	mov	r0, r4
 80a06ec:	bd10      	pop	{r4, pc}

080a06ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a06ee:	b508      	push	{r3, lr}
      { delete this; }
 80a06f0:	b108      	cbz	r0, 80a06f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a06f2:	f7ff fff5 	bl	80a06e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a06f6:	bd08      	pop	{r3, pc}

080a06f8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a06f8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a06fa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a06fc:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a06fe:	b113      	cbz	r3, 80a0706 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0700:	2203      	movs	r2, #3
 80a0702:	4601      	mov	r1, r0
 80a0704:	4798      	blx	r3
    }
 80a0706:	4620      	mov	r0, r4
 80a0708:	bd10      	pop	{r4, pc}

080a070a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a070a:	2200      	movs	r2, #0
 80a070c:	6002      	str	r2, [r0, #0]
 80a070e:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0712:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0714:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0716:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a071a:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a071c:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a071e:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0720:	680c      	ldr	r4, [r1, #0]
 80a0722:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0724:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0726:	bd10      	pop	{r4, pc}

080a0728 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0728:	b510      	push	{r4, lr}
 80a072a:	4604      	mov	r4, r0
    free((void*)msg_);
 80a072c:	6800      	ldr	r0, [r0, #0]
 80a072e:	f7ff ff9d 	bl	80a066c <free>
}
 80a0732:	4620      	mov	r0, r4
 80a0734:	bd10      	pop	{r4, pc}

080a0736 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0736:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0738:	68c4      	ldr	r4, [r0, #12]
 80a073a:	b1f4      	cbz	r4, 80a077a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a073c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a073e:	2b02      	cmp	r3, #2
 80a0740:	d103      	bne.n	80a074a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0742:	f104 000c 	add.w	r0, r4, #12
 80a0746:	f7ff ffef 	bl	80a0728 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a074a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a074c:	b135      	cbz	r5, 80a075c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a074e:	4628      	mov	r0, r5
 80a0750:	f7ff ffd2 	bl	80a06f8 <_ZNSt14_Function_baseD1Ev>
 80a0754:	2110      	movs	r1, #16
 80a0756:	4628      	mov	r0, r5
 80a0758:	f000 ffdf 	bl	80a171a <_ZdlPvj>
 80a075c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a075e:	b135      	cbz	r5, 80a076e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0760:	4628      	mov	r0, r5
 80a0762:	f7ff ffc9 	bl	80a06f8 <_ZNSt14_Function_baseD1Ev>
 80a0766:	2110      	movs	r1, #16
 80a0768:	4628      	mov	r0, r5
 80a076a:	f000 ffd6 	bl	80a171a <_ZdlPvj>
 80a076e:	4620      	mov	r0, r4
 80a0770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0774:	2114      	movs	r1, #20
 80a0776:	f000 bfd0 	b.w	80a171a <_ZdlPvj>
 80a077a:	bd38      	pop	{r3, r4, r5, pc}

080a077c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a077c:	b513      	push	{r0, r1, r4, lr}
 80a077e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0780:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0784:	2300      	movs	r3, #0
 80a0786:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0788:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a078a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a078c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a078e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0790:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0792:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0794:	f7ff fcc8 	bl	80a0128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0798:	4620      	mov	r0, r4
 80a079a:	b002      	add	sp, #8
 80a079c:	bd10      	pop	{r4, pc}

080a079e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a079e:	680b      	ldr	r3, [r1, #0]
 80a07a0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a07a2:	b113      	cbz	r3, 80a07aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a07a4:	685a      	ldr	r2, [r3, #4]
 80a07a6:	3201      	adds	r2, #1
 80a07a8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a07aa:	4770      	bx	lr

080a07ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a07ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a07ae:	460c      	mov	r4, r1
 80a07b0:	4606      	mov	r6, r0
 80a07b2:	460f      	mov	r7, r1
 80a07b4:	f854 3b04 	ldr.w	r3, [r4], #4
 80a07b8:	ad02      	add	r5, sp, #8
 80a07ba:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a07be:	4621      	mov	r1, r4
 80a07c0:	a801      	add	r0, sp, #4
 80a07c2:	f7ff ffec 	bl	80a079e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a07c6:	4629      	mov	r1, r5
 80a07c8:	4630      	mov	r0, r6
 80a07ca:	f7ff ffd7 	bl	80a077c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a07ce:	a801      	add	r0, sp, #4
 80a07d0:	f7ff fcaa 	bl	80a0128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a07d4:	4620      	mov	r0, r4
 80a07d6:	f7ff fca7 	bl	80a0128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a07da:	4638      	mov	r0, r7
 80a07dc:	2108      	movs	r1, #8
 80a07de:	f000 ff9c 	bl	80a171a <_ZdlPvj>
        return p;
    }
 80a07e2:	4630      	mov	r0, r6
 80a07e4:	b003      	add	sp, #12
 80a07e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a07e8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a07e8:	b513      	push	{r0, r1, r4, lr}
 80a07ea:	460b      	mov	r3, r1
 80a07ec:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a07ee:	c803      	ldmia	r0, {r0, r1}
 80a07f0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a07f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a07f8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a07fc:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0800:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0804:	b002      	add	sp, #8
 80a0806:	bd10      	pop	{r4, pc}

080a0808 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0808:	b538      	push	{r3, r4, r5, lr}
 80a080a:	2300      	movs	r3, #0
 80a080c:	4604      	mov	r4, r0
 80a080e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0810:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0812:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0814:	f7ff fc41 	bl	80a009a <_Znwj>
 80a0818:	b128      	cbz	r0, 80a0826 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a081a:	2301      	movs	r3, #1
 80a081c:	6043      	str	r3, [r0, #4]
 80a081e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0820:	4b02      	ldr	r3, [pc, #8]	; (80a082c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0822:	60c5      	str	r5, [r0, #12]
 80a0824:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0826:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a0828:	4620      	mov	r0, r4
 80a082a:	bd38      	pop	{r3, r4, r5, pc}
 80a082c:	080a1b00 	.word	0x080a1b00

080a0830 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0830:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0832:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0834:	b90a      	cbnz	r2, 80a083a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0836:	f000 ff72 	bl	80a171e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a083a:	68c3      	ldr	r3, [r0, #12]
    }
 80a083c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0840:	4718      	bx	r3

080a0842 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0842:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0844:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0846:	f100 0110 	add.w	r1, r0, #16
 80a084a:	f7ff fff1 	bl	80a0830 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a084e:	bd08      	pop	{r3, pc}

080a0850 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0850:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0852:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0854:	b90a      	cbnz	r2, 80a085a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0856:	f000 ff62 	bl	80a171e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a085a:	68c3      	ldr	r3, [r0, #12]
    }
 80a085c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0860:	4718      	bx	r3

080a0862 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0862:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0864:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0866:	f100 0110 	add.w	r1, r0, #16
 80a086a:	f7ff fff1 	bl	80a0850 <_ZNKSt8functionIFvRKbEEclES1_>
 80a086e:	bd08      	pop	{r3, pc}

080a0870 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0870:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0872:	2300      	movs	r3, #0
 80a0874:	6083      	str	r3, [r0, #8]
 80a0876:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0878:	4604      	mov	r4, r0
 80a087a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a087c:	b12b      	cbz	r3, 80a088a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a087e:	2202      	movs	r2, #2
 80a0880:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0882:	68eb      	ldr	r3, [r5, #12]
 80a0884:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0886:	68ab      	ldr	r3, [r5, #8]
 80a0888:	60a3      	str	r3, [r4, #8]
	}
    }
 80a088a:	4620      	mov	r0, r4
 80a088c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0890 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0890:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0892:	b089      	sub	sp, #36	; 0x24
 80a0894:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0896:	4668      	mov	r0, sp
 80a0898:	f7ff ff37 	bl	80a070a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a089c:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a08a0:	2300      	movs	r3, #0
 80a08a2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a08a6:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a08aa:	2b00      	cmp	r3, #0
 80a08ac:	d103      	bne.n	80a08b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a08ae:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a08b2:	2900      	cmp	r1, #0
 80a08b4:	d1f7      	bne.n	80a08a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a08b6:	d002      	beq.n	80a08be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a08b8:	f88d 3008 	strb.w	r3, [sp, #8]
 80a08bc:	e063      	b.n	80a0986 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a08be:	f114 050c 	adds.w	r5, r4, #12
 80a08c2:	d003      	beq.n	80a08cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a08c4:	4669      	mov	r1, sp
 80a08c6:	4628      	mov	r0, r5
 80a08c8:	f7ff ff1f 	bl	80a070a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a08cc:	f3bf 8f5f 	dmb	sy
 80a08d0:	2301      	movs	r3, #1
 80a08d2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a08d4:	f3bf 8f5f 	dmb	sy
 80a08d8:	f104 0308 	add.w	r3, r4, #8
 80a08dc:	2000      	movs	r0, #0
 80a08de:	e853 6f00 	ldrex	r6, [r3]
 80a08e2:	e843 0200 	strex	r2, r0, [r3]
 80a08e6:	2a00      	cmp	r2, #0
 80a08e8:	d1f9      	bne.n	80a08de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a08ea:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a08ee:	2e00      	cmp	r6, #0
 80a08f0:	d049      	beq.n	80a0986 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a08f2:	f7ff fe27 	bl	80a0544 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a08f6:	b120      	cbz	r0, 80a0902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a08f8:	4629      	mov	r1, r5
 80a08fa:	4630      	mov	r0, r6
 80a08fc:	f7ff ff98 	bl	80a0830 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0900:	e03a      	b.n	80a0978 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0902:	4631      	mov	r1, r6
 80a0904:	a802      	add	r0, sp, #8
 80a0906:	f7ff ffb3 	bl	80a0870 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a090a:	68e0      	ldr	r0, [r4, #12]
 80a090c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0910:	b108      	cbz	r0, 80a0916 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a0912:	f001 f8a3 	bl	80a1a5c <strdup>
 80a0916:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0918:	2010      	movs	r0, #16
 80a091a:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a091e:	f7ff fbbc 	bl	80a009a <_Znwj>
 80a0922:	4605      	mov	r5, r0
 80a0924:	b1e8      	cbz	r0, 80a0962 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0926:	2700      	movs	r7, #0
 80a0928:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a092a:	2018      	movs	r0, #24
 80a092c:	f7ff fbb5 	bl	80a009a <_Znwj>
 80a0930:	4604      	mov	r4, r0
 80a0932:	b188      	cbz	r0, 80a0958 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0934:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0936:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0938:	a802      	add	r0, sp, #8
 80a093a:	f7ff ff55 	bl	80a07e8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a093e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0940:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0942:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0944:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0946:	9204      	str	r2, [sp, #16]
 80a0948:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a094a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a094c:	60e3      	str	r3, [r4, #12]
 80a094e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0952:	9205      	str	r2, [sp, #20]
 80a0954:	f7ff fed9 	bl	80a070a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0958:	4b0d      	ldr	r3, [pc, #52]	; (80a0990 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a095a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a095c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a095e:	4b0d      	ldr	r3, [pc, #52]	; (80a0994 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a0960:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a0962:	a806      	add	r0, sp, #24
 80a0964:	f7ff fee0 	bl	80a0728 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0968:	a802      	add	r0, sp, #8
 80a096a:	f7ff fec5 	bl	80a06f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a096e:	2200      	movs	r2, #0
 80a0970:	4629      	mov	r1, r5
 80a0972:	4809      	ldr	r0, [pc, #36]	; (80a0998 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a0974:	f7ff fdee 	bl	80a0554 <application_thread_invoke>
 80a0978:	4630      	mov	r0, r6
 80a097a:	f7ff febd 	bl	80a06f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a097e:	2110      	movs	r1, #16
 80a0980:	4630      	mov	r0, r6
 80a0982:	f000 feca 	bl	80a171a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a0986:	4668      	mov	r0, sp
 80a0988:	f7ff fece 	bl	80a0728 <_ZN8particle5ErrorD1Ev>
    }
 80a098c:	b009      	add	sp, #36	; 0x24
 80a098e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0990:	080a0843 	.word	0x080a0843
 80a0994:	080a0ab9 	.word	0x080a0ab9
 80a0998:	080a06b3 	.word	0x080a06b3

080a099c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a09a0:	b08b      	sub	sp, #44	; 0x2c
 80a09a2:	4606      	mov	r6, r0
 80a09a4:	460f      	mov	r7, r1
 80a09a6:	4690      	mov	r8, r2
 80a09a8:	4699      	mov	r9, r3
 80a09aa:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a09ae:	f7ff fded 	bl	80a058c <spark_cloud_flag_connected>
 80a09b2:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a09b4:	4683      	mov	fp, r0
 80a09b6:	bb30      	cbnz	r0, 80a0a06 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a09b8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a09bc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a09be:	a905      	add	r1, sp, #20
 80a09c0:	4628      	mov	r0, r5
 80a09c2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a09c6:	f7ff fea0 	bl	80a070a <_ZN8particle5ErrorC1EOS0_>
 80a09ca:	2014      	movs	r0, #20
 80a09cc:	f7ff fb65 	bl	80a009a <_Znwj>
 80a09d0:	4604      	mov	r4, r0
 80a09d2:	b158      	cbz	r0, 80a09ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a09d4:	2302      	movs	r3, #2
 80a09d6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a09d8:	2301      	movs	r3, #1
 80a09da:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a09dc:	f8c0 b004 	str.w	fp, [r0, #4]
 80a09e0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a09e4:	4629      	mov	r1, r5
 80a09e6:	300c      	adds	r0, #12
 80a09e8:	f7ff fe8f 	bl	80a070a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a09ec:	4630      	mov	r0, r6
 80a09ee:	4621      	mov	r1, r4
 80a09f0:	f840 4b04 	str.w	r4, [r0], #4
 80a09f4:	f7ff ff08 	bl	80a0808 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a09f8:	4628      	mov	r0, r5
 80a09fa:	f7ff fe95 	bl	80a0728 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a09fe:	a805      	add	r0, sp, #20
 80a0a00:	f7ff fe92 	bl	80a0728 <_ZN8particle5ErrorD1Ev>
 80a0a04:	e052      	b.n	80a0aac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0a06:	2400      	movs	r4, #0
 80a0a08:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0a0a:	2014      	movs	r0, #20
 80a0a0c:	606c      	str	r4, [r5, #4]
 80a0a0e:	60ac      	str	r4, [r5, #8]
 80a0a10:	9307      	str	r3, [sp, #28]
 80a0a12:	f7ff fb42 	bl	80a009a <_Znwj>
 80a0a16:	4601      	mov	r1, r0
 80a0a18:	b118      	cbz	r0, 80a0a22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a0a1a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0a1c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0a1e:	6044      	str	r4, [r0, #4]
 80a0a20:	6084      	str	r4, [r0, #8]
 80a0a22:	a804      	add	r0, sp, #16
 80a0a24:	9103      	str	r1, [sp, #12]
 80a0a26:	f7ff feef 	bl	80a0808 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a0a2a:	4b22      	ldr	r3, [pc, #136]	; (80a0ab4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0a2c:	2008      	movs	r0, #8
 80a0a2e:	9308      	str	r3, [sp, #32]
 80a0a30:	f7ff fb33 	bl	80a009a <_Znwj>
 80a0a34:	4604      	mov	r4, r0
 80a0a36:	b128      	cbz	r0, 80a0a44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0a38:	9b03      	ldr	r3, [sp, #12]
 80a0a3a:	a904      	add	r1, sp, #16
 80a0a3c:	f840 3b04 	str.w	r3, [r0], #4
 80a0a40:	f7ff fead 	bl	80a079e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0a44:	9500      	str	r5, [sp, #0]
 80a0a46:	fa5f f38a 	uxtb.w	r3, sl
 80a0a4a:	464a      	mov	r2, r9
 80a0a4c:	4641      	mov	r1, r8
 80a0a4e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a0a50:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0a52:	f7ff fda3 	bl	80a059c <spark_send_event>
 80a0a56:	b920      	cbnz	r0, 80a0a62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a0a58:	9b03      	ldr	r3, [sp, #12]
 80a0a5a:	785b      	ldrb	r3, [r3, #1]
 80a0a5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0a60:	b183      	cbz	r3, 80a0a84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a0a62:	9b03      	ldr	r3, [sp, #12]
 80a0a64:	a904      	add	r1, sp, #16
 80a0a66:	a806      	add	r0, sp, #24
 80a0a68:	9305      	str	r3, [sp, #20]
 80a0a6a:	f7ff fe98 	bl	80a079e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a0a6e:	a905      	add	r1, sp, #20
 80a0a70:	4630      	mov	r0, r6
 80a0a72:	f7ff fe83 	bl	80a077c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0a76:	a806      	add	r0, sp, #24
 80a0a78:	f7ff fb56 	bl	80a0128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0a7c:	a804      	add	r0, sp, #16
 80a0a7e:	f7ff fb53 	bl	80a0128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0a82:	e013      	b.n	80a0aac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a0a84:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a0a88:	a905      	add	r1, sp, #20
 80a0a8a:	a803      	add	r0, sp, #12
 80a0a8c:	9205      	str	r2, [sp, #20]
 80a0a8e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0a92:	f7ff fefd 	bl	80a0890 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0a96:	a805      	add	r0, sp, #20
 80a0a98:	f7ff fe46 	bl	80a0728 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0a9c:	a805      	add	r0, sp, #20
 80a0a9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0aa0:	f7ff fe84 	bl	80a07ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a0aa4:	a806      	add	r0, sp, #24
 80a0aa6:	f7ff fb3f 	bl	80a0128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0aaa:	e7da      	b.n	80a0a62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a0aac:	4630      	mov	r0, r6
 80a0aae:	b00b      	add	sp, #44	; 0x2c
 80a0ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0ab4:	080a0c29 	.word	0x080a0c29

080a0ab8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0ab8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0abc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0abe:	d006      	beq.n	80a0ace <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a0ac0:	2a03      	cmp	r2, #3
 80a0ac2:	d017      	beq.n	80a0af4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a0ac4:	2a01      	cmp	r2, #1
 80a0ac6:	d122      	bne.n	80a0b0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0ac8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0aca:	6003      	str	r3, [r0, #0]
	      break;
 80a0acc:	e01f      	b.n	80a0b0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0ace:	2018      	movs	r0, #24
 80a0ad0:	680e      	ldr	r6, [r1, #0]
 80a0ad2:	f7ff fae2 	bl	80a009a <_Znwj>
 80a0ad6:	4605      	mov	r5, r0
 80a0ad8:	b150      	cbz	r0, 80a0af0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0ada:	4631      	mov	r1, r6
 80a0adc:	f7ff fec8 	bl	80a0870 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0ae0:	6930      	ldr	r0, [r6, #16]
 80a0ae2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0ae6:	b108      	cbz	r0, 80a0aec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a0ae8:	f000 ffb8 	bl	80a1a5c <strdup>
 80a0aec:	6128      	str	r0, [r5, #16]
 80a0aee:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0af0:	6025      	str	r5, [r4, #0]
 80a0af2:	e00c      	b.n	80a0b0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0af4:	6804      	ldr	r4, [r0, #0]
 80a0af6:	b154      	cbz	r4, 80a0b0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a0af8:	f104 0010 	add.w	r0, r4, #16
 80a0afc:	f7ff fe14 	bl	80a0728 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0b00:	4620      	mov	r0, r4
 80a0b02:	f7ff fdf9 	bl	80a06f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0b06:	2118      	movs	r1, #24
 80a0b08:	4620      	mov	r0, r4
 80a0b0a:	f000 fe06 	bl	80a171a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0b0e:	2000      	movs	r0, #0
 80a0b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b12 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0b12:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0b14:	2300      	movs	r3, #0
 80a0b16:	6083      	str	r3, [r0, #8]
 80a0b18:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0b1a:	4604      	mov	r4, r0
 80a0b1c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0b1e:	b12b      	cbz	r3, 80a0b2c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0b20:	2202      	movs	r2, #2
 80a0b22:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0b24:	68eb      	ldr	r3, [r5, #12]
 80a0b26:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0b28:	68ab      	ldr	r3, [r5, #8]
 80a0b2a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0b2c:	4620      	mov	r0, r4
 80a0b2e:	bd38      	pop	{r3, r4, r5, pc}

080a0b30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0b30:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0b32:	b570      	push	{r4, r5, r6, lr}
 80a0b34:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0b36:	d006      	beq.n	80a0b46 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a0b38:	2a03      	cmp	r2, #3
 80a0b3a:	d011      	beq.n	80a0b60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a0b3c:	2a01      	cmp	r2, #1
 80a0b3e:	d118      	bne.n	80a0b72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0b40:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0b42:	6003      	str	r3, [r0, #0]
	      break;
 80a0b44:	e015      	b.n	80a0b72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0b46:	2014      	movs	r0, #20
 80a0b48:	680e      	ldr	r6, [r1, #0]
 80a0b4a:	f7ff faa6 	bl	80a009a <_Znwj>
 80a0b4e:	4605      	mov	r5, r0
 80a0b50:	b120      	cbz	r0, 80a0b5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0b52:	4631      	mov	r1, r6
 80a0b54:	f7ff ffdd 	bl	80a0b12 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0b58:	7c33      	ldrb	r3, [r6, #16]
 80a0b5a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0b5c:	6025      	str	r5, [r4, #0]
 80a0b5e:	e008      	b.n	80a0b72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0b60:	6804      	ldr	r4, [r0, #0]
 80a0b62:	b134      	cbz	r4, 80a0b72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	f7ff fdc7 	bl	80a06f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0b6a:	2114      	movs	r1, #20
 80a0b6c:	4620      	mov	r0, r4
 80a0b6e:	f000 fdd4 	bl	80a171a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0b72:	2000      	movs	r0, #0
 80a0b74:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0b78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a0b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0b7a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0b7c:	f3bf 8f5f 	dmb	sy
 80a0b80:	b087      	sub	sp, #28
 80a0b82:	2300      	movs	r3, #0
 80a0b84:	e850 6f00 	ldrex	r6, [r0]
 80a0b88:	e840 3200 	strex	r2, r3, [r0]
 80a0b8c:	2a00      	cmp	r2, #0
 80a0b8e:	d1f9      	bne.n	80a0b84 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a0b90:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0b94:	2e00      	cmp	r6, #0
 80a0b96:	d03f      	beq.n	80a0c18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0b98:	4618      	mov	r0, r3
 80a0b9a:	f7ff fcd3 	bl	80a0544 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0b9e:	4607      	mov	r7, r0
 80a0ba0:	b120      	cbz	r0, 80a0bac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0ba2:	4621      	mov	r1, r4
 80a0ba4:	4630      	mov	r0, r6
 80a0ba6:	f7ff fe53 	bl	80a0850 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0baa:	e02e      	b.n	80a0c0a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0bac:	4631      	mov	r1, r6
 80a0bae:	a801      	add	r0, sp, #4
 80a0bb0:	f7ff ffaf 	bl	80a0b12 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0bb4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0bb6:	2010      	movs	r0, #16
 80a0bb8:	f88d 3014 	strb.w	r3, [sp, #20]
 80a0bbc:	f7ff fa6d 	bl	80a009a <_Znwj>
 80a0bc0:	4605      	mov	r5, r0
 80a0bc2:	b1d0      	cbz	r0, 80a0bfa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0bc4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0bc6:	2014      	movs	r0, #20
 80a0bc8:	f7ff fa67 	bl	80a009a <_Znwj>
 80a0bcc:	4604      	mov	r4, r0
 80a0bce:	b178      	cbz	r0, 80a0bf0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0bd0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0bd2:	4601      	mov	r1, r0
 80a0bd4:	a801      	add	r0, sp, #4
 80a0bd6:	f7ff fe07 	bl	80a07e8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0bda:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0bdc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0bde:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0be0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0be2:	9203      	str	r2, [sp, #12]
 80a0be4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0be6:	60e3      	str	r3, [r4, #12]
 80a0be8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0bec:	9204      	str	r2, [sp, #16]
 80a0bee:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0bf0:	4b0a      	ldr	r3, [pc, #40]	; (80a0c1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0bf2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0bf4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0bf6:	4b0a      	ldr	r3, [pc, #40]	; (80a0c20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a0bf8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0bfa:	a801      	add	r0, sp, #4
 80a0bfc:	f7ff fd7c 	bl	80a06f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0c00:	2200      	movs	r2, #0
 80a0c02:	4629      	mov	r1, r5
 80a0c04:	4807      	ldr	r0, [pc, #28]	; (80a0c24 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a0c06:	f7ff fca5 	bl	80a0554 <application_thread_invoke>
 80a0c0a:	4630      	mov	r0, r6
 80a0c0c:	f7ff fd74 	bl	80a06f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0c10:	2110      	movs	r1, #16
 80a0c12:	4630      	mov	r0, r6
 80a0c14:	f000 fd81 	bl	80a171a <_ZdlPvj>
        }
    }
 80a0c18:	b007      	add	sp, #28
 80a0c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0c1c:	080a0863 	.word	0x080a0863
 80a0c20:	080a0b31 	.word	0x080a0b31
 80a0c24:	080a06b3 	.word	0x080a06b3

080a0c28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0c28:	b530      	push	{r4, r5, lr}
 80a0c2a:	4604      	mov	r4, r0
 80a0c2c:	b085      	sub	sp, #20
 80a0c2e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0c30:	4668      	mov	r0, sp
 80a0c32:	4611      	mov	r1, r2
 80a0c34:	f7ff fdba 	bl	80a07ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0c38:	b17c      	cbz	r4, 80a0c5a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0c3a:	b224      	sxth	r4, r4
 80a0c3c:	4628      	mov	r0, r5
 80a0c3e:	b10d      	cbz	r5, 80a0c44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a0c40:	f000 ff0c 	bl	80a1a5c <strdup>
 80a0c44:	9002      	str	r0, [sp, #8]
 80a0c46:	a902      	add	r1, sp, #8
 80a0c48:	4668      	mov	r0, sp
 80a0c4a:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a0c4e:	f7ff fe1f 	bl	80a0890 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a0c52:	a802      	add	r0, sp, #8
 80a0c54:	f7ff fd68 	bl	80a0728 <_ZN8particle5ErrorD1Ev>
 80a0c58:	e01d      	b.n	80a0c96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0c5a:	f04f 0201 	mov.w	r2, #1
 80a0c5e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0c60:	f88d 4008 	strb.w	r4, [sp, #8]
 80a0c64:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a0c68:	42a3      	cmp	r3, r4
 80a0c6a:	d103      	bne.n	80a0c74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a0c6c:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a0c70:	2900      	cmp	r1, #0
 80a0c72:	d1f7      	bne.n	80a0c64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a0c74:	d002      	beq.n	80a0c7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a0c76:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0c7a:	e00c      	b.n	80a0c96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a0c7c:	f110 010c 	adds.w	r1, r0, #12
 80a0c80:	f04f 0301 	mov.w	r3, #1
 80a0c84:	bf18      	it	ne
 80a0c86:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0c88:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a0c8c:	3004      	adds	r0, #4
 80a0c8e:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a0c92:	f7ff ff71 	bl	80a0b78 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a0c96:	a801      	add	r0, sp, #4
 80a0c98:	f7ff fa46 	bl	80a0128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a0c9c:	b005      	add	sp, #20
 80a0c9e:	bd30      	pop	{r4, r5, pc}

080a0ca0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0ca0:	4770      	bx	lr

080a0ca2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0ca4:	4606      	mov	r6, r0
 80a0ca6:	4615      	mov	r5, r2
 80a0ca8:	460c      	mov	r4, r1
 80a0caa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0cac:	42bc      	cmp	r4, r7
 80a0cae:	d006      	beq.n	80a0cbe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0cb0:	6833      	ldr	r3, [r6, #0]
 80a0cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0cb6:	689b      	ldr	r3, [r3, #8]
 80a0cb8:	4630      	mov	r0, r6
 80a0cba:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0cbc:	e7f6      	b.n	80a0cac <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0cbe:	4628      	mov	r0, r5
 80a0cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0cc2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0cc2:	2200      	movs	r2, #0
 80a0cc4:	7c00      	ldrb	r0, [r0, #16]
 80a0cc6:	f7ff bb6b 	b.w	80a03a0 <HAL_I2C_Write_Data>

080a0cca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0cca:	2100      	movs	r1, #0
 80a0ccc:	7c00      	ldrb	r0, [r0, #16]
 80a0cce:	f7ff bb6f 	b.w	80a03b0 <HAL_I2C_Available_Data>

080a0cd2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0cd2:	2100      	movs	r1, #0
 80a0cd4:	7c00      	ldrb	r0, [r0, #16]
 80a0cd6:	f7ff bb73 	b.w	80a03c0 <HAL_I2C_Read_Data>

080a0cda <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0cda:	2100      	movs	r1, #0
 80a0cdc:	7c00      	ldrb	r0, [r0, #16]
 80a0cde:	f7ff bb77 	b.w	80a03d0 <HAL_I2C_Peek_Data>

080a0ce2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0ce2:	2100      	movs	r1, #0
 80a0ce4:	7c00      	ldrb	r0, [r0, #16]
 80a0ce6:	f7ff bb7b 	b.w	80a03e0 <HAL_I2C_Flush_Data>

080a0cea <_ZN7TwoWireD0Ev>:
 80a0cea:	b510      	push	{r4, lr}
 80a0cec:	4604      	mov	r4, r0
 80a0cee:	2114      	movs	r1, #20
 80a0cf0:	f000 fd13 	bl	80a171a <_ZdlPvj>
 80a0cf4:	4620      	mov	r0, r4
 80a0cf6:	bd10      	pop	{r4, pc}

080a0cf8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0cf8:	b510      	push	{r4, lr}
 80a0cfa:	4604      	mov	r4, r0
 80a0cfc:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0d02:	60a3      	str	r3, [r4, #8]
 80a0d04:	4b04      	ldr	r3, [pc, #16]	; (80a0d18 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0d06:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0d08:	7420      	strb	r0, [r4, #16]
 80a0d0a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0d0c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0d0e:	f7ff fb77 	bl	80a0400 <HAL_I2C_Init>

}
 80a0d12:	4620      	mov	r0, r4
 80a0d14:	bd10      	pop	{r4, pc}
 80a0d16:	bf00      	nop
 80a0d18:	080a1b1c 	.word	0x080a1b1c

080a0d1c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0d1c:	2100      	movs	r1, #0
 80a0d1e:	7c00      	ldrb	r0, [r0, #16]
 80a0d20:	f7ff bb66 	b.w	80a03f0 <HAL_I2C_Is_Enabled>

080a0d24 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0d24:	4770      	bx	lr

080a0d26 <_ZN9IPAddressD0Ev>:
 80a0d26:	b510      	push	{r4, lr}
 80a0d28:	4604      	mov	r4, r0
 80a0d2a:	2118      	movs	r1, #24
 80a0d2c:	f000 fcf5 	bl	80a171a <_ZdlPvj>
 80a0d30:	4620      	mov	r0, r4
 80a0d32:	bd10      	pop	{r4, pc}

080a0d34 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d36:	460f      	mov	r7, r1
 80a0d38:	f100 0608 	add.w	r6, r0, #8
 80a0d3c:	1d05      	adds	r5, r0, #4
 80a0d3e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0d40:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0d44:	220a      	movs	r2, #10
 80a0d46:	4638      	mov	r0, r7
 80a0d48:	f000 f911 	bl	80a0f6e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0d4c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0d4e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0d50:	d007      	beq.n	80a0d62 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0d52:	2c00      	cmp	r4, #0
 80a0d54:	d0f4      	beq.n	80a0d40 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0d56:	212e      	movs	r1, #46	; 0x2e
 80a0d58:	4638      	mov	r0, r7
 80a0d5a:	f000 f8db 	bl	80a0f14 <_ZN5Print5printEc>
 80a0d5e:	4404      	add	r4, r0
 80a0d60:	e7ee      	b.n	80a0d40 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0d62:	4620      	mov	r0, r4
 80a0d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0d68 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0d68:	b510      	push	{r4, lr}
 80a0d6a:	4604      	mov	r4, r0
 80a0d6c:	4b04      	ldr	r3, [pc, #16]	; (80a0d80 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0d6e:	2211      	movs	r2, #17
 80a0d70:	f840 3b04 	str.w	r3, [r0], #4
 80a0d74:	2100      	movs	r1, #0
 80a0d76:	f000 fe36 	bl	80a19e6 <memset>
{
    clear();
}
 80a0d7a:	4620      	mov	r0, r4
 80a0d7c:	bd10      	pop	{r4, pc}
 80a0d7e:	bf00      	nop
 80a0d80:	080a1b44 	.word	0x080a1b44

080a0d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0d84:	4603      	mov	r3, r0
 80a0d86:	4a07      	ldr	r2, [pc, #28]	; (80a0da4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0d88:	b510      	push	{r4, lr}
 80a0d8a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0d8e:	f101 0210 	add.w	r2, r1, #16
 80a0d92:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0d96:	4291      	cmp	r1, r2
 80a0d98:	f843 4b04 	str.w	r4, [r3], #4
 80a0d9c:	d1f9      	bne.n	80a0d92 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0d9e:	780a      	ldrb	r2, [r1, #0]
 80a0da0:	701a      	strb	r2, [r3, #0]
}
 80a0da2:	bd10      	pop	{r4, pc}
 80a0da4:	080a1b44 	.word	0x080a1b44

080a0da8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0da8:	4a02      	ldr	r2, [pc, #8]	; (80a0db4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0daa:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0dac:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0dae:	2204      	movs	r2, #4
 80a0db0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0db2:	4770      	bx	lr
 80a0db4:	080a1b44 	.word	0x080a1b44

080a0db8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0db8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0dba:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0dbe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0dc2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0dc6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0dca:	2304      	movs	r3, #4
 80a0dcc:	6041      	str	r1, [r0, #4]
 80a0dce:	7503      	strb	r3, [r0, #20]
 80a0dd0:	bd10      	pop	{r4, pc}
	...

080a0dd4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0dd6:	4d04      	ldr	r5, [pc, #16]	; (80a0de8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0dd8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0dda:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0dde:	9500      	str	r5, [sp, #0]
 80a0de0:	f7ff ffea 	bl	80a0db8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0de4:	b003      	add	sp, #12
 80a0de6:	bd30      	pop	{r4, r5, pc}
 80a0de8:	080a1b44 	.word	0x080a1b44

080a0dec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0dec:	4a01      	ldr	r2, [pc, #4]	; (80a0df4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0dee:	4b02      	ldr	r3, [pc, #8]	; (80a0df8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0df0:	601a      	str	r2, [r3, #0]
 80a0df2:	4770      	bx	lr
 80a0df4:	080a1bc6 	.word	0x080a1bc6
 80a0df8:	200000b0 	.word	0x200000b0

080a0dfc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0dfc:	2300      	movs	r3, #0
 80a0dfe:	461a      	mov	r2, r3
 80a0e00:	6840      	ldr	r0, [r0, #4]
 80a0e02:	f7ff bbdb 	b.w	80a05bc <network_connect>

080a0e06 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0e06:	2200      	movs	r2, #0
 80a0e08:	2102      	movs	r1, #2
 80a0e0a:	6840      	ldr	r0, [r0, #4]
 80a0e0c:	f7ff bbe6 	b.w	80a05dc <network_disconnect>

080a0e10 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0e10:	2200      	movs	r2, #0
 80a0e12:	4611      	mov	r1, r2
 80a0e14:	6840      	ldr	r0, [r0, #4]
 80a0e16:	f7ff bbd9 	b.w	80a05cc <network_connecting>

080a0e1a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0e1a:	2200      	movs	r2, #0
 80a0e1c:	4611      	mov	r1, r2
 80a0e1e:	6840      	ldr	r0, [r0, #4]
 80a0e20:	f7ff bbe4 	b.w	80a05ec <network_ready>

080a0e24 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0e24:	2300      	movs	r3, #0
 80a0e26:	461a      	mov	r2, r3
 80a0e28:	4619      	mov	r1, r3
 80a0e2a:	6840      	ldr	r0, [r0, #4]
 80a0e2c:	f7ff bbe6 	b.w	80a05fc <network_on>

080a0e30 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0e30:	2300      	movs	r3, #0
 80a0e32:	461a      	mov	r2, r3
 80a0e34:	4619      	mov	r1, r3
 80a0e36:	6840      	ldr	r0, [r0, #4]
 80a0e38:	f7ff bbe8 	b.w	80a060c <network_off>

080a0e3c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0e3c:	2200      	movs	r2, #0
 80a0e3e:	f081 0101 	eor.w	r1, r1, #1
 80a0e42:	6840      	ldr	r0, [r0, #4]
 80a0e44:	f7ff bbea 	b.w	80a061c <network_listen>

080a0e48 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0e48:	2200      	movs	r2, #0
 80a0e4a:	6840      	ldr	r0, [r0, #4]
 80a0e4c:	f7ff bbf6 	b.w	80a063c <network_set_listen_timeout>

080a0e50 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0e50:	2200      	movs	r2, #0
 80a0e52:	4611      	mov	r1, r2
 80a0e54:	6840      	ldr	r0, [r0, #4]
 80a0e56:	f7ff bbf9 	b.w	80a064c <network_get_listen_timeout>

080a0e5a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0e5a:	2200      	movs	r2, #0
 80a0e5c:	4611      	mov	r1, r2
 80a0e5e:	6840      	ldr	r0, [r0, #4]
 80a0e60:	f7ff bbe4 	b.w	80a062c <network_listening>

080a0e64 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0e64:	b570      	push	{r4, r5, r6, lr}
 80a0e66:	4616      	mov	r6, r2
 80a0e68:	b08e      	sub	sp, #56	; 0x38
 80a0e6a:	4604      	mov	r4, r0
    IPAddress addr;
 80a0e6c:	a808      	add	r0, sp, #32
 80a0e6e:	f7ff ff7b 	bl	80a0d68 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0e72:	2211      	movs	r2, #17
 80a0e74:	2100      	movs	r1, #0
 80a0e76:	a803      	add	r0, sp, #12
 80a0e78:	f000 fdb5 	bl	80a19e6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0e7c:	4630      	mov	r0, r6
 80a0e7e:	f000 fe08 	bl	80a1a92 <strlen>
 80a0e82:	2500      	movs	r5, #0
 80a0e84:	4b0a      	ldr	r3, [pc, #40]	; (80a0eb0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0e86:	9500      	str	r5, [sp, #0]
 80a0e88:	b281      	uxth	r1, r0
 80a0e8a:	685b      	ldr	r3, [r3, #4]
 80a0e8c:	aa03      	add	r2, sp, #12
 80a0e8e:	4630      	mov	r0, r6
 80a0e90:	f7ff fb40 	bl	80a0514 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0e94:	b120      	cbz	r0, 80a0ea0 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0e96:	4629      	mov	r1, r5
 80a0e98:	4620      	mov	r0, r4
 80a0e9a:	f7ff ff85 	bl	80a0da8 <_ZN9IPAddressC1Em>
 80a0e9e:	e003      	b.n	80a0ea8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0ea0:	a903      	add	r1, sp, #12
 80a0ea2:	4620      	mov	r0, r4
 80a0ea4:	f7ff ff6e 	bl	80a0d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0ea8:	4620      	mov	r0, r4
 80a0eaa:	b00e      	add	sp, #56	; 0x38
 80a0eac:	bd70      	pop	{r4, r5, r6, pc}
 80a0eae:	bf00      	nop
 80a0eb0:	20000534 	.word	0x20000534

080a0eb4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0eb4:	4b02      	ldr	r3, [pc, #8]	; (80a0ec0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0eb6:	4a03      	ldr	r2, [pc, #12]	; (80a0ec4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0eb8:	601a      	str	r2, [r3, #0]
 80a0eba:	2200      	movs	r2, #0
 80a0ebc:	605a      	str	r2, [r3, #4]
 80a0ebe:	4770      	bx	lr
 80a0ec0:	200000b4 	.word	0x200000b4
 80a0ec4:	080a1c3c 	.word	0x080a1c3c

080a0ec8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0eca:	4606      	mov	r6, r0
 80a0ecc:	460d      	mov	r5, r1
 80a0ece:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0ed0:	2400      	movs	r4, #0
  while (size--) {
 80a0ed2:	42bd      	cmp	r5, r7
 80a0ed4:	d00c      	beq.n	80a0ef0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0ed6:	6833      	ldr	r3, [r6, #0]
 80a0ed8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0edc:	689b      	ldr	r3, [r3, #8]
 80a0ede:	4630      	mov	r0, r6
 80a0ee0:	4798      	blx	r3
     if (chunk>=0)
 80a0ee2:	2800      	cmp	r0, #0
 80a0ee4:	db01      	blt.n	80a0eea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0ee6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0ee8:	e7f3      	b.n	80a0ed2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0eea:	2c00      	cmp	r4, #0
 80a0eec:	bf08      	it	eq
 80a0eee:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0ef0:	4620      	mov	r0, r4
 80a0ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0ef4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0ef4:	b570      	push	{r4, r5, r6, lr}
 80a0ef6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0ef8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0efa:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0efc:	b149      	cbz	r1, 80a0f12 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0efe:	f000 fdc8 	bl	80a1a92 <strlen>
 80a0f02:	682b      	ldr	r3, [r5, #0]
 80a0f04:	4602      	mov	r2, r0
 80a0f06:	4621      	mov	r1, r4
 80a0f08:	4628      	mov	r0, r5
    }
 80a0f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0f0e:	68db      	ldr	r3, [r3, #12]
 80a0f10:	4718      	bx	r3
    }
 80a0f12:	bd70      	pop	{r4, r5, r6, pc}

080a0f14 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0f14:	6803      	ldr	r3, [r0, #0]
 80a0f16:	689b      	ldr	r3, [r3, #8]
 80a0f18:	4718      	bx	r3

080a0f1a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0f1a:	2a01      	cmp	r2, #1
 80a0f1c:	bf98      	it	ls
 80a0f1e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0f20:	b530      	push	{r4, r5, lr}
 80a0f22:	460b      	mov	r3, r1
 80a0f24:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0f26:	2100      	movs	r1, #0
 80a0f28:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0f2c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0f30:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0f34:	fb05 3312 	mls	r3, r5, r2, r3
 80a0f38:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0f3a:	2b09      	cmp	r3, #9
 80a0f3c:	bf94      	ite	ls
 80a0f3e:	3330      	addls	r3, #48	; 0x30
 80a0f40:	3337      	addhi	r3, #55	; 0x37
 80a0f42:	b2db      	uxtb	r3, r3
 80a0f44:	4621      	mov	r1, r4
 80a0f46:	f804 3901 	strb.w	r3, [r4], #-1
 80a0f4a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0f4c:	2d00      	cmp	r5, #0
 80a0f4e:	d1ef      	bne.n	80a0f30 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0f50:	f7ff ffd0 	bl	80a0ef4 <_ZN5Print5writeEPKc>
}
 80a0f54:	b00b      	add	sp, #44	; 0x2c
 80a0f56:	bd30      	pop	{r4, r5, pc}

080a0f58 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0f58:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0f5a:	b922      	cbnz	r2, 80a0f66 <_ZN5Print5printEmi+0xe>
 80a0f5c:	6803      	ldr	r3, [r0, #0]
 80a0f5e:	b2c9      	uxtb	r1, r1
 80a0f60:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0f62:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0f64:	4718      	bx	r3
  else return printNumber(n, base);
 80a0f66:	b2d2      	uxtb	r2, r2
}
 80a0f68:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0f6a:	f7ff bfd6 	b.w	80a0f1a <_ZN5Print11printNumberEmh>

080a0f6e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0f6e:	f7ff bff3 	b.w	80a0f58 <_ZN5Print5printEmi>

080a0f72 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0f72:	b510      	push	{r4, lr}
 80a0f74:	4604      	mov	r4, r0
 80a0f76:	f7ff fbbf 	bl	80a06f8 <_ZNSt14_Function_baseD1Ev>
 80a0f7a:	4620      	mov	r0, r4
 80a0f7c:	bd10      	pop	{r4, pc}
	...

080a0f80 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0f80:	4803      	ldr	r0, [pc, #12]	; (80a0f90 <_GLOBAL__sub_I_RGB+0x10>)
 80a0f82:	2300      	movs	r3, #0
 80a0f84:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0f86:	4a03      	ldr	r2, [pc, #12]	; (80a0f94 <_GLOBAL__sub_I_RGB+0x14>)
 80a0f88:	4903      	ldr	r1, [pc, #12]	; (80a0f98 <_GLOBAL__sub_I_RGB+0x18>)
 80a0f8a:	f000 bbc1 	b.w	80a1710 <__aeabi_atexit>
 80a0f8e:	bf00      	nop
 80a0f90:	200000bc 	.word	0x200000bc
 80a0f94:	2000007c 	.word	0x2000007c
 80a0f98:	080a0f73 	.word	0x080a0f73

080a0f9c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0f9c:	4770      	bx	lr

080a0f9e <_ZN8SPIClassD0Ev>:
 80a0f9e:	b510      	push	{r4, lr}
 80a0fa0:	4604      	mov	r4, r0
 80a0fa2:	2110      	movs	r1, #16
 80a0fa4:	f000 fbb9 	bl	80a171a <_ZdlPvj>
 80a0fa8:	4620      	mov	r0, r4
 80a0faa:	bd10      	pop	{r4, pc}

080a0fac <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0fac:	b570      	push	{r4, r5, r6, lr}
 80a0fae:	4604      	mov	r4, r0
 80a0fb0:	460e      	mov	r6, r1
 80a0fb2:	4b07      	ldr	r3, [pc, #28]	; (80a0fd0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0fb4:	2500      	movs	r5, #0
 80a0fb6:	6003      	str	r3, [r0, #0]
 80a0fb8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0fbc:	f7ff f9b0 	bl	80a0320 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0fc0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0fc2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0fc4:	f7ff fa26 	bl	80a0414 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0fc8:	60a5      	str	r5, [r4, #8]
}
 80a0fca:	4620      	mov	r0, r4
 80a0fcc:	bd70      	pop	{r4, r5, r6, pc}
 80a0fce:	bf00      	nop
 80a0fd0:	080a1c70 	.word	0x080a1c70

080a0fd4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0fd4:	7900      	ldrb	r0, [r0, #4]
 80a0fd6:	f7ff ba25 	b.w	80a0424 <HAL_SPI_Is_Enabled>

080a0fda <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0fda:	b510      	push	{r4, lr}
 80a0fdc:	4604      	mov	r4, r0
{
	free(buffer);
 80a0fde:	6800      	ldr	r0, [r0, #0]
 80a0fe0:	f7ff fb44 	bl	80a066c <free>
}
 80a0fe4:	4620      	mov	r0, r4
 80a0fe6:	bd10      	pop	{r4, pc}

080a0fe8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0fe8:	b510      	push	{r4, lr}
 80a0fea:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0fec:	6800      	ldr	r0, [r0, #0]
 80a0fee:	b108      	cbz	r0, 80a0ff4 <_ZN6String10invalidateEv+0xc>
 80a0ff0:	f7ff fb3c 	bl	80a066c <free>
	buffer = NULL;
 80a0ff4:	2300      	movs	r3, #0
 80a0ff6:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0ff8:	60a3      	str	r3, [r4, #8]
 80a0ffa:	6063      	str	r3, [r4, #4]
 80a0ffc:	bd10      	pop	{r4, pc}

080a0ffe <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0ffe:	b538      	push	{r3, r4, r5, lr}
 80a1000:	4604      	mov	r4, r0
 80a1002:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1004:	6800      	ldr	r0, [r0, #0]
 80a1006:	3101      	adds	r1, #1
 80a1008:	f7ff fb38 	bl	80a067c <realloc>
	if (newbuffer) {
 80a100c:	b110      	cbz	r0, 80a1014 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a100e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1012:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1014:	bd38      	pop	{r3, r4, r5, pc}

080a1016 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1016:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1018:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a101a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a101c:	b113      	cbz	r3, 80a1024 <_ZN6String7reserveEj+0xe>
 80a101e:	6843      	ldr	r3, [r0, #4]
 80a1020:	428b      	cmp	r3, r1
 80a1022:	d207      	bcs.n	80a1034 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1024:	4620      	mov	r0, r4
 80a1026:	f7ff ffea 	bl	80a0ffe <_ZN6String12changeBufferEj>
 80a102a:	b120      	cbz	r0, 80a1036 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a102c:	68a3      	ldr	r3, [r4, #8]
 80a102e:	b90b      	cbnz	r3, 80a1034 <_ZN6String7reserveEj+0x1e>
 80a1030:	6822      	ldr	r2, [r4, #0]
 80a1032:	7013      	strb	r3, [r2, #0]
 80a1034:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1036:	bd10      	pop	{r4, pc}

080a1038 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1038:	b570      	push	{r4, r5, r6, lr}
 80a103a:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a103c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a103e:	4604      	mov	r4, r0
 80a1040:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1042:	f7ff ffe8 	bl	80a1016 <_ZN6String7reserveEj>
 80a1046:	b918      	cbnz	r0, 80a1050 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1048:	4620      	mov	r0, r4
 80a104a:	f7ff ffcd 	bl	80a0fe8 <_ZN6String10invalidateEv>
		return *this;
 80a104e:	e009      	b.n	80a1064 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1050:	462a      	mov	r2, r5
 80a1052:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1054:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1056:	6820      	ldr	r0, [r4, #0]
 80a1058:	f000 fcba 	bl	80a19d0 <memcpy>
	buffer[len] = 0;
 80a105c:	6822      	ldr	r2, [r4, #0]
 80a105e:	68a3      	ldr	r3, [r4, #8]
 80a1060:	2100      	movs	r1, #0
 80a1062:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1064:	4620      	mov	r0, r4
 80a1066:	bd70      	pop	{r4, r5, r6, pc}

080a1068 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1068:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a106a:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a106c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a106e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1070:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1072:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1074:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1076:	460d      	mov	r5, r1
 80a1078:	b139      	cbz	r1, 80a108a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a107a:	4608      	mov	r0, r1
 80a107c:	f000 fd09 	bl	80a1a92 <strlen>
 80a1080:	4629      	mov	r1, r5
 80a1082:	4602      	mov	r2, r0
 80a1084:	4620      	mov	r0, r4
 80a1086:	f7ff ffd7 	bl	80a1038 <_ZN6String4copyEPKcj>
}
 80a108a:	4620      	mov	r0, r4
 80a108c:	bd38      	pop	{r3, r4, r5, pc}

080a108e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a108e:	b538      	push	{r3, r4, r5, lr}
 80a1090:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1092:	460c      	mov	r4, r1
 80a1094:	b141      	cbz	r1, 80a10a8 <_ZN6StringaSEPKc+0x1a>
 80a1096:	4608      	mov	r0, r1
 80a1098:	f000 fcfb 	bl	80a1a92 <strlen>
 80a109c:	4621      	mov	r1, r4
 80a109e:	4602      	mov	r2, r0
 80a10a0:	4628      	mov	r0, r5
 80a10a2:	f7ff ffc9 	bl	80a1038 <_ZN6String4copyEPKcj>
 80a10a6:	e001      	b.n	80a10ac <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a10a8:	f7ff ff9e 	bl	80a0fe8 <_ZN6String10invalidateEv>

	return *this;
}
 80a10ac:	4628      	mov	r0, r5
 80a10ae:	bd38      	pop	{r3, r4, r5, pc}

080a10b0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a10b0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a10b2:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a10b4:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a10b6:	b912      	cbnz	r2, 80a10be <_ZNK6String6equalsEPKc+0xe>
 80a10b8:	b919      	cbnz	r1, 80a10c2 <_ZNK6String6equalsEPKc+0x12>
 80a10ba:	2001      	movs	r0, #1
 80a10bc:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a10be:	b911      	cbnz	r1, 80a10c6 <_ZNK6String6equalsEPKc+0x16>
 80a10c0:	6803      	ldr	r3, [r0, #0]
 80a10c2:	7818      	ldrb	r0, [r3, #0]
 80a10c4:	e002      	b.n	80a10cc <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a10c6:	6800      	ldr	r0, [r0, #0]
 80a10c8:	f000 fcbe 	bl	80a1a48 <strcmp>
 80a10cc:	fab0 f080 	clz	r0, r0
 80a10d0:	0940      	lsrs	r0, r0, #5
}
 80a10d2:	bd08      	pop	{r3, pc}

080a10d4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a10d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a10d8:	4b03      	ldr	r3, [pc, #12]	; (80a10e8 <_GLOBAL__sub_I_System+0x14>)
 80a10da:	2000      	movs	r0, #0
 80a10dc:	7018      	strb	r0, [r3, #0]
 80a10de:	8058      	strh	r0, [r3, #2]
 80a10e0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a10e2:	f7ff ba1f 	b.w	80a0524 <set_system_mode>
 80a10e6:	bf00      	nop
 80a10e8:	200000cc 	.word	0x200000cc

080a10ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a10ec:	4b02      	ldr	r3, [pc, #8]	; (80a10f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a10ee:	681a      	ldr	r2, [r3, #0]
 80a10f0:	4b02      	ldr	r3, [pc, #8]	; (80a10fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a10f2:	601a      	str	r2, [r3, #0]
 80a10f4:	4770      	bx	lr
 80a10f6:	bf00      	nop
 80a10f8:	20000014 	.word	0x20000014
 80a10fc:	200000d4 	.word	0x200000d4

080a1100 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1100:	4770      	bx	lr

080a1102 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1102:	7441      	strb	r1, [r0, #17]
 80a1104:	4770      	bx	lr

080a1106 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1106:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1108:	7c00      	ldrb	r0, [r0, #16]
 80a110a:	f7ff f9cb 	bl	80a04a4 <HAL_USART_Available_Data_For_Write>
}
 80a110e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1112:	bd08      	pop	{r3, pc}

080a1114 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1114:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1116:	7c00      	ldrb	r0, [r0, #16]
 80a1118:	f7ff f99c 	bl	80a0454 <HAL_USART_Available_Data>
}
 80a111c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1120:	bd08      	pop	{r3, pc}

080a1122 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1122:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1124:	7c00      	ldrb	r0, [r0, #16]
 80a1126:	f7ff f9a5 	bl	80a0474 <HAL_USART_Peek_Data>
}
 80a112a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a112e:	bf28      	it	cs
 80a1130:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1134:	bd08      	pop	{r3, pc}

080a1136 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1136:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1138:	7c00      	ldrb	r0, [r0, #16]
 80a113a:	f7ff f993 	bl	80a0464 <HAL_USART_Read_Data>
}
 80a113e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1142:	bf28      	it	cs
 80a1144:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1148:	bd08      	pop	{r3, pc}

080a114a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a114a:	7c00      	ldrb	r0, [r0, #16]
 80a114c:	f7ff b99a 	b.w	80a0484 <HAL_USART_Flush_Data>

080a1150 <_ZN11USARTSerialD0Ev>:
 80a1150:	b510      	push	{r4, lr}
 80a1152:	4604      	mov	r4, r0
 80a1154:	2114      	movs	r1, #20
 80a1156:	f000 fae0 	bl	80a171a <_ZdlPvj>
 80a115a:	4620      	mov	r0, r4
 80a115c:	bd10      	pop	{r4, pc}

080a115e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a115e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1160:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1162:	4604      	mov	r4, r0
 80a1164:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1166:	b925      	cbnz	r5, 80a1172 <_ZN11USARTSerial5writeEh+0x14>
 80a1168:	7c00      	ldrb	r0, [r0, #16]
 80a116a:	f7ff f99b 	bl	80a04a4 <HAL_USART_Available_Data_For_Write>
 80a116e:	2800      	cmp	r0, #0
 80a1170:	dd05      	ble.n	80a117e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1172:	4631      	mov	r1, r6
 80a1174:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a117a:	f7ff b963 	b.w	80a0444 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a117e:	4628      	mov	r0, r5
 80a1180:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1184 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1184:	b510      	push	{r4, lr}
 80a1186:	4604      	mov	r4, r0
 80a1188:	4608      	mov	r0, r1
 80a118a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a118c:	2200      	movs	r2, #0
 80a118e:	6062      	str	r2, [r4, #4]
 80a1190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1194:	60a2      	str	r2, [r4, #8]
 80a1196:	4a05      	ldr	r2, [pc, #20]	; (80a11ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1198:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a119a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a119c:	2201      	movs	r2, #1
 80a119e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a11a0:	461a      	mov	r2, r3
 80a11a2:	f7ff f947 	bl	80a0434 <HAL_USART_Init>
}
 80a11a6:	4620      	mov	r0, r4
 80a11a8:	bd10      	pop	{r4, pc}
 80a11aa:	bf00      	nop
 80a11ac:	080a1cac 	.word	0x080a1cac

080a11b0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a11b0:	7c00      	ldrb	r0, [r0, #16]
 80a11b2:	f7ff b96f 	b.w	80a0494 <HAL_USART_Is_Enabled>
	...

080a11b8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a11b8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a11ba:	4d0c      	ldr	r5, [pc, #48]	; (80a11ec <_Z22__fetch_global_Serial1v+0x34>)
 80a11bc:	6829      	ldr	r1, [r5, #0]
 80a11be:	f011 0401 	ands.w	r4, r1, #1
 80a11c2:	d111      	bne.n	80a11e8 <_Z22__fetch_global_Serial1v+0x30>
 80a11c4:	4628      	mov	r0, r5
 80a11c6:	f7fe ff6c 	bl	80a00a2 <__cxa_guard_acquire>
 80a11ca:	b168      	cbz	r0, 80a11e8 <_Z22__fetch_global_Serial1v+0x30>
 80a11cc:	4a08      	ldr	r2, [pc, #32]	; (80a11f0 <_Z22__fetch_global_Serial1v+0x38>)
 80a11ce:	4621      	mov	r1, r4
 80a11d0:	4b08      	ldr	r3, [pc, #32]	; (80a11f4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a11d2:	4809      	ldr	r0, [pc, #36]	; (80a11f8 <_Z22__fetch_global_Serial1v+0x40>)
 80a11d4:	f7ff ffd6 	bl	80a1184 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a11d8:	4628      	mov	r0, r5
 80a11da:	f7fe ff67 	bl	80a00ac <__cxa_guard_release>
 80a11de:	4a07      	ldr	r2, [pc, #28]	; (80a11fc <_Z22__fetch_global_Serial1v+0x44>)
 80a11e0:	4907      	ldr	r1, [pc, #28]	; (80a1200 <_Z22__fetch_global_Serial1v+0x48>)
 80a11e2:	4805      	ldr	r0, [pc, #20]	; (80a11f8 <_Z22__fetch_global_Serial1v+0x40>)
 80a11e4:	f000 fa94 	bl	80a1710 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a11e8:	4803      	ldr	r0, [pc, #12]	; (80a11f8 <_Z22__fetch_global_Serial1v+0x40>)
 80a11ea:	bd38      	pop	{r3, r4, r5, pc}
 80a11ec:	20000170 	.word	0x20000170
 80a11f0:	20000174 	.word	0x20000174
 80a11f4:	200000ec 	.word	0x200000ec
 80a11f8:	200000d8 	.word	0x200000d8
 80a11fc:	2000007c 	.word	0x2000007c
 80a1200:	080a1101 	.word	0x080a1101

080a1204 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1204:	7441      	strb	r1, [r0, #17]
 80a1206:	4770      	bx	lr

080a1208 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1208:	4770      	bx	lr

080a120a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a120a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a120c:	2100      	movs	r1, #0
 80a120e:	7c00      	ldrb	r0, [r0, #16]
 80a1210:	f7ff f968 	bl	80a04e4 <HAL_USB_USART_Receive_Data>
}
 80a1214:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1218:	bf28      	it	cs
 80a121a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a121e:	bd08      	pop	{r3, pc}

080a1220 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1220:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1222:	2101      	movs	r1, #1
 80a1224:	7c00      	ldrb	r0, [r0, #16]
 80a1226:	f7ff f95d 	bl	80a04e4 <HAL_USB_USART_Receive_Data>
}
 80a122a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a122e:	bf28      	it	cs
 80a1230:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1234:	bd08      	pop	{r3, pc}

080a1236 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1236:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1238:	7c00      	ldrb	r0, [r0, #16]
 80a123a:	f7ff f94b 	bl	80a04d4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a123e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1242:	bd08      	pop	{r3, pc}

080a1244 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1244:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1246:	7c00      	ldrb	r0, [r0, #16]
 80a1248:	f7ff f93c 	bl	80a04c4 <HAL_USB_USART_Available_Data>
}
 80a124c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1250:	bd08      	pop	{r3, pc}

080a1252 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1252:	7c00      	ldrb	r0, [r0, #16]
 80a1254:	f7ff b956 	b.w	80a0504 <HAL_USB_USART_Flush_Data>

080a1258 <_ZN9USBSerialD0Ev>:
 80a1258:	b510      	push	{r4, lr}
 80a125a:	4604      	mov	r4, r0
 80a125c:	2114      	movs	r1, #20
 80a125e:	f000 fa5c 	bl	80a171a <_ZdlPvj>
 80a1262:	4620      	mov	r0, r4
 80a1264:	bd10      	pop	{r4, pc}

080a1266 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1266:	b538      	push	{r3, r4, r5, lr}
 80a1268:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a126a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a126c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a126e:	f7ff f931 	bl	80a04d4 <HAL_USB_USART_Available_Data_For_Write>
 80a1272:	2800      	cmp	r0, #0
 80a1274:	dc01      	bgt.n	80a127a <_ZN9USBSerial5writeEh+0x14>
 80a1276:	7c60      	ldrb	r0, [r4, #17]
 80a1278:	b128      	cbz	r0, 80a1286 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a127a:	4629      	mov	r1, r5
 80a127c:	7c20      	ldrb	r0, [r4, #16]
 80a127e:	f7ff f939 	bl	80a04f4 <HAL_USB_USART_Send_Data>
 80a1282:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1286:	bd38      	pop	{r3, r4, r5, pc}

080a1288 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1288:	b510      	push	{r4, lr}
 80a128a:	4604      	mov	r4, r0
 80a128c:	2300      	movs	r3, #0
 80a128e:	6063      	str	r3, [r4, #4]
 80a1290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1294:	60a3      	str	r3, [r4, #8]
 80a1296:	4b05      	ldr	r3, [pc, #20]	; (80a12ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1298:	4608      	mov	r0, r1
 80a129a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a129c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a129e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a12a0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a12a2:	4611      	mov	r1, r2
 80a12a4:	f7ff f906 	bl	80a04b4 <HAL_USB_USART_Init>
}
 80a12a8:	4620      	mov	r0, r4
 80a12aa:	bd10      	pop	{r4, pc}
 80a12ac:	080a1cdc 	.word	0x080a1cdc

080a12b0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a12b0:	b510      	push	{r4, lr}
 80a12b2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a12b4:	2214      	movs	r2, #20
 80a12b6:	2100      	movs	r1, #0
 80a12b8:	f000 fb95 	bl	80a19e6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a12bc:	4b05      	ldr	r3, [pc, #20]	; (80a12d4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a12be:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a12c0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a12c2:	4b05      	ldr	r3, [pc, #20]	; (80a12d8 <_Z19acquireSerialBufferv+0x28>)
 80a12c4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a12c6:	f240 1301 	movw	r3, #257	; 0x101
 80a12ca:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a12cc:	2381      	movs	r3, #129	; 0x81
 80a12ce:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a12d0:	bd10      	pop	{r4, pc}
 80a12d2:	bf00      	nop
 80a12d4:	2000027d 	.word	0x2000027d
 80a12d8:	200001fc 	.word	0x200001fc

080a12dc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a12dc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a12de:	4d0e      	ldr	r5, [pc, #56]	; (80a1318 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a12e0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a12e2:	a801      	add	r0, sp, #4
 80a12e4:	f7ff ffe4 	bl	80a12b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a12e8:	6829      	ldr	r1, [r5, #0]
 80a12ea:	f011 0401 	ands.w	r4, r1, #1
 80a12ee:	d110      	bne.n	80a1312 <_Z16_fetch_usbserialv+0x36>
 80a12f0:	4628      	mov	r0, r5
 80a12f2:	f7fe fed6 	bl	80a00a2 <__cxa_guard_acquire>
 80a12f6:	b160      	cbz	r0, 80a1312 <_Z16_fetch_usbserialv+0x36>
 80a12f8:	aa01      	add	r2, sp, #4
 80a12fa:	4621      	mov	r1, r4
 80a12fc:	4807      	ldr	r0, [pc, #28]	; (80a131c <_Z16_fetch_usbserialv+0x40>)
 80a12fe:	f7ff ffc3 	bl	80a1288 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1302:	4628      	mov	r0, r5
 80a1304:	f7fe fed2 	bl	80a00ac <__cxa_guard_release>
 80a1308:	4a05      	ldr	r2, [pc, #20]	; (80a1320 <_Z16_fetch_usbserialv+0x44>)
 80a130a:	4906      	ldr	r1, [pc, #24]	; (80a1324 <_Z16_fetch_usbserialv+0x48>)
 80a130c:	4803      	ldr	r0, [pc, #12]	; (80a131c <_Z16_fetch_usbserialv+0x40>)
 80a130e:	f000 f9ff 	bl	80a1710 <__aeabi_atexit>
	return _usbserial;
}
 80a1312:	4802      	ldr	r0, [pc, #8]	; (80a131c <_Z16_fetch_usbserialv+0x40>)
 80a1314:	b007      	add	sp, #28
 80a1316:	bd30      	pop	{r4, r5, pc}
 80a1318:	200001f8 	.word	0x200001f8
 80a131c:	20000380 	.word	0x20000380
 80a1320:	2000007c 	.word	0x2000007c
 80a1324:	080a1209 	.word	0x080a1209

080a1328 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1328:	b510      	push	{r4, lr}
 80a132a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a132c:	2214      	movs	r2, #20
 80a132e:	2100      	movs	r1, #0
 80a1330:	f000 fb59 	bl	80a19e6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1334:	4b05      	ldr	r3, [pc, #20]	; (80a134c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1336:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1338:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a133a:	4b05      	ldr	r3, [pc, #20]	; (80a1350 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a133c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a133e:	f240 1301 	movw	r3, #257	; 0x101
 80a1342:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1344:	2381      	movs	r3, #129	; 0x81
 80a1346:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1348:	bd10      	pop	{r4, pc}
 80a134a:	bf00      	nop
 80a134c:	20000430 	.word	0x20000430
 80a1350:	20000398 	.word	0x20000398

080a1354 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1354:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1356:	4c0e      	ldr	r4, [pc, #56]	; (80a1390 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1358:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a135a:	a801      	add	r0, sp, #4
 80a135c:	f7ff ffe4 	bl	80a1328 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1360:	6823      	ldr	r3, [r4, #0]
 80a1362:	07db      	lsls	r3, r3, #31
 80a1364:	d410      	bmi.n	80a1388 <_Z17_fetch_usbserial1v+0x34>
 80a1366:	4620      	mov	r0, r4
 80a1368:	f7fe fe9b 	bl	80a00a2 <__cxa_guard_acquire>
 80a136c:	b160      	cbz	r0, 80a1388 <_Z17_fetch_usbserial1v+0x34>
 80a136e:	aa01      	add	r2, sp, #4
 80a1370:	2101      	movs	r1, #1
 80a1372:	4808      	ldr	r0, [pc, #32]	; (80a1394 <_Z17_fetch_usbserial1v+0x40>)
 80a1374:	f7ff ff88 	bl	80a1288 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1378:	4620      	mov	r0, r4
 80a137a:	f7fe fe97 	bl	80a00ac <__cxa_guard_release>
 80a137e:	4a06      	ldr	r2, [pc, #24]	; (80a1398 <_Z17_fetch_usbserial1v+0x44>)
 80a1380:	4906      	ldr	r1, [pc, #24]	; (80a139c <_Z17_fetch_usbserial1v+0x48>)
 80a1382:	4804      	ldr	r0, [pc, #16]	; (80a1394 <_Z17_fetch_usbserial1v+0x40>)
 80a1384:	f000 f9c4 	bl	80a1710 <__aeabi_atexit>
  return _usbserial1;
}
 80a1388:	4802      	ldr	r0, [pc, #8]	; (80a1394 <_Z17_fetch_usbserial1v+0x40>)
 80a138a:	b006      	add	sp, #24
 80a138c:	bd10      	pop	{r4, pc}
 80a138e:	bf00      	nop
 80a1390:	20000394 	.word	0x20000394
 80a1394:	2000041c 	.word	0x2000041c
 80a1398:	2000007c 	.word	0x2000007c
 80a139c:	080a1209 	.word	0x080a1209

080a13a0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a13a0:	2200      	movs	r2, #0
 80a13a2:	4611      	mov	r1, r2
 80a13a4:	6840      	ldr	r0, [r0, #4]
 80a13a6:	f7ff b921 	b.w	80a05ec <network_ready>

080a13aa <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a13aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a13ac:	4616      	mov	r6, r2
 80a13ae:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a13b0:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a13b2:	460f      	mov	r7, r1
 80a13b4:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a13b6:	2100      	movs	r1, #0
 80a13b8:	a803      	add	r0, sp, #12
 80a13ba:	f000 fb14 	bl	80a19e6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a13be:	4630      	mov	r0, r6
 80a13c0:	f000 fb67 	bl	80a1a92 <strlen>
 80a13c4:	2500      	movs	r5, #0
 80a13c6:	9500      	str	r5, [sp, #0]
 80a13c8:	b281      	uxth	r1, r0
 80a13ca:	687b      	ldr	r3, [r7, #4]
 80a13cc:	aa03      	add	r2, sp, #12
 80a13ce:	4630      	mov	r0, r6
 80a13d0:	f7ff f8a0 	bl	80a0514 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a13d4:	b120      	cbz	r0, 80a13e0 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a13d6:	4629      	mov	r1, r5
 80a13d8:	4620      	mov	r0, r4
 80a13da:	f7ff fce5 	bl	80a0da8 <_ZN9IPAddressC1Em>
 80a13de:	e003      	b.n	80a13e8 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a13e0:	a903      	add	r1, sp, #12
 80a13e2:	4620      	mov	r0, r4
 80a13e4:	f7ff fcce 	bl	80a0d84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a13e8:	4620      	mov	r0, r4
 80a13ea:	b009      	add	sp, #36	; 0x24
 80a13ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a13ee <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a13ee:	2200      	movs	r2, #0
 80a13f0:	4611      	mov	r1, r2
 80a13f2:	6840      	ldr	r0, [r0, #4]
 80a13f4:	f7ff b91a 	b.w	80a062c <network_listening>

080a13f8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a13f8:	2200      	movs	r2, #0
 80a13fa:	4611      	mov	r1, r2
 80a13fc:	6840      	ldr	r0, [r0, #4]
 80a13fe:	f7ff b925 	b.w	80a064c <network_get_listen_timeout>

080a1402 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1402:	2200      	movs	r2, #0
 80a1404:	6840      	ldr	r0, [r0, #4]
 80a1406:	f7ff b919 	b.w	80a063c <network_set_listen_timeout>

080a140a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a140a:	2200      	movs	r2, #0
 80a140c:	f081 0101 	eor.w	r1, r1, #1
 80a1410:	6840      	ldr	r0, [r0, #4]
 80a1412:	f7ff b903 	b.w	80a061c <network_listen>

080a1416 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1416:	2300      	movs	r3, #0
 80a1418:	461a      	mov	r2, r3
 80a141a:	4619      	mov	r1, r3
 80a141c:	6840      	ldr	r0, [r0, #4]
 80a141e:	f7ff b8f5 	b.w	80a060c <network_off>

080a1422 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1422:	2300      	movs	r3, #0
 80a1424:	461a      	mov	r2, r3
 80a1426:	4619      	mov	r1, r3
 80a1428:	6840      	ldr	r0, [r0, #4]
 80a142a:	f7ff b8e7 	b.w	80a05fc <network_on>

080a142e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a142e:	2200      	movs	r2, #0
 80a1430:	4611      	mov	r1, r2
 80a1432:	6840      	ldr	r0, [r0, #4]
 80a1434:	f7ff b8ca 	b.w	80a05cc <network_connecting>

080a1438 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1438:	2200      	movs	r2, #0
 80a143a:	2102      	movs	r1, #2
 80a143c:	6840      	ldr	r0, [r0, #4]
 80a143e:	f7ff b8cd 	b.w	80a05dc <network_disconnect>

080a1442 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1442:	2300      	movs	r3, #0
 80a1444:	461a      	mov	r2, r3
 80a1446:	6840      	ldr	r0, [r0, #4]
 80a1448:	f7ff b8b8 	b.w	80a05bc <network_connect>

080a144c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a144c:	4b02      	ldr	r3, [pc, #8]	; (80a1458 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a144e:	2204      	movs	r2, #4
 80a1450:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1452:	4a02      	ldr	r2, [pc, #8]	; (80a145c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1454:	601a      	str	r2, [r3, #0]
 80a1456:	4770      	bx	lr
 80a1458:	20000534 	.word	0x20000534
 80a145c:	080a1d0c 	.word	0x080a1d0c

080a1460 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1460:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1462:	4b14      	ldr	r3, [pc, #80]	; (80a14b4 <serialEventRun+0x54>)
 80a1464:	b133      	cbz	r3, 80a1474 <serialEventRun+0x14>
 80a1466:	f7ff ff39 	bl	80a12dc <_Z16_fetch_usbserialv>
 80a146a:	6803      	ldr	r3, [r0, #0]
 80a146c:	691b      	ldr	r3, [r3, #16]
 80a146e:	4798      	blx	r3
 80a1470:	2800      	cmp	r0, #0
 80a1472:	dc16      	bgt.n	80a14a2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1474:	4b10      	ldr	r3, [pc, #64]	; (80a14b8 <serialEventRun+0x58>)
 80a1476:	b133      	cbz	r3, 80a1486 <serialEventRun+0x26>
 80a1478:	f7ff fe9e 	bl	80a11b8 <_Z22__fetch_global_Serial1v>
 80a147c:	6803      	ldr	r3, [r0, #0]
 80a147e:	691b      	ldr	r3, [r3, #16]
 80a1480:	4798      	blx	r3
 80a1482:	2800      	cmp	r0, #0
 80a1484:	dc10      	bgt.n	80a14a8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1486:	4b0d      	ldr	r3, [pc, #52]	; (80a14bc <serialEventRun+0x5c>)
 80a1488:	b10b      	cbz	r3, 80a148e <serialEventRun+0x2e>
 80a148a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a148e:	4b0c      	ldr	r3, [pc, #48]	; (80a14c0 <serialEventRun+0x60>)
 80a1490:	b17b      	cbz	r3, 80a14b2 <serialEventRun+0x52>
 80a1492:	f7ff ff5f 	bl	80a1354 <_Z17_fetch_usbserial1v>
 80a1496:	6803      	ldr	r3, [r0, #0]
 80a1498:	691b      	ldr	r3, [r3, #16]
 80a149a:	4798      	blx	r3
 80a149c:	2800      	cmp	r0, #0
 80a149e:	dc06      	bgt.n	80a14ae <serialEventRun+0x4e>
 80a14a0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a14a2:	f3af 8000 	nop.w
 80a14a6:	e7e5      	b.n	80a1474 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a14a8:	f3af 8000 	nop.w
 80a14ac:	e7eb      	b.n	80a1486 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a14ae:	f3af 8000 	nop.w
 80a14b2:	bd08      	pop	{r3, pc}
	...

080a14c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a14c4:	b508      	push	{r3, lr}
	serialEventRun();
 80a14c6:	f7ff ffcb 	bl	80a1460 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a14ca:	f7fe ff39 	bl	80a0340 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a14ce:	4b01      	ldr	r3, [pc, #4]	; (80a14d4 <_post_loop+0x10>)
 80a14d0:	6018      	str	r0, [r3, #0]
 80a14d2:	bd08      	pop	{r3, pc}
 80a14d4:	20000544 	.word	0x20000544

080a14d8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a14d8:	4802      	ldr	r0, [pc, #8]	; (80a14e4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a14da:	4a03      	ldr	r2, [pc, #12]	; (80a14e8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a14dc:	4903      	ldr	r1, [pc, #12]	; (80a14ec <_Z33system_initialize_user_backup_ramv+0x14>)
 80a14de:	1a12      	subs	r2, r2, r0
 80a14e0:	f000 ba76 	b.w	80a19d0 <memcpy>
 80a14e4:	40024000 	.word	0x40024000
 80a14e8:	40024004 	.word	0x40024004
 80a14ec:	080a1dd0 	.word	0x080a1dd0

080a14f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a14f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a14f2:	2300      	movs	r3, #0
 80a14f4:	9300      	str	r3, [sp, #0]
 80a14f6:	461a      	mov	r2, r3
 80a14f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a14fc:	f7ff f83c 	bl	80a0578 <system_ctrl_set_result>
}
 80a1500:	b003      	add	sp, #12
 80a1502:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1508 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1508:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a150a:	8843      	ldrh	r3, [r0, #2]
 80a150c:	2b0a      	cmp	r3, #10
 80a150e:	d008      	beq.n	80a1522 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1510:	2b50      	cmp	r3, #80	; 0x50
 80a1512:	d109      	bne.n	80a1528 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1514:	4b09      	ldr	r3, [pc, #36]	; (80a153c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1516:	681b      	ldr	r3, [r3, #0]
 80a1518:	b13b      	cbz	r3, 80a152a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a151a:	b003      	add	sp, #12
 80a151c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1520:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1522:	f7ff ffe5 	bl	80a14f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1526:	e006      	b.n	80a1536 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1528:	2300      	movs	r3, #0
 80a152a:	9300      	str	r3, [sp, #0]
 80a152c:	461a      	mov	r2, r3
 80a152e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1532:	f7ff f821 	bl	80a0578 <system_ctrl_set_result>
        break;
    }
}
 80a1536:	b003      	add	sp, #12
 80a1538:	f85d fb04 	ldr.w	pc, [sp], #4
 80a153c:	2000053c 	.word	0x2000053c

080a1540 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1540:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1542:	4c10      	ldr	r4, [pc, #64]	; (80a1584 <module_user_init_hook+0x44>)
 80a1544:	4d10      	ldr	r5, [pc, #64]	; (80a1588 <module_user_init_hook+0x48>)
 80a1546:	6823      	ldr	r3, [r4, #0]
 80a1548:	42ab      	cmp	r3, r5
 80a154a:	4b10      	ldr	r3, [pc, #64]	; (80a158c <module_user_init_hook+0x4c>)
 80a154c:	bf0c      	ite	eq
 80a154e:	2201      	moveq	r2, #1
 80a1550:	2200      	movne	r2, #0
 80a1552:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1554:	d002      	beq.n	80a155c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1556:	f7ff ffbf 	bl	80a14d8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a155a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a155c:	f7fe fee8 	bl	80a0330 <HAL_RNG_GetRandomNumber>
 80a1560:	4604      	mov	r4, r0
    srand(seed);
 80a1562:	f000 fa49 	bl	80a19f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1566:	4b0a      	ldr	r3, [pc, #40]	; (80a1590 <module_user_init_hook+0x50>)
 80a1568:	b113      	cbz	r3, 80a1570 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a156a:	4620      	mov	r0, r4
 80a156c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1570:	2100      	movs	r1, #0
 80a1572:	4807      	ldr	r0, [pc, #28]	; (80a1590 <module_user_init_hook+0x50>)
 80a1574:	f7ff f81a 	bl	80a05ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a157c:	2100      	movs	r1, #0
 80a157e:	4805      	ldr	r0, [pc, #20]	; (80a1594 <module_user_init_hook+0x54>)
 80a1580:	f7fe bff0 	b.w	80a0564 <system_ctrl_set_app_request_handler>
 80a1584:	40024000 	.word	0x40024000
 80a1588:	9a271c1e 	.word	0x9a271c1e
 80a158c:	20000540 	.word	0x20000540
 80a1590:	00000000 	.word	0x00000000
 80a1594:	080a1509 	.word	0x080a1509

080a1598 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1598:	b510      	push	{r4, lr}
 80a159a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a159c:	480f      	ldr	r0, [pc, #60]	; (80a15dc <pinAvailable+0x44>)
 80a159e:	f7ff fd19 	bl	80a0fd4 <_ZN8SPIClass9isEnabledEv>
 80a15a2:	b128      	cbz	r0, 80a15b0 <pinAvailable+0x18>
 80a15a4:	f1a4 030d 	sub.w	r3, r4, #13
 80a15a8:	2b02      	cmp	r3, #2
 80a15aa:	d801      	bhi.n	80a15b0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a15ac:	2000      	movs	r0, #0
 80a15ae:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a15b0:	f000 f854 	bl	80a165c <_Z19__fetch_global_Wirev>
 80a15b4:	f7ff fbb2 	bl	80a0d1c <_ZN7TwoWire9isEnabledEv>
 80a15b8:	b108      	cbz	r0, 80a15be <pinAvailable+0x26>
 80a15ba:	2c01      	cmp	r4, #1
 80a15bc:	d9f6      	bls.n	80a15ac <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a15be:	f7ff fdfb 	bl	80a11b8 <_Z22__fetch_global_Serial1v>
 80a15c2:	f7ff fdf5 	bl	80a11b0 <_ZN11USARTSerial9isEnabledEv>
 80a15c6:	b118      	cbz	r0, 80a15d0 <pinAvailable+0x38>
 80a15c8:	f1a4 0312 	sub.w	r3, r4, #18
 80a15cc:	2b01      	cmp	r3, #1
 80a15ce:	d9ed      	bls.n	80a15ac <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a15d0:	2c17      	cmp	r4, #23
 80a15d2:	bf8c      	ite	hi
 80a15d4:	2000      	movhi	r0, #0
 80a15d6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a15d8:	bd10      	pop	{r4, pc}
 80a15da:	bf00      	nop
 80a15dc:	20000578 	.word	0x20000578

080a15e0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a15e0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a15e2:	b538      	push	{r3, r4, r5, lr}
 80a15e4:	4604      	mov	r4, r0
 80a15e6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a15e8:	d80a      	bhi.n	80a1600 <pinMode+0x20>
 80a15ea:	29ff      	cmp	r1, #255	; 0xff
 80a15ec:	d008      	beq.n	80a1600 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a15ee:	f7ff ffd3 	bl	80a1598 <pinAvailable>
 80a15f2:	b128      	cbz	r0, 80a1600 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a15f4:	4629      	mov	r1, r5
 80a15f6:	4620      	mov	r0, r4
}
 80a15f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a15fc:	f7fe beb0 	b.w	80a0360 <HAL_Pin_Mode>
 80a1600:	bd38      	pop	{r3, r4, r5, pc}

080a1602 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1602:	b538      	push	{r3, r4, r5, lr}
 80a1604:	4604      	mov	r4, r0
 80a1606:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1608:	f7fe feb2 	bl	80a0370 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a160c:	28ff      	cmp	r0, #255	; 0xff
 80a160e:	d010      	beq.n	80a1632 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1610:	2806      	cmp	r0, #6
 80a1612:	d804      	bhi.n	80a161e <digitalWrite+0x1c>
 80a1614:	234d      	movs	r3, #77	; 0x4d
 80a1616:	fa23 f000 	lsr.w	r0, r3, r0
 80a161a:	07c3      	lsls	r3, r0, #31
 80a161c:	d409      	bmi.n	80a1632 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a161e:	4620      	mov	r0, r4
 80a1620:	f7ff ffba 	bl	80a1598 <pinAvailable>
 80a1624:	b128      	cbz	r0, 80a1632 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1626:	4629      	mov	r1, r5
 80a1628:	4620      	mov	r0, r4
}
 80a162a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a162e:	f7fe bea7 	b.w	80a0380 <HAL_GPIO_Write>
 80a1632:	bd38      	pop	{r3, r4, r5, pc}

080a1634 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1634:	b510      	push	{r4, lr}
 80a1636:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1638:	f7fe fe9a 	bl	80a0370 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a163c:	3804      	subs	r0, #4
 80a163e:	b2c0      	uxtb	r0, r0
 80a1640:	2801      	cmp	r0, #1
 80a1642:	d908      	bls.n	80a1656 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1644:	4620      	mov	r0, r4
 80a1646:	f7ff ffa7 	bl	80a1598 <pinAvailable>
 80a164a:	b120      	cbz	r0, 80a1656 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a164c:	4620      	mov	r0, r4
}
 80a164e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1652:	f7fe be9d 	b.w	80a0390 <HAL_GPIO_Read>
}
 80a1656:	2000      	movs	r0, #0
 80a1658:	bd10      	pop	{r4, pc}
	...

080a165c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a165c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a165e:	4d0b      	ldr	r5, [pc, #44]	; (80a168c <_Z19__fetch_global_Wirev+0x30>)
 80a1660:	6829      	ldr	r1, [r5, #0]
 80a1662:	f011 0401 	ands.w	r4, r1, #1
 80a1666:	d10f      	bne.n	80a1688 <_Z19__fetch_global_Wirev+0x2c>
 80a1668:	4628      	mov	r0, r5
 80a166a:	f7fe fd1a 	bl	80a00a2 <__cxa_guard_acquire>
 80a166e:	b158      	cbz	r0, 80a1688 <_Z19__fetch_global_Wirev+0x2c>
 80a1670:	4621      	mov	r1, r4
 80a1672:	4807      	ldr	r0, [pc, #28]	; (80a1690 <_Z19__fetch_global_Wirev+0x34>)
 80a1674:	f7ff fb40 	bl	80a0cf8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1678:	4628      	mov	r0, r5
 80a167a:	f7fe fd17 	bl	80a00ac <__cxa_guard_release>
 80a167e:	4a05      	ldr	r2, [pc, #20]	; (80a1694 <_Z19__fetch_global_Wirev+0x38>)
 80a1680:	4905      	ldr	r1, [pc, #20]	; (80a1698 <_Z19__fetch_global_Wirev+0x3c>)
 80a1682:	4803      	ldr	r0, [pc, #12]	; (80a1690 <_Z19__fetch_global_Wirev+0x34>)
 80a1684:	f000 f844 	bl	80a1710 <__aeabi_atexit>
	return wire;
}
 80a1688:	4801      	ldr	r0, [pc, #4]	; (80a1690 <_Z19__fetch_global_Wirev+0x34>)
 80a168a:	bd38      	pop	{r3, r4, r5, pc}
 80a168c:	20000548 	.word	0x20000548
 80a1690:	2000054c 	.word	0x2000054c
 80a1694:	2000007c 	.word	0x2000007c
 80a1698:	080a0ca1 	.word	0x080a0ca1

080a169c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a169c:	b513      	push	{r0, r1, r4, lr}
 80a169e:	4c08      	ldr	r4, [pc, #32]	; (80a16c0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a16a0:	2300      	movs	r3, #0
 80a16a2:	461a      	mov	r2, r3
 80a16a4:	4619      	mov	r1, r3
 80a16a6:	9300      	str	r3, [sp, #0]
 80a16a8:	4620      	mov	r0, r4
 80a16aa:	f7ff fb93 	bl	80a0dd4 <_ZN9IPAddressC1Ehhhh>
 80a16ae:	4620      	mov	r0, r4
 80a16b0:	4a04      	ldr	r2, [pc, #16]	; (80a16c4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a16b2:	4905      	ldr	r1, [pc, #20]	; (80a16c8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a16b4:	b002      	add	sp, #8
 80a16b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a16ba:	f000 b829 	b.w	80a1710 <__aeabi_atexit>
 80a16be:	bf00      	nop
 80a16c0:	20000560 	.word	0x20000560
 80a16c4:	2000007c 	.word	0x2000007c
 80a16c8:	080a0d25 	.word	0x080a0d25

080a16cc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a16cc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a16ce:	4c0c      	ldr	r4, [pc, #48]	; (80a1700 <_GLOBAL__sub_I_SPI+0x34>)
 80a16d0:	4e0c      	ldr	r6, [pc, #48]	; (80a1704 <_GLOBAL__sub_I_SPI+0x38>)
 80a16d2:	4d0d      	ldr	r5, [pc, #52]	; (80a1708 <_GLOBAL__sub_I_SPI+0x3c>)
 80a16d4:	2100      	movs	r1, #0
 80a16d6:	4620      	mov	r0, r4
 80a16d8:	f7ff fc68 	bl	80a0fac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a16dc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a16de:	4c0b      	ldr	r4, [pc, #44]	; (80a170c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a16e0:	4632      	mov	r2, r6
 80a16e2:	4629      	mov	r1, r5
 80a16e4:	f000 f814 	bl	80a1710 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a16e8:	2101      	movs	r1, #1
 80a16ea:	4620      	mov	r0, r4
 80a16ec:	f7ff fc5e 	bl	80a0fac <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a16f0:	4632      	mov	r2, r6
 80a16f2:	4629      	mov	r1, r5
 80a16f4:	4620      	mov	r0, r4
 80a16f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a16fa:	f000 b809 	b.w	80a1710 <__aeabi_atexit>
 80a16fe:	bf00      	nop
 80a1700:	20000578 	.word	0x20000578
 80a1704:	2000007c 	.word	0x2000007c
 80a1708:	080a0f9d 	.word	0x080a0f9d
 80a170c:	20000588 	.word	0x20000588

080a1710 <__aeabi_atexit>:
 80a1710:	460b      	mov	r3, r1
 80a1712:	4601      	mov	r1, r0
 80a1714:	4618      	mov	r0, r3
 80a1716:	f000 b94d 	b.w	80a19b4 <__cxa_atexit>

080a171a <_ZdlPvj>:
 80a171a:	f7fe bcc0 	b.w	80a009e <_ZdlPv>

080a171e <_ZSt25__throw_bad_function_callv>:
 80a171e:	b508      	push	{r3, lr}
 80a1720:	f7fe ffb4 	bl	80a068c <abort>

080a1724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1724:	4b24      	ldr	r3, [pc, #144]	; (80a17b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1726:	681a      	ldr	r2, [r3, #0]
 80a1728:	07d0      	lsls	r0, r2, #31
 80a172a:	bf5c      	itt	pl
 80a172c:	2201      	movpl	r2, #1
 80a172e:	601a      	strpl	r2, [r3, #0]
 80a1730:	4b22      	ldr	r3, [pc, #136]	; (80a17bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1732:	681a      	ldr	r2, [r3, #0]
 80a1734:	07d1      	lsls	r1, r2, #31
 80a1736:	bf5c      	itt	pl
 80a1738:	2201      	movpl	r2, #1
 80a173a:	601a      	strpl	r2, [r3, #0]
 80a173c:	4b20      	ldr	r3, [pc, #128]	; (80a17c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a173e:	681a      	ldr	r2, [r3, #0]
 80a1740:	07d2      	lsls	r2, r2, #31
 80a1742:	bf5c      	itt	pl
 80a1744:	2201      	movpl	r2, #1
 80a1746:	601a      	strpl	r2, [r3, #0]
 80a1748:	4b1e      	ldr	r3, [pc, #120]	; (80a17c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a174a:	681a      	ldr	r2, [r3, #0]
 80a174c:	07d0      	lsls	r0, r2, #31
 80a174e:	bf5c      	itt	pl
 80a1750:	2201      	movpl	r2, #1
 80a1752:	601a      	strpl	r2, [r3, #0]
 80a1754:	4b1c      	ldr	r3, [pc, #112]	; (80a17c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1756:	681a      	ldr	r2, [r3, #0]
 80a1758:	07d1      	lsls	r1, r2, #31
 80a175a:	bf5c      	itt	pl
 80a175c:	2201      	movpl	r2, #1
 80a175e:	601a      	strpl	r2, [r3, #0]
 80a1760:	4b1a      	ldr	r3, [pc, #104]	; (80a17cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1762:	681a      	ldr	r2, [r3, #0]
 80a1764:	07d2      	lsls	r2, r2, #31
 80a1766:	bf5c      	itt	pl
 80a1768:	2201      	movpl	r2, #1
 80a176a:	601a      	strpl	r2, [r3, #0]
 80a176c:	4b18      	ldr	r3, [pc, #96]	; (80a17d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a176e:	681a      	ldr	r2, [r3, #0]
 80a1770:	07d0      	lsls	r0, r2, #31
 80a1772:	bf5c      	itt	pl
 80a1774:	2201      	movpl	r2, #1
 80a1776:	601a      	strpl	r2, [r3, #0]
 80a1778:	4b16      	ldr	r3, [pc, #88]	; (80a17d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a177a:	681a      	ldr	r2, [r3, #0]
 80a177c:	07d1      	lsls	r1, r2, #31
 80a177e:	bf5c      	itt	pl
 80a1780:	2201      	movpl	r2, #1
 80a1782:	601a      	strpl	r2, [r3, #0]
 80a1784:	4b14      	ldr	r3, [pc, #80]	; (80a17d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1786:	681a      	ldr	r2, [r3, #0]
 80a1788:	07d2      	lsls	r2, r2, #31
 80a178a:	bf5c      	itt	pl
 80a178c:	2201      	movpl	r2, #1
 80a178e:	601a      	strpl	r2, [r3, #0]
 80a1790:	4b12      	ldr	r3, [pc, #72]	; (80a17dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1792:	681a      	ldr	r2, [r3, #0]
 80a1794:	07d0      	lsls	r0, r2, #31
 80a1796:	bf5c      	itt	pl
 80a1798:	2201      	movpl	r2, #1
 80a179a:	601a      	strpl	r2, [r3, #0]
 80a179c:	4b10      	ldr	r3, [pc, #64]	; (80a17e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a179e:	681a      	ldr	r2, [r3, #0]
 80a17a0:	07d1      	lsls	r1, r2, #31
 80a17a2:	bf5c      	itt	pl
 80a17a4:	2201      	movpl	r2, #1
 80a17a6:	601a      	strpl	r2, [r3, #0]
 80a17a8:	4b0e      	ldr	r3, [pc, #56]	; (80a17e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a17aa:	681a      	ldr	r2, [r3, #0]
 80a17ac:	07d2      	lsls	r2, r2, #31
 80a17ae:	bf5c      	itt	pl
 80a17b0:	2201      	movpl	r2, #1
 80a17b2:	601a      	strpl	r2, [r3, #0]
 80a17b4:	4770      	bx	lr
 80a17b6:	bf00      	nop
 80a17b8:	200005c4 	.word	0x200005c4
 80a17bc:	200005c0 	.word	0x200005c0
 80a17c0:	200005bc 	.word	0x200005bc
 80a17c4:	200005b8 	.word	0x200005b8
 80a17c8:	200005b4 	.word	0x200005b4
 80a17cc:	200005b0 	.word	0x200005b0
 80a17d0:	200005ac 	.word	0x200005ac
 80a17d4:	200005a8 	.word	0x200005a8
 80a17d8:	200005a4 	.word	0x200005a4
 80a17dc:	200005a0 	.word	0x200005a0
 80a17e0:	2000059c 	.word	0x2000059c
 80a17e4:	20000598 	.word	0x20000598

080a17e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a17e8:	4b18      	ldr	r3, [pc, #96]	; (80a184c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a17ea:	681a      	ldr	r2, [r3, #0]
 80a17ec:	07d1      	lsls	r1, r2, #31
 80a17ee:	bf5c      	itt	pl
 80a17f0:	2201      	movpl	r2, #1
 80a17f2:	601a      	strpl	r2, [r3, #0]
 80a17f4:	4b16      	ldr	r3, [pc, #88]	; (80a1850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a17f6:	681a      	ldr	r2, [r3, #0]
 80a17f8:	07d2      	lsls	r2, r2, #31
 80a17fa:	bf5c      	itt	pl
 80a17fc:	2201      	movpl	r2, #1
 80a17fe:	601a      	strpl	r2, [r3, #0]
 80a1800:	4b14      	ldr	r3, [pc, #80]	; (80a1854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1802:	681a      	ldr	r2, [r3, #0]
 80a1804:	07d0      	lsls	r0, r2, #31
 80a1806:	bf5c      	itt	pl
 80a1808:	2201      	movpl	r2, #1
 80a180a:	601a      	strpl	r2, [r3, #0]
 80a180c:	4b12      	ldr	r3, [pc, #72]	; (80a1858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a180e:	681a      	ldr	r2, [r3, #0]
 80a1810:	07d1      	lsls	r1, r2, #31
 80a1812:	bf5c      	itt	pl
 80a1814:	2201      	movpl	r2, #1
 80a1816:	601a      	strpl	r2, [r3, #0]
 80a1818:	4b10      	ldr	r3, [pc, #64]	; (80a185c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a181a:	681a      	ldr	r2, [r3, #0]
 80a181c:	07d2      	lsls	r2, r2, #31
 80a181e:	bf5c      	itt	pl
 80a1820:	2201      	movpl	r2, #1
 80a1822:	601a      	strpl	r2, [r3, #0]
 80a1824:	4b0e      	ldr	r3, [pc, #56]	; (80a1860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1826:	681a      	ldr	r2, [r3, #0]
 80a1828:	07d0      	lsls	r0, r2, #31
 80a182a:	bf5c      	itt	pl
 80a182c:	2201      	movpl	r2, #1
 80a182e:	601a      	strpl	r2, [r3, #0]
 80a1830:	4b0c      	ldr	r3, [pc, #48]	; (80a1864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1832:	681a      	ldr	r2, [r3, #0]
 80a1834:	07d1      	lsls	r1, r2, #31
 80a1836:	bf5c      	itt	pl
 80a1838:	2201      	movpl	r2, #1
 80a183a:	601a      	strpl	r2, [r3, #0]
 80a183c:	4b0a      	ldr	r3, [pc, #40]	; (80a1868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a183e:	681a      	ldr	r2, [r3, #0]
 80a1840:	07d2      	lsls	r2, r2, #31
 80a1842:	bf5c      	itt	pl
 80a1844:	2201      	movpl	r2, #1
 80a1846:	601a      	strpl	r2, [r3, #0]
 80a1848:	4770      	bx	lr
 80a184a:	bf00      	nop
 80a184c:	200005e4 	.word	0x200005e4
 80a1850:	200005e0 	.word	0x200005e0
 80a1854:	200005dc 	.word	0x200005dc
 80a1858:	200005d8 	.word	0x200005d8
 80a185c:	200005d4 	.word	0x200005d4
 80a1860:	200005d0 	.word	0x200005d0
 80a1864:	200005cc 	.word	0x200005cc
 80a1868:	200005c8 	.word	0x200005c8

080a186c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a186c:	4b18      	ldr	r3, [pc, #96]	; (80a18d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a186e:	681a      	ldr	r2, [r3, #0]
 80a1870:	07d1      	lsls	r1, r2, #31
 80a1872:	bf5c      	itt	pl
 80a1874:	2201      	movpl	r2, #1
 80a1876:	601a      	strpl	r2, [r3, #0]
 80a1878:	4b16      	ldr	r3, [pc, #88]	; (80a18d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a187a:	681a      	ldr	r2, [r3, #0]
 80a187c:	07d2      	lsls	r2, r2, #31
 80a187e:	bf5c      	itt	pl
 80a1880:	2201      	movpl	r2, #1
 80a1882:	601a      	strpl	r2, [r3, #0]
 80a1884:	4b14      	ldr	r3, [pc, #80]	; (80a18d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1886:	681a      	ldr	r2, [r3, #0]
 80a1888:	07d0      	lsls	r0, r2, #31
 80a188a:	bf5c      	itt	pl
 80a188c:	2201      	movpl	r2, #1
 80a188e:	601a      	strpl	r2, [r3, #0]
 80a1890:	4b12      	ldr	r3, [pc, #72]	; (80a18dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1892:	681a      	ldr	r2, [r3, #0]
 80a1894:	07d1      	lsls	r1, r2, #31
 80a1896:	bf5c      	itt	pl
 80a1898:	2201      	movpl	r2, #1
 80a189a:	601a      	strpl	r2, [r3, #0]
 80a189c:	4b10      	ldr	r3, [pc, #64]	; (80a18e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a189e:	681a      	ldr	r2, [r3, #0]
 80a18a0:	07d2      	lsls	r2, r2, #31
 80a18a2:	bf5c      	itt	pl
 80a18a4:	2201      	movpl	r2, #1
 80a18a6:	601a      	strpl	r2, [r3, #0]
 80a18a8:	4b0e      	ldr	r3, [pc, #56]	; (80a18e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a18aa:	681a      	ldr	r2, [r3, #0]
 80a18ac:	07d0      	lsls	r0, r2, #31
 80a18ae:	bf5c      	itt	pl
 80a18b0:	2201      	movpl	r2, #1
 80a18b2:	601a      	strpl	r2, [r3, #0]
 80a18b4:	4b0c      	ldr	r3, [pc, #48]	; (80a18e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a18b6:	681a      	ldr	r2, [r3, #0]
 80a18b8:	07d1      	lsls	r1, r2, #31
 80a18ba:	bf5c      	itt	pl
 80a18bc:	2201      	movpl	r2, #1
 80a18be:	601a      	strpl	r2, [r3, #0]
 80a18c0:	4b0a      	ldr	r3, [pc, #40]	; (80a18ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a18c2:	681a      	ldr	r2, [r3, #0]
 80a18c4:	07d2      	lsls	r2, r2, #31
 80a18c6:	bf5c      	itt	pl
 80a18c8:	2201      	movpl	r2, #1
 80a18ca:	601a      	strpl	r2, [r3, #0]
 80a18cc:	4770      	bx	lr
 80a18ce:	bf00      	nop
 80a18d0:	20000604 	.word	0x20000604
 80a18d4:	20000600 	.word	0x20000600
 80a18d8:	200005fc 	.word	0x200005fc
 80a18dc:	200005f8 	.word	0x200005f8
 80a18e0:	200005f4 	.word	0x200005f4
 80a18e4:	200005f0 	.word	0x200005f0
 80a18e8:	200005ec 	.word	0x200005ec
 80a18ec:	200005e8 	.word	0x200005e8

080a18f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a18f0:	4b24      	ldr	r3, [pc, #144]	; (80a1984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a18f2:	681a      	ldr	r2, [r3, #0]
 80a18f4:	07d0      	lsls	r0, r2, #31
 80a18f6:	bf5c      	itt	pl
 80a18f8:	2201      	movpl	r2, #1
 80a18fa:	601a      	strpl	r2, [r3, #0]
 80a18fc:	4b22      	ldr	r3, [pc, #136]	; (80a1988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a18fe:	681a      	ldr	r2, [r3, #0]
 80a1900:	07d1      	lsls	r1, r2, #31
 80a1902:	bf5c      	itt	pl
 80a1904:	2201      	movpl	r2, #1
 80a1906:	601a      	strpl	r2, [r3, #0]
 80a1908:	4b20      	ldr	r3, [pc, #128]	; (80a198c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a190a:	681a      	ldr	r2, [r3, #0]
 80a190c:	07d2      	lsls	r2, r2, #31
 80a190e:	bf5c      	itt	pl
 80a1910:	2201      	movpl	r2, #1
 80a1912:	601a      	strpl	r2, [r3, #0]
 80a1914:	4b1e      	ldr	r3, [pc, #120]	; (80a1990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1916:	681a      	ldr	r2, [r3, #0]
 80a1918:	07d0      	lsls	r0, r2, #31
 80a191a:	bf5c      	itt	pl
 80a191c:	2201      	movpl	r2, #1
 80a191e:	601a      	strpl	r2, [r3, #0]
 80a1920:	4b1c      	ldr	r3, [pc, #112]	; (80a1994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1922:	681a      	ldr	r2, [r3, #0]
 80a1924:	07d1      	lsls	r1, r2, #31
 80a1926:	bf5c      	itt	pl
 80a1928:	2201      	movpl	r2, #1
 80a192a:	601a      	strpl	r2, [r3, #0]
 80a192c:	4b1a      	ldr	r3, [pc, #104]	; (80a1998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a192e:	681a      	ldr	r2, [r3, #0]
 80a1930:	07d2      	lsls	r2, r2, #31
 80a1932:	bf5c      	itt	pl
 80a1934:	2201      	movpl	r2, #1
 80a1936:	601a      	strpl	r2, [r3, #0]
 80a1938:	4b18      	ldr	r3, [pc, #96]	; (80a199c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a193a:	681a      	ldr	r2, [r3, #0]
 80a193c:	07d0      	lsls	r0, r2, #31
 80a193e:	bf5c      	itt	pl
 80a1940:	2201      	movpl	r2, #1
 80a1942:	601a      	strpl	r2, [r3, #0]
 80a1944:	4b16      	ldr	r3, [pc, #88]	; (80a19a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1946:	681a      	ldr	r2, [r3, #0]
 80a1948:	07d1      	lsls	r1, r2, #31
 80a194a:	bf5c      	itt	pl
 80a194c:	2201      	movpl	r2, #1
 80a194e:	601a      	strpl	r2, [r3, #0]
 80a1950:	4b14      	ldr	r3, [pc, #80]	; (80a19a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1952:	681a      	ldr	r2, [r3, #0]
 80a1954:	07d2      	lsls	r2, r2, #31
 80a1956:	bf5c      	itt	pl
 80a1958:	2201      	movpl	r2, #1
 80a195a:	601a      	strpl	r2, [r3, #0]
 80a195c:	4b12      	ldr	r3, [pc, #72]	; (80a19a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a195e:	681a      	ldr	r2, [r3, #0]
 80a1960:	07d0      	lsls	r0, r2, #31
 80a1962:	bf5c      	itt	pl
 80a1964:	2201      	movpl	r2, #1
 80a1966:	601a      	strpl	r2, [r3, #0]
 80a1968:	4b10      	ldr	r3, [pc, #64]	; (80a19ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a196a:	681a      	ldr	r2, [r3, #0]
 80a196c:	07d1      	lsls	r1, r2, #31
 80a196e:	bf5c      	itt	pl
 80a1970:	2201      	movpl	r2, #1
 80a1972:	601a      	strpl	r2, [r3, #0]
 80a1974:	4b0e      	ldr	r3, [pc, #56]	; (80a19b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1976:	681a      	ldr	r2, [r3, #0]
 80a1978:	07d2      	lsls	r2, r2, #31
 80a197a:	bf5c      	itt	pl
 80a197c:	2201      	movpl	r2, #1
 80a197e:	601a      	strpl	r2, [r3, #0]
 80a1980:	4770      	bx	lr
 80a1982:	bf00      	nop
 80a1984:	20000634 	.word	0x20000634
 80a1988:	20000630 	.word	0x20000630
 80a198c:	2000062c 	.word	0x2000062c
 80a1990:	20000628 	.word	0x20000628
 80a1994:	20000624 	.word	0x20000624
 80a1998:	20000620 	.word	0x20000620
 80a199c:	2000061c 	.word	0x2000061c
 80a19a0:	20000618 	.word	0x20000618
 80a19a4:	20000614 	.word	0x20000614
 80a19a8:	20000610 	.word	0x20000610
 80a19ac:	2000060c 	.word	0x2000060c
 80a19b0:	20000608 	.word	0x20000608

080a19b4 <__cxa_atexit>:
 80a19b4:	b510      	push	{r4, lr}
 80a19b6:	4c05      	ldr	r4, [pc, #20]	; (80a19cc <__cxa_atexit+0x18>)
 80a19b8:	4613      	mov	r3, r2
 80a19ba:	b12c      	cbz	r4, 80a19c8 <__cxa_atexit+0x14>
 80a19bc:	460a      	mov	r2, r1
 80a19be:	4601      	mov	r1, r0
 80a19c0:	2002      	movs	r0, #2
 80a19c2:	f3af 8000 	nop.w
 80a19c6:	bd10      	pop	{r4, pc}
 80a19c8:	4620      	mov	r0, r4
 80a19ca:	bd10      	pop	{r4, pc}
 80a19cc:	00000000 	.word	0x00000000

080a19d0 <memcpy>:
 80a19d0:	b510      	push	{r4, lr}
 80a19d2:	1e43      	subs	r3, r0, #1
 80a19d4:	440a      	add	r2, r1
 80a19d6:	4291      	cmp	r1, r2
 80a19d8:	d004      	beq.n	80a19e4 <memcpy+0x14>
 80a19da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a19de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a19e2:	e7f8      	b.n	80a19d6 <memcpy+0x6>
 80a19e4:	bd10      	pop	{r4, pc}

080a19e6 <memset>:
 80a19e6:	4603      	mov	r3, r0
 80a19e8:	4402      	add	r2, r0
 80a19ea:	4293      	cmp	r3, r2
 80a19ec:	d002      	beq.n	80a19f4 <memset+0xe>
 80a19ee:	f803 1b01 	strb.w	r1, [r3], #1
 80a19f2:	e7fa      	b.n	80a19ea <memset+0x4>
 80a19f4:	4770      	bx	lr
	...

080a19f8 <srand>:
 80a19f8:	b538      	push	{r3, r4, r5, lr}
 80a19fa:	4b12      	ldr	r3, [pc, #72]	; (80a1a44 <srand+0x4c>)
 80a19fc:	4605      	mov	r5, r0
 80a19fe:	681c      	ldr	r4, [r3, #0]
 80a1a00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1a02:	b9d3      	cbnz	r3, 80a1a3a <srand+0x42>
 80a1a04:	2018      	movs	r0, #24
 80a1a06:	f7fe fe29 	bl	80a065c <malloc>
 80a1a0a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1a0e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1a10:	8003      	strh	r3, [r0, #0]
 80a1a12:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1a16:	8043      	strh	r3, [r0, #2]
 80a1a18:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1a1c:	8083      	strh	r3, [r0, #4]
 80a1a1e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1a22:	80c3      	strh	r3, [r0, #6]
 80a1a24:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1a28:	8103      	strh	r3, [r0, #8]
 80a1a2a:	2305      	movs	r3, #5
 80a1a2c:	8143      	strh	r3, [r0, #10]
 80a1a2e:	230b      	movs	r3, #11
 80a1a30:	8183      	strh	r3, [r0, #12]
 80a1a32:	2201      	movs	r2, #1
 80a1a34:	2300      	movs	r3, #0
 80a1a36:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1a3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1a3c:	2200      	movs	r2, #0
 80a1a3e:	611d      	str	r5, [r3, #16]
 80a1a40:	615a      	str	r2, [r3, #20]
 80a1a42:	bd38      	pop	{r3, r4, r5, pc}
 80a1a44:	20000078 	.word	0x20000078

080a1a48 <strcmp>:
 80a1a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a1a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a1a50:	2a01      	cmp	r2, #1
 80a1a52:	bf28      	it	cs
 80a1a54:	429a      	cmpcs	r2, r3
 80a1a56:	d0f7      	beq.n	80a1a48 <strcmp>
 80a1a58:	1ad0      	subs	r0, r2, r3
 80a1a5a:	4770      	bx	lr

080a1a5c <strdup>:
 80a1a5c:	4b02      	ldr	r3, [pc, #8]	; (80a1a68 <strdup+0xc>)
 80a1a5e:	4601      	mov	r1, r0
 80a1a60:	6818      	ldr	r0, [r3, #0]
 80a1a62:	f000 b803 	b.w	80a1a6c <_strdup_r>
 80a1a66:	bf00      	nop
 80a1a68:	20000078 	.word	0x20000078

080a1a6c <_strdup_r>:
 80a1a6c:	b570      	push	{r4, r5, r6, lr}
 80a1a6e:	4606      	mov	r6, r0
 80a1a70:	4608      	mov	r0, r1
 80a1a72:	460c      	mov	r4, r1
 80a1a74:	f000 f80d 	bl	80a1a92 <strlen>
 80a1a78:	1c45      	adds	r5, r0, #1
 80a1a7a:	4629      	mov	r1, r5
 80a1a7c:	4630      	mov	r0, r6
 80a1a7e:	f7fe fe0d 	bl	80a069c <_malloc_r>
 80a1a82:	4606      	mov	r6, r0
 80a1a84:	b118      	cbz	r0, 80a1a8e <_strdup_r+0x22>
 80a1a86:	462a      	mov	r2, r5
 80a1a88:	4621      	mov	r1, r4
 80a1a8a:	f7ff ffa1 	bl	80a19d0 <memcpy>
 80a1a8e:	4630      	mov	r0, r6
 80a1a90:	bd70      	pop	{r4, r5, r6, pc}

080a1a92 <strlen>:
 80a1a92:	4603      	mov	r3, r0
 80a1a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1a98:	2a00      	cmp	r2, #0
 80a1a9a:	d1fb      	bne.n	80a1a94 <strlen+0x2>
 80a1a9c:	1a18      	subs	r0, r3, r0
 80a1a9e:	3801      	subs	r0, #1
 80a1aa0:	4770      	bx	lr

080a1aa2 <link_code_end>:
	...

080a1aa4 <dynalib_user>:
 80a1aa4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1ab4:	0000 0000 666f 0066 6e6f 4c00 6465 6e4f     ....off.on.LedOn
 80a1ac4:	4c00 6465 664f 0066 7274 6575 6600 6c61     .LedOff.true.fal
 80a1ad4:	6573 4d00 7361 6574 4f72 006e 614d 7473     se.MasterOn.Mast
 80a1ae4:	7265 6f50 6577 0072 614d 7473 7265 664f     erPower.MasterOf
 80a1af4:	0066 0000                                   f...

080a1af8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a1b00:	06db 080a 06e1 080a 0737 080a 06ef 080a     ........7.......
 80a1b10:	06dd 080a                                   ....

080a1b14 <_ZTV7TwoWire>:
	...
 80a1b1c:	0ca1 080a 0ceb 080a 0cc3 080a 0ca3 080a     ................
 80a1b2c:	0ccb 080a 0cd3 080a 0cdb 080a 0ce3 080a     ................

080a1b3c <_ZTV9IPAddress>:
	...
 80a1b44:	0d35 080a 0d25 080a 0d27 080a 6162 6475     5...%...'...baud
 80a1b54:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a1b64:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a1b74:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a1b84:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a1b94:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a1ba4:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a1bb4:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a1bc4:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a1bd4:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a1be4:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a1bf4:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a1c04:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a1c14:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a1c24:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a1c34 <_ZTVN5spark12NetworkClassE>:
	...
 80a1c3c:	0dfd 080a 0e07 080a 0e11 080a 0e1b 080a     ................
 80a1c4c:	0e25 080a 0e31 080a 0e3d 080a 0e49 080a     %...1...=...I...
 80a1c5c:	0e51 080a 0e5b 080a 0e65 080a               Q...[...e...

080a1c68 <_ZTV8SPIClass>:
	...
 80a1c70:	0f9d 080a 0f9f 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a1c80:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1c90:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1ca0:	0000 0000                                   ....

080a1ca4 <_ZTV11USARTSerial>:
	...
 80a1cac:	1101 080a 1151 080a 115f 080a 0ec9 080a     ....Q..._.......
 80a1cbc:	1115 080a 1137 080a 1123 080a 114b 080a     ....7...#...K...
 80a1ccc:	1103 080a 1107 080a                         ........

080a1cd4 <_ZTV9USBSerial>:
	...
 80a1cdc:	1209 080a 1259 080a 1267 080a 0ec9 080a     ....Y...g.......
 80a1cec:	1245 080a 120b 080a 1221 080a 1253 080a     E.......!...S...
 80a1cfc:	1237 080a 1205 080a                         7.......

080a1d04 <_ZTVN5spark9WiFiClassE>:
	...
 80a1d0c:	1443 080a 1439 080a 142f 080a 13a1 080a     C...9.../.......
 80a1d1c:	1423 080a 1417 080a 140b 080a 1403 080a     #...............
 80a1d2c:	13f9 080a 13ef 080a 13ab 080a               ............

080a1d38 <__sf_fake_stdin>:
	...

080a1d58 <__sf_fake_stdout>:
	...

080a1d78 <__sf_fake_stderr>:
	...
 80a1d98:	0043                                        C.

080a1d9a <link_const_variable_data_end>:
	...

080a1d9c <link_constructors_location>:
 80a1d9c:	080a02c9 	.word	0x080a02c9
 80a1da0:	080a0ded 	.word	0x080a0ded
 80a1da4:	080a0eb5 	.word	0x080a0eb5
 80a1da8:	080a0f81 	.word	0x080a0f81
 80a1dac:	080a10d5 	.word	0x080a10d5
 80a1db0:	080a10ed 	.word	0x080a10ed
 80a1db4:	080a144d 	.word	0x080a144d
 80a1db8:	080a169d 	.word	0x080a169d
 80a1dbc:	080a16cd 	.word	0x080a16cd
 80a1dc0:	080a1725 	.word	0x080a1725
 80a1dc4:	080a17e9 	.word	0x080a17e9
 80a1dc8:	080a186d 	.word	0x080a186d
 80a1dcc:	080a18f1 	.word	0x080a18f1
