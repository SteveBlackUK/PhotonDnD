
/Users/steve_black_spare/Dropbox/PhotonDnD/target/1.2.1/photon/PhotonDnD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cc8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a1ce0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000080  20000300  080a1ce4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005ac  20000380  20000380  00030380  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a1d64  080a1d64  00021d64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a1d8c  080a1d8c  00021d8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a2e5c  00000000  00000000  00021d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000ed3e  00000000  00000000  000c4bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001248d  00000000  00000000  000d392a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001de0  00000000  00000000  000e5db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003068  00000000  00000000  000e7b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000236be  00000000  00000000  000eabff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00021578  00000000  00000000  0010e2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a4821  00000000  00000000  0012f835  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b4fc  00000000  00000000  001d4058  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	b4 19 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fc61 	bl	80a18f4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fc66 	bl	80a190a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a1ce4 	.word	0x080a1ce4
 80a004c:	20000380 	.word	0x20000380
 80a0050:	20000380 	.word	0x20000380
 80a0054:	2000092c 	.word	0x2000092c
 80a0058:	2000092c 	.word	0x2000092c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fa01 	bl	80a1464 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1ca0 	.word	0x080a1ca0
 80a0084:	080a1cd4 	.word	0x080a1cd4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b82a 	b.w	80a00e0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f871 	bl	80a0174 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b9a7 	b.w	80a13e8 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 babb 	b.w	80a0614 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bac1 	b.w	80a0624 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00b2:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00b4:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00b6:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a00b8:	b17c      	cbz	r4, 80a00da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a00ba:	6863      	ldr	r3, [r4, #4]
 80a00bc:	3b01      	subs	r3, #1
 80a00be:	6063      	str	r3, [r4, #4]
 80a00c0:	b95b      	cbnz	r3, 80a00da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a00c2:	6823      	ldr	r3, [r4, #0]
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	689b      	ldr	r3, [r3, #8]
 80a00c8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00ca:	68a3      	ldr	r3, [r4, #8]
 80a00cc:	3b01      	subs	r3, #1
 80a00ce:	60a3      	str	r3, [r4, #8]
 80a00d0:	b91b      	cbnz	r3, 80a00da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a00d2:	6823      	ldr	r3, [r4, #0]
 80a00d4:	4620      	mov	r0, r4
 80a00d6:	68db      	ldr	r3, [r3, #12]
 80a00d8:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a00da:	4628      	mov	r0, r5
 80a00dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a00e0 <setup>:
bool switchStatusChanged = true;  // needed to only run on/off loop on change event 
int switchStatus;
int currentSwitchVal;

// setup() runs once, when the device is first turned on.
void setup() {
 80a00e0:	b530      	push	{r4, r5, lr}
    //for LEDs and Button
    pinMode(button, INPUT_PULLUP);
 80a00e2:	4b1b      	ldr	r3, [pc, #108]	; (80a0150 <setup+0x70>)
bool switchStatusChanged = true;  // needed to only run on/off loop on change event 
int switchStatus;
int currentSwitchVal;

// setup() runs once, when the device is first turned on.
void setup() {
 80a00e4:	b085      	sub	sp, #20
    //for LEDs and Button
    pinMode(button, INPUT_PULLUP);
 80a00e6:	8818      	ldrh	r0, [r3, #0]
 80a00e8:	2102      	movs	r1, #2
 80a00ea:	f001 fa0b 	bl	80a1504 <pinMode>
    pinMode(greenButton, INPUT_PULLUP);
 80a00ee:	4b19      	ldr	r3, [pc, #100]	; (80a0154 <setup+0x74>)
    pinMode(red, OUTPUT);
 80a00f0:	4d19      	ldr	r5, [pc, #100]	; (80a0158 <setup+0x78>)

// setup() runs once, when the device is first turned on.
void setup() {
    //for LEDs and Button
    pinMode(button, INPUT_PULLUP);
    pinMode(greenButton, INPUT_PULLUP);
 80a00f2:	8818      	ldrh	r0, [r3, #0]
    pinMode(red, OUTPUT);
    pinMode(green, OUTPUT);
 80a00f4:	4c19      	ldr	r4, [pc, #100]	; (80a015c <setup+0x7c>)

// setup() runs once, when the device is first turned on.
void setup() {
    //for LEDs and Button
    pinMode(button, INPUT_PULLUP);
    pinMode(greenButton, INPUT_PULLUP);
 80a00f6:	2102      	movs	r1, #2
 80a00f8:	f001 fa04 	bl	80a1504 <pinMode>
    pinMode(red, OUTPUT);
 80a00fc:	8828      	ldrh	r0, [r5, #0]
 80a00fe:	2101      	movs	r1, #1
 80a0100:	f001 fa00 	bl	80a1504 <pinMode>
    pinMode(green, OUTPUT);
 80a0104:	8820      	ldrh	r0, [r4, #0]
 80a0106:	2101      	movs	r1, #1
 80a0108:	f001 f9fc 	bl	80a1504 <pinMode>

    // set starting status
    digitalWrite(red, HIGH);
 80a010c:	8828      	ldrh	r0, [r5, #0]
 80a010e:	2101      	movs	r1, #1
 80a0110:	f001 fa09 	bl	80a1526 <digitalWrite>
    digitalWrite(green, LOW);
 80a0114:	8820      	ldrh	r0, [r4, #0]
 80a0116:	2100      	movs	r1, #0
 80a0118:	f001 fa05 	bl	80a1526 <digitalWrite>
    
    //for switch
    pinMode(switchPin, INPUT);
 80a011c:	4b10      	ldr	r3, [pc, #64]	; (80a0160 <setup+0x80>)
 80a011e:	2100      	movs	r1, #0
 80a0120:	8818      	ldrh	r0, [r3, #0]
 80a0122:	f001 f9ef 	bl	80a1504 <pinMode>
    pinMode(switchRed, OUTPUT);
 80a0126:	4b0f      	ldr	r3, [pc, #60]	; (80a0164 <setup+0x84>)
 80a0128:	2101      	movs	r1, #1
 80a012a:	8818      	ldrh	r0, [r3, #0]
 80a012c:	f001 f9ea 	bl	80a1504 <pinMode>
 80a0130:	4b0d      	ldr	r3, [pc, #52]	; (80a0168 <setup+0x88>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0132:	4a0e      	ldr	r2, [pc, #56]	; (80a016c <setup+0x8c>)
 80a0134:	781b      	ldrb	r3, [r3, #0]
 80a0136:	490e      	ldr	r1, [pc, #56]	; (80a0170 <setup+0x90>)
 80a0138:	f88d 3000 	strb.w	r3, [sp]
 80a013c:	a802      	add	r0, sp, #8
 80a013e:	233c      	movs	r3, #60	; 0x3c
 80a0140:	f000 fbec 	bl	80a091c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0144:	a803      	add	r0, sp, #12
 80a0146:	f7ff ffb4 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    //publish red starting colour at launch
    Particle.publish("LedColor","red", PRIVATE); 
}
 80a014a:	b005      	add	sp, #20
 80a014c:	bd30      	pop	{r4, r5, pc}
 80a014e:	bf00      	nop
 80a0150:	20000314 	.word	0x20000314
 80a0154:	20000304 	.word	0x20000304
 80a0158:	20000310 	.word	0x20000310
 80a015c:	20000308 	.word	0x20000308
 80a0160:	2000038c 	.word	0x2000038c
 80a0164:	20000300 	.word	0x20000300
 80a0168:	20000388 	.word	0x20000388
 80a016c:	080a19c8 	.word	0x080a19c8
 80a0170:	080a19cc 	.word	0x080a19cc

080a0174 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // check button
    int redButtonState = digitalRead(button);
 80a0176:	4b3d      	ldr	r3, [pc, #244]	; (80a026c <loop+0xf8>)
 80a0178:	8818      	ldrh	r0, [r3, #0]
 80a017a:	f001 f9ed 	bl	80a1558 <digitalRead>

    // LOW means button is being pushed

    //red path
    if(redButtonState == LOW) {
 80a017e:	4604      	mov	r4, r0
 80a0180:	b9d0      	cbnz	r0, 80a01b8 <loop+0x44>
        ledStatus = "red";
 80a0182:	493b      	ldr	r1, [pc, #236]	; (80a0270 <loop+0xfc>)
 80a0184:	483b      	ldr	r0, [pc, #236]	; (80a0274 <loop+0x100>)
 80a0186:	f000 ff26 	bl	80a0fd6 <_ZN6StringaSEPKc>
 80a018a:	4b3b      	ldr	r3, [pc, #236]	; (80a0278 <loop+0x104>)
 80a018c:	4a38      	ldr	r2, [pc, #224]	; (80a0270 <loop+0xfc>)
 80a018e:	781b      	ldrb	r3, [r3, #0]
 80a0190:	493a      	ldr	r1, [pc, #232]	; (80a027c <loop+0x108>)
 80a0192:	f88d 3000 	strb.w	r3, [sp]
 80a0196:	a802      	add	r0, sp, #8
 80a0198:	233c      	movs	r3, #60	; 0x3c
 80a019a:	f000 fbbf 	bl	80a091c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a019e:	a803      	add	r0, sp, #12
 80a01a0:	f7ff ff87 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("LedColor","red", PRIVATE); //publish the new color so the listener can act
        digitalWrite(green, LOW);
 80a01a4:	4b36      	ldr	r3, [pc, #216]	; (80a0280 <loop+0x10c>)
 80a01a6:	4621      	mov	r1, r4
 80a01a8:	8818      	ldrh	r0, [r3, #0]
 80a01aa:	f001 f9bc 	bl	80a1526 <digitalWrite>
        digitalWrite(red, HIGH);
 80a01ae:	4b35      	ldr	r3, [pc, #212]	; (80a0284 <loop+0x110>)
 80a01b0:	2101      	movs	r1, #1
 80a01b2:	8818      	ldrh	r0, [r3, #0]
 80a01b4:	f001 f9b7 	bl	80a1526 <digitalWrite>
    }

    // Wait 0.5 seconds before checking button again.  If you hold button, you get toggle every 0.5 seconds.

    delay(500);
 80a01b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a01bc:	f000 fa52 	bl	80a0664 <delay>


    int greenButtonState = digitalRead(greenButton);
 80a01c0:	4b31      	ldr	r3, [pc, #196]	; (80a0288 <loop+0x114>)
 80a01c2:	8818      	ldrh	r0, [r3, #0]
 80a01c4:	f001 f9c8 	bl	80a1558 <digitalRead>
   
//green button path
    if(greenButtonState == LOW) {
 80a01c8:	4604      	mov	r4, r0
 80a01ca:	b9d0      	cbnz	r0, 80a0202 <loop+0x8e>
 80a01cc:	4b2a      	ldr	r3, [pc, #168]	; (80a0278 <loop+0x104>)
 80a01ce:	4a2f      	ldr	r2, [pc, #188]	; (80a028c <loop+0x118>)
 80a01d0:	781b      	ldrb	r3, [r3, #0]
 80a01d2:	492a      	ldr	r1, [pc, #168]	; (80a027c <loop+0x108>)
 80a01d4:	f88d 3000 	strb.w	r3, [sp]
 80a01d8:	a802      	add	r0, sp, #8
 80a01da:	233c      	movs	r3, #60	; 0x3c
 80a01dc:	f000 fb9e 	bl	80a091c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a01e0:	a803      	add	r0, sp, #12
 80a01e2:	f7ff ff66 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        //publish the new color so the listener can act
        Particle.publish("LedColor","green", PRIVATE); 
        ledStatus = "green"; 
 80a01e6:	4929      	ldr	r1, [pc, #164]	; (80a028c <loop+0x118>)
 80a01e8:	4822      	ldr	r0, [pc, #136]	; (80a0274 <loop+0x100>)
 80a01ea:	f000 fef4 	bl	80a0fd6 <_ZN6StringaSEPKc>
        digitalWrite(green, HIGH); 
 80a01ee:	4b24      	ldr	r3, [pc, #144]	; (80a0280 <loop+0x10c>)
 80a01f0:	2101      	movs	r1, #1
 80a01f2:	8818      	ldrh	r0, [r3, #0]
 80a01f4:	f001 f997 	bl	80a1526 <digitalWrite>
        digitalWrite(red, LOW);
 80a01f8:	4b22      	ldr	r3, [pc, #136]	; (80a0284 <loop+0x110>)
 80a01fa:	4621      	mov	r1, r4
 80a01fc:	8818      	ldrh	r0, [r3, #0]
 80a01fe:	f001 f992 	bl	80a1526 <digitalWrite>
    }


    //Switch section for master on/off switch that overrides red/green toggle
    currentSwitchVal = digitalRead(switchPin);
 80a0202:	4b23      	ldr	r3, [pc, #140]	; (80a0290 <loop+0x11c>)
 80a0204:	8818      	ldrh	r0, [r3, #0]
 80a0206:	f001 f9a7 	bl	80a1558 <digitalRead>
 80a020a:	4b22      	ldr	r3, [pc, #136]	; (80a0294 <loop+0x120>)
 80a020c:	6018      	str	r0, [r3, #0]
    
    //because this is in loop() and we don't want to toggle on/off nonstop, we only want to toggle on/off when the switch changes position.
    if (currentSwitchVal != switchStatus) {
 80a020e:	4b22      	ldr	r3, [pc, #136]	; (80a0298 <loop+0x124>)
 80a0210:	681b      	ldr	r3, [r3, #0]
 80a0212:	4298      	cmp	r0, r3
 80a0214:	4b21      	ldr	r3, [pc, #132]	; (80a029c <loop+0x128>)
        switchStatusChanged = true;
 80a0216:	bf1c      	itt	ne
 80a0218:	2201      	movne	r2, #1
 80a021a:	701a      	strbne	r2, [r3, #0]
    }
    
    if(switchStatusChanged == true) {
 80a021c:	781b      	ldrb	r3, [r3, #0]
 80a021e:	b313      	cbz	r3, 80a0266 <loop+0xf2>
        switchStatus = currentSwitchVal;
        switchStatusChanged = false;
 80a0220:	4b1e      	ldr	r3, [pc, #120]	; (80a029c <loop+0x128>)
 80a0222:	2100      	movs	r1, #0
        
        if (currentSwitchVal == HIGH)
 80a0224:	2801      	cmp	r0, #1
        switchStatusChanged = true;
    }
    
    if(switchStatusChanged == true) {
        switchStatus = currentSwitchVal;
        switchStatusChanged = false;
 80a0226:	7019      	strb	r1, [r3, #0]
    if (currentSwitchVal != switchStatus) {
        switchStatusChanged = true;
    }
    
    if(switchStatusChanged == true) {
        switchStatus = currentSwitchVal;
 80a0228:	4a1b      	ldr	r2, [pc, #108]	; (80a0298 <loop+0x124>)
 80a022a:	4c13      	ldr	r4, [pc, #76]	; (80a0278 <loop+0x104>)
 80a022c:	4b1c      	ldr	r3, [pc, #112]	; (80a02a0 <loop+0x12c>)
        switchStatusChanged = false;
        
        if (currentSwitchVal == HIGH)
 80a022e:	d109      	bne.n	80a0244 <loop+0xd0>
        {
            switchStatus = HIGH; 
 80a0230:	6010      	str	r0, [r2, #0]
            digitalWrite(switchRed, LOW);
 80a0232:	8818      	ldrh	r0, [r3, #0]
 80a0234:	f001 f977 	bl	80a1526 <digitalWrite>
 80a0238:	7823      	ldrb	r3, [r4, #0]
 80a023a:	4a1a      	ldr	r2, [pc, #104]	; (80a02a4 <loop+0x130>)
 80a023c:	f88d 3000 	strb.w	r3, [sp]
 80a0240:	233c      	movs	r3, #60	; 0x3c
 80a0242:	e009      	b.n	80a0258 <loop+0xe4>
            //publish power on event to listening devices
            Particle.publish("MasterPower","MasterOn",PRIVATE);
        }
        else
        {
            switchStatus = LOW; 
 80a0244:	6011      	str	r1, [r2, #0]
            digitalWrite(switchRed, HIGH);
 80a0246:	8818      	ldrh	r0, [r3, #0]
 80a0248:	2101      	movs	r1, #1
 80a024a:	f001 f96c 	bl	80a1526 <digitalWrite>
 80a024e:	7823      	ldrb	r3, [r4, #0]
 80a0250:	4a15      	ldr	r2, [pc, #84]	; (80a02a8 <loop+0x134>)
 80a0252:	f88d 3000 	strb.w	r3, [sp]
 80a0256:	233c      	movs	r3, #60	; 0x3c
 80a0258:	a802      	add	r0, sp, #8
 80a025a:	4914      	ldr	r1, [pc, #80]	; (80a02ac <loop+0x138>)
 80a025c:	f000 fb5e 	bl	80a091c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0260:	a803      	add	r0, sp, #12
 80a0262:	f7ff ff26 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Particle.publish("MasterPower","MasterOff",PRIVATE);
        }
    }
 80a0266:	b004      	add	sp, #16
 80a0268:	bd10      	pop	{r4, pc}
 80a026a:	bf00      	nop
 80a026c:	20000314 	.word	0x20000314
 80a0270:	080a19c8 	.word	0x080a19c8
 80a0274:	20000390 	.word	0x20000390
 80a0278:	20000388 	.word	0x20000388
 80a027c:	080a19cc 	.word	0x080a19cc
 80a0280:	20000308 	.word	0x20000308
 80a0284:	20000310 	.word	0x20000310
 80a0288:	20000304 	.word	0x20000304
 80a028c:	080a19d5 	.word	0x080a19d5
 80a0290:	2000038c 	.word	0x2000038c
 80a0294:	20000384 	.word	0x20000384
 80a0298:	200003a0 	.word	0x200003a0
 80a029c:	2000030c 	.word	0x2000030c
 80a02a0:	20000300 	.word	0x20000300
 80a02a4:	080a19db 	.word	0x080a19db
 80a02a8:	080a19f0 	.word	0x080a19f0
 80a02ac:	080a19e4 	.word	0x080a19e4

080a02b0 <_GLOBAL__sub_I_red>:
 80a02b0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a02b2:	4b08      	ldr	r3, [pc, #32]	; (80a02d4 <_GLOBAL__sub_I_red+0x24>)
int green = D5;
int button = D2;  // red/green toggle button
int greenButton = D6; // green button
int switchPin = D0;  // switch used for on/off
int switchRed = D1;
String ledStatus = "red";
 80a02b4:	4c08      	ldr	r4, [pc, #32]	; (80a02d8 <_GLOBAL__sub_I_red+0x28>)
 80a02b6:	2201      	movs	r2, #1
 80a02b8:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a02ba:	f000 f82d 	bl	80a0318 <HAL_Pin_Map>
 80a02be:	4907      	ldr	r1, [pc, #28]	; (80a02dc <_GLOBAL__sub_I_red+0x2c>)
 80a02c0:	4620      	mov	r0, r4
 80a02c2:	f000 fe75 	bl	80a0fb0 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02c6:	4620      	mov	r0, r4
            switchStatus = LOW; 
            digitalWrite(switchRed, HIGH);
            Particle.publish("MasterPower","MasterOff",PRIVATE);
        }
    }
 80a02c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int green = D5;
int button = D2;  // red/green toggle button
int greenButton = D6; // green button
int switchPin = D0;  // switch used for on/off
int switchRed = D1;
String ledStatus = "red";
 80a02cc:	4a04      	ldr	r2, [pc, #16]	; (80a02e0 <_GLOBAL__sub_I_red+0x30>)
 80a02ce:	4905      	ldr	r1, [pc, #20]	; (80a02e4 <_GLOBAL__sub_I_red+0x34>)
 80a02d0:	f001 b9b0 	b.w	80a1634 <__aeabi_atexit>
 80a02d4:	20000388 	.word	0x20000388
 80a02d8:	20000390 	.word	0x20000390
 80a02dc:	080a19c8 	.word	0x080a19c8
 80a02e0:	20000380 	.word	0x20000380
 80a02e4:	080a0f23 	.word	0x080a0f23

080a02e8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a02e8:	b508      	push	{r3, lr}
 80a02ea:	4b02      	ldr	r3, [pc, #8]	; (80a02f4 <os_mutex_create+0xc>)
 80a02ec:	681b      	ldr	r3, [r3, #0]
 80a02ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a02f0:	9301      	str	r3, [sp, #4]
 80a02f2:	bd08      	pop	{r3, pc}
 80a02f4:	080601d0 	.word	0x080601d0

080a02f8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a02f8:	b508      	push	{r3, lr}
 80a02fa:	4b02      	ldr	r3, [pc, #8]	; (80a0304 <HAL_RNG_GetRandomNumber+0xc>)
 80a02fc:	681b      	ldr	r3, [r3, #0]
 80a02fe:	685b      	ldr	r3, [r3, #4]
 80a0300:	9301      	str	r3, [sp, #4]
 80a0302:	bd08      	pop	{r3, pc}
 80a0304:	0806019c 	.word	0x0806019c

080a0308 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0308:	b508      	push	{r3, lr}
 80a030a:	4b02      	ldr	r3, [pc, #8]	; (80a0314 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a030c:	681b      	ldr	r3, [r3, #0]
 80a030e:	695b      	ldr	r3, [r3, #20]
 80a0310:	9301      	str	r3, [sp, #4]
 80a0312:	bd08      	pop	{r3, pc}
 80a0314:	0806019c 	.word	0x0806019c

080a0318 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0318:	b508      	push	{r3, lr}
 80a031a:	4b02      	ldr	r3, [pc, #8]	; (80a0324 <HAL_Pin_Map+0xc>)
 80a031c:	681b      	ldr	r3, [r3, #0]
 80a031e:	681b      	ldr	r3, [r3, #0]
 80a0320:	9301      	str	r3, [sp, #4]
 80a0322:	bd08      	pop	{r3, pc}
 80a0324:	080601b0 	.word	0x080601b0

080a0328 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0328:	b508      	push	{r3, lr}
 80a032a:	4b02      	ldr	r3, [pc, #8]	; (80a0334 <HAL_Pin_Mode+0xc>)
 80a032c:	681b      	ldr	r3, [r3, #0]
 80a032e:	689b      	ldr	r3, [r3, #8]
 80a0330:	9301      	str	r3, [sp, #4]
 80a0332:	bd08      	pop	{r3, pc}
 80a0334:	080601b0 	.word	0x080601b0

080a0338 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0338:	b508      	push	{r3, lr}
 80a033a:	4b02      	ldr	r3, [pc, #8]	; (80a0344 <HAL_Get_Pin_Mode+0xc>)
 80a033c:	681b      	ldr	r3, [r3, #0]
 80a033e:	68db      	ldr	r3, [r3, #12]
 80a0340:	9301      	str	r3, [sp, #4]
 80a0342:	bd08      	pop	{r3, pc}
 80a0344:	080601b0 	.word	0x080601b0

080a0348 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0348:	b508      	push	{r3, lr}
 80a034a:	4b02      	ldr	r3, [pc, #8]	; (80a0354 <HAL_GPIO_Write+0xc>)
 80a034c:	681b      	ldr	r3, [r3, #0]
 80a034e:	691b      	ldr	r3, [r3, #16]
 80a0350:	9301      	str	r3, [sp, #4]
 80a0352:	bd08      	pop	{r3, pc}
 80a0354:	080601b0 	.word	0x080601b0

080a0358 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0358:	b508      	push	{r3, lr}
 80a035a:	4b02      	ldr	r3, [pc, #8]	; (80a0364 <HAL_GPIO_Read+0xc>)
 80a035c:	681b      	ldr	r3, [r3, #0]
 80a035e:	695b      	ldr	r3, [r3, #20]
 80a0360:	9301      	str	r3, [sp, #4]
 80a0362:	bd08      	pop	{r3, pc}
 80a0364:	080601b0 	.word	0x080601b0

080a0368 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0368:	b508      	push	{r3, lr}
 80a036a:	4b02      	ldr	r3, [pc, #8]	; (80a0374 <HAL_I2C_Write_Data+0xc>)
 80a036c:	681b      	ldr	r3, [r3, #0]
 80a036e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0370:	9301      	str	r3, [sp, #4]
 80a0372:	bd08      	pop	{r3, pc}
 80a0374:	080601ac 	.word	0x080601ac

080a0378 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0378:	b508      	push	{r3, lr}
 80a037a:	4b02      	ldr	r3, [pc, #8]	; (80a0384 <HAL_I2C_Available_Data+0xc>)
 80a037c:	681b      	ldr	r3, [r3, #0]
 80a037e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0380:	9301      	str	r3, [sp, #4]
 80a0382:	bd08      	pop	{r3, pc}
 80a0384:	080601ac 	.word	0x080601ac

080a0388 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0388:	b508      	push	{r3, lr}
 80a038a:	4b02      	ldr	r3, [pc, #8]	; (80a0394 <HAL_I2C_Read_Data+0xc>)
 80a038c:	681b      	ldr	r3, [r3, #0]
 80a038e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0390:	9301      	str	r3, [sp, #4]
 80a0392:	bd08      	pop	{r3, pc}
 80a0394:	080601ac 	.word	0x080601ac

080a0398 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0398:	b508      	push	{r3, lr}
 80a039a:	4b02      	ldr	r3, [pc, #8]	; (80a03a4 <HAL_I2C_Peek_Data+0xc>)
 80a039c:	681b      	ldr	r3, [r3, #0]
 80a039e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a03a0:	9301      	str	r3, [sp, #4]
 80a03a2:	bd08      	pop	{r3, pc}
 80a03a4:	080601ac 	.word	0x080601ac

080a03a8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a03a8:	b508      	push	{r3, lr}
 80a03aa:	4b02      	ldr	r3, [pc, #8]	; (80a03b4 <HAL_I2C_Flush_Data+0xc>)
 80a03ac:	681b      	ldr	r3, [r3, #0]
 80a03ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a03b0:	9301      	str	r3, [sp, #4]
 80a03b2:	bd08      	pop	{r3, pc}
 80a03b4:	080601ac 	.word	0x080601ac

080a03b8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b02      	ldr	r3, [pc, #8]	; (80a03c4 <HAL_I2C_Is_Enabled+0xc>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a03c0:	9301      	str	r3, [sp, #4]
 80a03c2:	bd08      	pop	{r3, pc}
 80a03c4:	080601ac 	.word	0x080601ac

080a03c8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a03c8:	b508      	push	{r3, lr}
 80a03ca:	4b03      	ldr	r3, [pc, #12]	; (80a03d8 <HAL_I2C_Init+0x10>)
 80a03cc:	681b      	ldr	r3, [r3, #0]
 80a03ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a03d2:	9301      	str	r3, [sp, #4]
 80a03d4:	bd08      	pop	{r3, pc}
 80a03d6:	0000      	.short	0x0000
 80a03d8:	080601ac 	.word	0x080601ac

080a03dc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a03dc:	b508      	push	{r3, lr}
 80a03de:	4b02      	ldr	r3, [pc, #8]	; (80a03e8 <HAL_SPI_Init+0xc>)
 80a03e0:	681b      	ldr	r3, [r3, #0]
 80a03e2:	69db      	ldr	r3, [r3, #28]
 80a03e4:	9301      	str	r3, [sp, #4]
 80a03e6:	bd08      	pop	{r3, pc}
 80a03e8:	080601b4 	.word	0x080601b4

080a03ec <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a03ec:	b508      	push	{r3, lr}
 80a03ee:	4b02      	ldr	r3, [pc, #8]	; (80a03f8 <HAL_SPI_Is_Enabled+0xc>)
 80a03f0:	681b      	ldr	r3, [r3, #0]
 80a03f2:	6a1b      	ldr	r3, [r3, #32]
 80a03f4:	9301      	str	r3, [sp, #4]
 80a03f6:	bd08      	pop	{r3, pc}
 80a03f8:	080601b4 	.word	0x080601b4

080a03fc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a03fc:	b508      	push	{r3, lr}
 80a03fe:	4b02      	ldr	r3, [pc, #8]	; (80a0408 <HAL_USART_Init+0xc>)
 80a0400:	681b      	ldr	r3, [r3, #0]
 80a0402:	699b      	ldr	r3, [r3, #24]
 80a0404:	9301      	str	r3, [sp, #4]
 80a0406:	bd08      	pop	{r3, pc}
 80a0408:	080601c4 	.word	0x080601c4

080a040c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a040c:	b508      	push	{r3, lr}
 80a040e:	4b02      	ldr	r3, [pc, #8]	; (80a0418 <HAL_USART_Write_Data+0xc>)
 80a0410:	681b      	ldr	r3, [r3, #0]
 80a0412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0414:	9301      	str	r3, [sp, #4]
 80a0416:	bd08      	pop	{r3, pc}
 80a0418:	080601c4 	.word	0x080601c4

080a041c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a041c:	b508      	push	{r3, lr}
 80a041e:	4b02      	ldr	r3, [pc, #8]	; (80a0428 <HAL_USART_Available_Data+0xc>)
 80a0420:	681b      	ldr	r3, [r3, #0]
 80a0422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0424:	9301      	str	r3, [sp, #4]
 80a0426:	bd08      	pop	{r3, pc}
 80a0428:	080601c4 	.word	0x080601c4

080a042c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a042c:	b508      	push	{r3, lr}
 80a042e:	4b02      	ldr	r3, [pc, #8]	; (80a0438 <HAL_USART_Read_Data+0xc>)
 80a0430:	681b      	ldr	r3, [r3, #0]
 80a0432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0434:	9301      	str	r3, [sp, #4]
 80a0436:	bd08      	pop	{r3, pc}
 80a0438:	080601c4 	.word	0x080601c4

080a043c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a043c:	b508      	push	{r3, lr}
 80a043e:	4b02      	ldr	r3, [pc, #8]	; (80a0448 <HAL_USART_Peek_Data+0xc>)
 80a0440:	681b      	ldr	r3, [r3, #0]
 80a0442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0444:	9301      	str	r3, [sp, #4]
 80a0446:	bd08      	pop	{r3, pc}
 80a0448:	080601c4 	.word	0x080601c4

080a044c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a044c:	b508      	push	{r3, lr}
 80a044e:	4b02      	ldr	r3, [pc, #8]	; (80a0458 <HAL_USART_Flush_Data+0xc>)
 80a0450:	681b      	ldr	r3, [r3, #0]
 80a0452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0454:	9301      	str	r3, [sp, #4]
 80a0456:	bd08      	pop	{r3, pc}
 80a0458:	080601c4 	.word	0x080601c4

080a045c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a045c:	b508      	push	{r3, lr}
 80a045e:	4b02      	ldr	r3, [pc, #8]	; (80a0468 <HAL_USART_Is_Enabled+0xc>)
 80a0460:	681b      	ldr	r3, [r3, #0]
 80a0462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0464:	9301      	str	r3, [sp, #4]
 80a0466:	bd08      	pop	{r3, pc}
 80a0468:	080601c4 	.word	0x080601c4

080a046c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a046c:	b508      	push	{r3, lr}
 80a046e:	4b02      	ldr	r3, [pc, #8]	; (80a0478 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0470:	681b      	ldr	r3, [r3, #0]
 80a0472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0474:	9301      	str	r3, [sp, #4]
 80a0476:	bd08      	pop	{r3, pc}
 80a0478:	080601c4 	.word	0x080601c4

080a047c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a047c:	b508      	push	{r3, lr}
 80a047e:	4b02      	ldr	r3, [pc, #8]	; (80a0488 <HAL_USB_USART_Init+0xc>)
 80a0480:	681b      	ldr	r3, [r3, #0]
 80a0482:	681b      	ldr	r3, [r3, #0]
 80a0484:	9301      	str	r3, [sp, #4]
 80a0486:	bd08      	pop	{r3, pc}
 80a0488:	080601d8 	.word	0x080601d8

080a048c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a048c:	b508      	push	{r3, lr}
 80a048e:	4b02      	ldr	r3, [pc, #8]	; (80a0498 <HAL_USB_USART_Available_Data+0xc>)
 80a0490:	681b      	ldr	r3, [r3, #0]
 80a0492:	691b      	ldr	r3, [r3, #16]
 80a0494:	9301      	str	r3, [sp, #4]
 80a0496:	bd08      	pop	{r3, pc}
 80a0498:	080601d8 	.word	0x080601d8

080a049c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a049c:	b508      	push	{r3, lr}
 80a049e:	4b02      	ldr	r3, [pc, #8]	; (80a04a8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a04a0:	681b      	ldr	r3, [r3, #0]
 80a04a2:	695b      	ldr	r3, [r3, #20]
 80a04a4:	9301      	str	r3, [sp, #4]
 80a04a6:	bd08      	pop	{r3, pc}
 80a04a8:	080601d8 	.word	0x080601d8

080a04ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a04ac:	b508      	push	{r3, lr}
 80a04ae:	4b02      	ldr	r3, [pc, #8]	; (80a04b8 <HAL_USB_USART_Receive_Data+0xc>)
 80a04b0:	681b      	ldr	r3, [r3, #0]
 80a04b2:	699b      	ldr	r3, [r3, #24]
 80a04b4:	9301      	str	r3, [sp, #4]
 80a04b6:	bd08      	pop	{r3, pc}
 80a04b8:	080601d8 	.word	0x080601d8

080a04bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a04bc:	b508      	push	{r3, lr}
 80a04be:	4b02      	ldr	r3, [pc, #8]	; (80a04c8 <HAL_USB_USART_Send_Data+0xc>)
 80a04c0:	681b      	ldr	r3, [r3, #0]
 80a04c2:	69db      	ldr	r3, [r3, #28]
 80a04c4:	9301      	str	r3, [sp, #4]
 80a04c6:	bd08      	pop	{r3, pc}
 80a04c8:	080601d8 	.word	0x080601d8

080a04cc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a04cc:	b508      	push	{r3, lr}
 80a04ce:	4b02      	ldr	r3, [pc, #8]	; (80a04d8 <HAL_USB_USART_Flush_Data+0xc>)
 80a04d0:	681b      	ldr	r3, [r3, #0]
 80a04d2:	6a1b      	ldr	r3, [r3, #32]
 80a04d4:	9301      	str	r3, [sp, #4]
 80a04d6:	bd08      	pop	{r3, pc}
 80a04d8:	080601d8 	.word	0x080601d8

080a04dc <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a04dc:	b508      	push	{r3, lr}
 80a04de:	4b02      	ldr	r3, [pc, #8]	; (80a04e8 <inet_gethostbyname+0xc>)
 80a04e0:	681b      	ldr	r3, [r3, #0]
 80a04e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a04e4:	9301      	str	r3, [sp, #4]
 80a04e6:	bd08      	pop	{r3, pc}
 80a04e8:	080601c0 	.word	0x080601c0

080a04ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a04ec:	b508      	push	{r3, lr}
 80a04ee:	4b02      	ldr	r3, [pc, #8]	; (80a04f8 <set_system_mode+0xc>)
 80a04f0:	681b      	ldr	r3, [r3, #0]
 80a04f2:	685b      	ldr	r3, [r3, #4]
 80a04f4:	9301      	str	r3, [sp, #4]
 80a04f6:	bd08      	pop	{r3, pc}
 80a04f8:	080601a4 	.word	0x080601a4

080a04fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a04fc:	b508      	push	{r3, lr}
 80a04fe:	4b02      	ldr	r3, [pc, #8]	; (80a0508 <system_delay_ms+0xc>)
 80a0500:	681b      	ldr	r3, [r3, #0]
 80a0502:	695b      	ldr	r3, [r3, #20]
 80a0504:	9301      	str	r3, [sp, #4]
 80a0506:	bd08      	pop	{r3, pc}
 80a0508:	080601a4 	.word	0x080601a4

080a050c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a050c:	b508      	push	{r3, lr}
 80a050e:	4b02      	ldr	r3, [pc, #8]	; (80a0518 <application_thread_current+0xc>)
 80a0510:	681b      	ldr	r3, [r3, #0]
 80a0512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0514:	9301      	str	r3, [sp, #4]
 80a0516:	bd08      	pop	{r3, pc}
 80a0518:	080601a4 	.word	0x080601a4

080a051c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a051c:	b508      	push	{r3, lr}
 80a051e:	4b02      	ldr	r3, [pc, #8]	; (80a0528 <application_thread_invoke+0xc>)
 80a0520:	681b      	ldr	r3, [r3, #0]
 80a0522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0524:	9301      	str	r3, [sp, #4]
 80a0526:	bd08      	pop	{r3, pc}
 80a0528:	080601a4 	.word	0x080601a4

080a052c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a052c:	b508      	push	{r3, lr}
 80a052e:	4b03      	ldr	r3, [pc, #12]	; (80a053c <system_ctrl_set_app_request_handler+0x10>)
 80a0530:	681b      	ldr	r3, [r3, #0]
 80a0532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0536:	9301      	str	r3, [sp, #4]
 80a0538:	bd08      	pop	{r3, pc}
 80a053a:	0000      	.short	0x0000
 80a053c:	080601a4 	.word	0x080601a4

080a0540 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0540:	b508      	push	{r3, lr}
 80a0542:	4b03      	ldr	r3, [pc, #12]	; (80a0550 <system_ctrl_set_result+0x10>)
 80a0544:	681b      	ldr	r3, [r3, #0]
 80a0546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a054a:	9301      	str	r3, [sp, #4]
 80a054c:	bd08      	pop	{r3, pc}
 80a054e:	0000      	.short	0x0000
 80a0550:	080601a4 	.word	0x080601a4

080a0554 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <spark_send_event+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	6a1b      	ldr	r3, [r3, #32]
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601cc 	.word	0x080601cc

080a0564 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601cc 	.word	0x080601cc

080a0574 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0574:	b508      	push	{r3, lr}
 80a0576:	4b02      	ldr	r3, [pc, #8]	; (80a0580 <network_connect+0xc>)
 80a0578:	681b      	ldr	r3, [r3, #0]
 80a057a:	685b      	ldr	r3, [r3, #4]
 80a057c:	9301      	str	r3, [sp, #4]
 80a057e:	bd08      	pop	{r3, pc}
 80a0580:	080601c8 	.word	0x080601c8

080a0584 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0584:	b508      	push	{r3, lr}
 80a0586:	4b02      	ldr	r3, [pc, #8]	; (80a0590 <network_connecting+0xc>)
 80a0588:	681b      	ldr	r3, [r3, #0]
 80a058a:	689b      	ldr	r3, [r3, #8]
 80a058c:	9301      	str	r3, [sp, #4]
 80a058e:	bd08      	pop	{r3, pc}
 80a0590:	080601c8 	.word	0x080601c8

080a0594 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <network_disconnect+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	68db      	ldr	r3, [r3, #12]
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601c8 	.word	0x080601c8

080a05a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <network_ready+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	691b      	ldr	r3, [r3, #16]
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601c8 	.word	0x080601c8

080a05b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <network_on+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	695b      	ldr	r3, [r3, #20]
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601c8 	.word	0x080601c8

080a05c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <network_off+0xc>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	699b      	ldr	r3, [r3, #24]
 80a05cc:	9301      	str	r3, [sp, #4]
 80a05ce:	bd08      	pop	{r3, pc}
 80a05d0:	080601c8 	.word	0x080601c8

080a05d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b02      	ldr	r3, [pc, #8]	; (80a05e0 <network_listen+0xc>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	69db      	ldr	r3, [r3, #28]
 80a05dc:	9301      	str	r3, [sp, #4]
 80a05de:	bd08      	pop	{r3, pc}
 80a05e0:	080601c8 	.word	0x080601c8

080a05e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a05e4:	b508      	push	{r3, lr}
 80a05e6:	4b02      	ldr	r3, [pc, #8]	; (80a05f0 <network_listening+0xc>)
 80a05e8:	681b      	ldr	r3, [r3, #0]
 80a05ea:	6a1b      	ldr	r3, [r3, #32]
 80a05ec:	9301      	str	r3, [sp, #4]
 80a05ee:	bd08      	pop	{r3, pc}
 80a05f0:	080601c8 	.word	0x080601c8

080a05f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a05f4:	b508      	push	{r3, lr}
 80a05f6:	4b02      	ldr	r3, [pc, #8]	; (80a0600 <network_set_listen_timeout+0xc>)
 80a05f8:	681b      	ldr	r3, [r3, #0]
 80a05fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a05fc:	9301      	str	r3, [sp, #4]
 80a05fe:	bd08      	pop	{r3, pc}
 80a0600:	080601c8 	.word	0x080601c8

080a0604 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0604:	b508      	push	{r3, lr}
 80a0606:	4b02      	ldr	r3, [pc, #8]	; (80a0610 <network_get_listen_timeout+0xc>)
 80a0608:	681b      	ldr	r3, [r3, #0]
 80a060a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a060c:	9301      	str	r3, [sp, #4]
 80a060e:	bd08      	pop	{r3, pc}
 80a0610:	080601c8 	.word	0x080601c8

080a0614 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b02      	ldr	r3, [pc, #8]	; (80a0620 <malloc+0xc>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	681b      	ldr	r3, [r3, #0]
 80a061c:	9301      	str	r3, [sp, #4]
 80a061e:	bd08      	pop	{r3, pc}
 80a0620:	080601a0 	.word	0x080601a0

080a0624 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0624:	b508      	push	{r3, lr}
 80a0626:	4b02      	ldr	r3, [pc, #8]	; (80a0630 <free+0xc>)
 80a0628:	681b      	ldr	r3, [r3, #0]
 80a062a:	685b      	ldr	r3, [r3, #4]
 80a062c:	9301      	str	r3, [sp, #4]
 80a062e:	bd08      	pop	{r3, pc}
 80a0630:	080601a0 	.word	0x080601a0

080a0634 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0634:	b508      	push	{r3, lr}
 80a0636:	4b02      	ldr	r3, [pc, #8]	; (80a0640 <realloc+0xc>)
 80a0638:	681b      	ldr	r3, [r3, #0]
 80a063a:	689b      	ldr	r3, [r3, #8]
 80a063c:	9301      	str	r3, [sp, #4]
 80a063e:	bd08      	pop	{r3, pc}
 80a0640:	080601a0 	.word	0x080601a0

080a0644 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0644:	b508      	push	{r3, lr}
 80a0646:	4b02      	ldr	r3, [pc, #8]	; (80a0650 <abort+0xc>)
 80a0648:	681b      	ldr	r3, [r3, #0]
 80a064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a064c:	9301      	str	r3, [sp, #4]
 80a064e:	bd08      	pop	{r3, pc}
 80a0650:	080601a0 	.word	0x080601a0

080a0654 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0654:	b508      	push	{r3, lr}
 80a0656:	4b02      	ldr	r3, [pc, #8]	; (80a0660 <_malloc_r+0xc>)
 80a0658:	681b      	ldr	r3, [r3, #0]
 80a065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a065c:	9301      	str	r3, [sp, #4]
 80a065e:	bd08      	pop	{r3, pc}
 80a0660:	080601a0 	.word	0x080601a0

080a0664 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0664:	2100      	movs	r1, #0
 80a0666:	f7ff bf49 	b.w	80a04fc <system_delay_ms>

080a066a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a066a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a066c:	6883      	ldr	r3, [r0, #8]
 80a066e:	4604      	mov	r4, r0
 80a0670:	b90b      	cbnz	r3, 80a0676 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0672:	f000 ffe6 	bl	80a1642 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0676:	68c3      	ldr	r3, [r0, #12]
 80a0678:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a067a:	68a3      	ldr	r3, [r4, #8]
 80a067c:	b11b      	cbz	r3, 80a0686 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a067e:	2203      	movs	r2, #3
 80a0680:	4621      	mov	r1, r4
 80a0682:	4620      	mov	r0, r4
 80a0684:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0686:	4620      	mov	r0, r4
}
 80a0688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a068c:	2110      	movs	r1, #16
 80a068e:	f000 bfd6 	b.w	80a163e <_ZdlPvj>

080a0692 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0692:	4770      	bx	lr

080a0694 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0694:	2000      	movs	r0, #0
 80a0696:	4770      	bx	lr

080a0698 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0698:	b510      	push	{r4, lr}
 80a069a:	4604      	mov	r4, r0
 80a069c:	2110      	movs	r1, #16
 80a069e:	f000 ffce 	bl	80a163e <_ZdlPvj>
 80a06a2:	4620      	mov	r0, r4
 80a06a4:	bd10      	pop	{r4, pc}

080a06a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a06a6:	b508      	push	{r3, lr}
      { delete this; }
 80a06a8:	b108      	cbz	r0, 80a06ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a06aa:	f7ff fff5 	bl	80a0698 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a06ae:	bd08      	pop	{r3, pc}

080a06b0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a06b0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a06b2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a06b4:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a06b6:	b113      	cbz	r3, 80a06be <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a06b8:	2203      	movs	r2, #3
 80a06ba:	4601      	mov	r1, r0
 80a06bc:	4798      	blx	r3
    }
 80a06be:	4620      	mov	r0, r4
 80a06c0:	bd10      	pop	{r4, pc}

080a06c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a06c2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a06c4:	68c4      	ldr	r4, [r0, #12]
 80a06c6:	b1ec      	cbz	r4, 80a0704 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a06c8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a06ca:	2b02      	cmp	r3, #2
 80a06cc:	d102      	bne.n	80a06d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a06ce:	68e0      	ldr	r0, [r4, #12]
 80a06d0:	f7ff ffa8 	bl	80a0624 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a06d4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a06d6:	b135      	cbz	r5, 80a06e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a06d8:	4628      	mov	r0, r5
 80a06da:	f7ff ffe9 	bl	80a06b0 <_ZNSt14_Function_baseD1Ev>
 80a06de:	2110      	movs	r1, #16
 80a06e0:	4628      	mov	r0, r5
 80a06e2:	f000 ffac 	bl	80a163e <_ZdlPvj>
 80a06e6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a06e8:	b135      	cbz	r5, 80a06f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
 80a06ea:	4628      	mov	r0, r5
 80a06ec:	f7ff ffe0 	bl	80a06b0 <_ZNSt14_Function_baseD1Ev>
 80a06f0:	2110      	movs	r1, #16
 80a06f2:	4628      	mov	r0, r5
 80a06f4:	f000 ffa3 	bl	80a163e <_ZdlPvj>
 80a06f8:	4620      	mov	r0, r4
 80a06fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a06fe:	2114      	movs	r1, #20
 80a0700:	f000 bf9d 	b.w	80a163e <_ZdlPvj>
 80a0704:	bd38      	pop	{r3, r4, r5, pc}

080a0706 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0706:	b513      	push	{r0, r1, r4, lr}
 80a0708:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a070a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a070e:	2300      	movs	r3, #0
 80a0710:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0712:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0714:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0716:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0718:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a071a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a071c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a071e:	f7ff fcc8 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0722:	4620      	mov	r0, r4
 80a0724:	b002      	add	sp, #8
 80a0726:	bd10      	pop	{r4, pc}

080a0728 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0728:	680b      	ldr	r3, [r1, #0]
 80a072a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a072c:	b113      	cbz	r3, 80a0734 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a072e:	685a      	ldr	r2, [r3, #4]
 80a0730:	3201      	adds	r2, #1
 80a0732:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0734:	4770      	bx	lr

080a0736 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0736:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0738:	460c      	mov	r4, r1
 80a073a:	4606      	mov	r6, r0
 80a073c:	460f      	mov	r7, r1
 80a073e:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0742:	ad02      	add	r5, sp, #8
 80a0744:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0748:	4621      	mov	r1, r4
 80a074a:	a801      	add	r0, sp, #4
 80a074c:	f7ff ffec 	bl	80a0728 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0750:	4629      	mov	r1, r5
 80a0752:	4630      	mov	r0, r6
 80a0754:	f7ff ffd7 	bl	80a0706 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0758:	a801      	add	r0, sp, #4
 80a075a:	f7ff fcaa 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a075e:	4620      	mov	r0, r4
 80a0760:	f7ff fca7 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0764:	4638      	mov	r0, r7
 80a0766:	2108      	movs	r1, #8
 80a0768:	f000 ff69 	bl	80a163e <_ZdlPvj>
        return p;
    }
 80a076c:	4630      	mov	r0, r6
 80a076e:	b003      	add	sp, #12
 80a0770:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0772 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0772:	b513      	push	{r0, r1, r4, lr}
 80a0774:	460b      	mov	r3, r1
 80a0776:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0778:	c803      	ldmia	r0, {r0, r1}
 80a077a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a077e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0782:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0786:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a078a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a078e:	b002      	add	sp, #8
 80a0790:	bd10      	pop	{r4, pc}

080a0792 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0792:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0794:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0796:	b90a      	cbnz	r2, 80a079c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0798:	f000 ff53 	bl	80a1642 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a079c:	68c3      	ldr	r3, [r0, #12]
    }
 80a079e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a07a2:	4718      	bx	r3

080a07a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a07a4:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a07a6:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a07a8:	f100 0110 	add.w	r1, r0, #16
 80a07ac:	f7ff fff1 	bl	80a0792 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a07b0:	bd08      	pop	{r3, pc}

080a07b2 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a07b2:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a07b4:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a07b6:	b90a      	cbnz	r2, 80a07bc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a07b8:	f000 ff43 	bl	80a1642 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a07bc:	68c3      	ldr	r3, [r0, #12]
    }
 80a07be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a07c2:	4718      	bx	r3

080a07c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a07c4:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a07c6:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a07c8:	f100 0110 	add.w	r1, r0, #16
 80a07cc:	f7ff fff1 	bl	80a07b2 <_ZNKSt8functionIFvRKbEEclES1_>
 80a07d0:	bd08      	pop	{r3, pc}

080a07d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a07d2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a07d4:	2300      	movs	r3, #0
 80a07d6:	6083      	str	r3, [r0, #8]
 80a07d8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a07da:	4604      	mov	r4, r0
 80a07dc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a07de:	b12b      	cbz	r3, 80a07ec <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a07e0:	2202      	movs	r2, #2
 80a07e2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a07e4:	68eb      	ldr	r3, [r5, #12]
 80a07e6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a07e8:	68ab      	ldr	r3, [r5, #8]
 80a07ea:	60a3      	str	r3, [r4, #8]
	}
    }
 80a07ec:	4620      	mov	r0, r4
 80a07ee:	bd38      	pop	{r3, r4, r5, pc}

080a07f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a07f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a07f4:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a07f8:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a07fa:	f04f 0002 	mov.w	r0, #2
 80a07fe:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0800:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0804:	808b      	strh	r3, [r1, #4]
 80a0806:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0808:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a080a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a080e:	600b      	str	r3, [r1, #0]
 80a0810:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a0814:	4299      	cmp	r1, r3
 80a0816:	d103      	bne.n	80a0820 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a0818:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a081c:	2d00      	cmp	r5, #0
 80a081e:	d1f7      	bne.n	80a0810 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0820:	d002      	beq.n	80a0828 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a0822:	f88d 1000 	strb.w	r1, [sp]
 80a0826:	e06c      	b.n	80a0902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0828:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a082c:	bf1c      	itt	ne
 80a082e:	60e7      	strne	r7, [r4, #12]
 80a0830:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0832:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a0836:	bf18      	it	ne
 80a0838:	461f      	movne	r7, r3
 80a083a:	2301      	movs	r3, #1
 80a083c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a083e:	f3bf 8f5f 	dmb	sy
 80a0842:	f104 0308 	add.w	r3, r4, #8
 80a0846:	2000      	movs	r0, #0
 80a0848:	e853 6f00 	ldrex	r6, [r3]
 80a084c:	e843 0200 	strex	r2, r0, [r3]
 80a0850:	2a00      	cmp	r2, #0
 80a0852:	d1f9      	bne.n	80a0848 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a0854:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0858:	2e00      	cmp	r6, #0
 80a085a:	d052      	beq.n	80a0902 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a085c:	f7ff fe56 	bl	80a050c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0860:	b120      	cbz	r0, 80a086c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0862:	4629      	mov	r1, r5
 80a0864:	4630      	mov	r0, r6
 80a0866:	f7ff ff94 	bl	80a0792 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a086a:	e043      	b.n	80a08f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a086c:	4631      	mov	r1, r6
 80a086e:	4668      	mov	r0, sp
 80a0870:	f7ff ffaf 	bl	80a07d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0874:	68e0      	ldr	r0, [r4, #12]
 80a0876:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a087a:	b108      	cbz	r0, 80a0880 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a087c:	f001 f876 	bl	80a196c <strdup>
 80a0880:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0882:	2010      	movs	r0, #16
 80a0884:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a0888:	f7ff fc07 	bl	80a009a <_Znwj>
 80a088c:	4605      	mov	r5, r0
 80a088e:	b330      	cbz	r0, 80a08de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0890:	f04f 0800 	mov.w	r8, #0
 80a0894:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0898:	2018      	movs	r0, #24
 80a089a:	f7ff fbfe 	bl	80a009a <_Znwj>
 80a089e:	4604      	mov	r4, r0
 80a08a0:	b1c0      	cbz	r0, 80a08d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a08a2:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a08a6:	4601      	mov	r1, r0
 80a08a8:	4668      	mov	r0, sp
 80a08aa:	f7ff ff62 	bl	80a0772 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a08ae:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a08b0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a08b2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a08b4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a08b6:	9202      	str	r2, [sp, #8]
 80a08b8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a08ba:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a08bc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a08c0:	9203      	str	r2, [sp, #12]
 80a08c2:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a08c4:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a08c8:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a08cc:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a08ce:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a08d2:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a08d4:	4b0e      	ldr	r3, [pc, #56]	; (80a0910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a08d6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a08d8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a08da:	4b0e      	ldr	r3, [pc, #56]	; (80a0914 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a08dc:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a08de:	9804      	ldr	r0, [sp, #16]
 80a08e0:	f7ff fea0 	bl	80a0624 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a08e4:	4668      	mov	r0, sp
 80a08e6:	f7ff fee3 	bl	80a06b0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a08ea:	2200      	movs	r2, #0
 80a08ec:	4629      	mov	r1, r5
 80a08ee:	480a      	ldr	r0, [pc, #40]	; (80a0918 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x128>)
 80a08f0:	f7ff fe14 	bl	80a051c <application_thread_invoke>
 80a08f4:	4630      	mov	r0, r6
 80a08f6:	f7ff fedb 	bl	80a06b0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a08fa:	2110      	movs	r1, #16
 80a08fc:	4630      	mov	r0, r6
 80a08fe:	f000 fe9e 	bl	80a163e <_ZdlPvj>
 80a0902:	4638      	mov	r0, r7
 80a0904:	f7ff fe8e 	bl	80a0624 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a0908:	b006      	add	sp, #24
 80a090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a090e:	bf00      	nop
 80a0910:	080a07a5 	.word	0x080a07a5
 80a0914:	080a0a05 	.word	0x080a0a05
 80a0918:	080a066b 	.word	0x080a066b

080a091c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a091c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0920:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0922:	ad07      	add	r5, sp, #28
 80a0924:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0928:	4606      	mov	r6, r0
 80a092a:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a092c:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a092e:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0930:	460f      	mov	r7, r1
 80a0932:	4690      	mov	r8, r2
 80a0934:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0938:	f8c5 b004 	str.w	fp, [r5, #4]
 80a093c:	f8c5 b008 	str.w	fp, [r5, #8]
 80a0940:	9307      	str	r3, [sp, #28]
 80a0942:	f7ff fbaa 	bl	80a009a <_Znwj>
 80a0946:	4604      	mov	r4, r0
 80a0948:	b138      	cbz	r0, 80a095a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a094a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a094e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0952:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0956:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a095a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a095c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a095e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0960:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0962:	f7ff fb9a 	bl	80a009a <_Znwj>
 80a0966:	b128      	cbz	r0, 80a0974 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0968:	2301      	movs	r3, #1
 80a096a:	6043      	str	r3, [r0, #4]
 80a096c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a096e:	4b23      	ldr	r3, [pc, #140]	; (80a09fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a0970:	60c4      	str	r4, [r0, #12]
 80a0972:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a0974:	4b22      	ldr	r3, [pc, #136]	; (80a0a00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0976:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0978:	2008      	movs	r0, #8
 80a097a:	9308      	str	r3, [sp, #32]
 80a097c:	f7ff fb8d 	bl	80a009a <_Znwj>
 80a0980:	4604      	mov	r4, r0
 80a0982:	b128      	cbz	r0, 80a0990 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0984:	9b03      	ldr	r3, [sp, #12]
 80a0986:	a904      	add	r1, sp, #16
 80a0988:	f840 3b04 	str.w	r3, [r0], #4
 80a098c:	f7ff fecc 	bl	80a0728 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0990:	9500      	str	r5, [sp, #0]
 80a0992:	fa5f f38a 	uxtb.w	r3, sl
 80a0996:	464a      	mov	r2, r9
 80a0998:	4641      	mov	r1, r8
 80a099a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a099c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a099e:	f7ff fdd9 	bl	80a0554 <spark_send_event>
 80a09a2:	b9b8      	cbnz	r0, 80a09d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a09a4:	9b03      	ldr	r3, [sp, #12]
 80a09a6:	785b      	ldrb	r3, [r3, #1]
 80a09a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a09ac:	b993      	cbnz	r3, 80a09d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a09ae:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a09b2:	a905      	add	r1, sp, #20
 80a09b4:	a803      	add	r0, sp, #12
 80a09b6:	9205      	str	r2, [sp, #20]
 80a09b8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a09bc:	f7ff ff18 	bl	80a07f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a09c0:	9805      	ldr	r0, [sp, #20]
 80a09c2:	f7ff fe2f 	bl	80a0624 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a09c6:	a805      	add	r0, sp, #20
 80a09c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a09ca:	f7ff feb4 	bl	80a0736 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a09ce:	a806      	add	r0, sp, #24
 80a09d0:	f7ff fb6f 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a09d4:	9b03      	ldr	r3, [sp, #12]
 80a09d6:	a904      	add	r1, sp, #16
 80a09d8:	a806      	add	r0, sp, #24
 80a09da:	9305      	str	r3, [sp, #20]
 80a09dc:	f7ff fea4 	bl	80a0728 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a09e0:	a905      	add	r1, sp, #20
 80a09e2:	4630      	mov	r0, r6
 80a09e4:	f7ff fe8f 	bl	80a0706 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a09e8:	a806      	add	r0, sp, #24
 80a09ea:	f7ff fb62 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a09ee:	a804      	add	r0, sp, #16
 80a09f0:	f7ff fb5f 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a09f4:	4630      	mov	r0, r6
 80a09f6:	b00b      	add	sp, #44	; 0x2c
 80a09f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a09fc:	080a1a04 	.word	0x080a1a04
 80a0a00:	080a0b71 	.word	0x080a0b71

080a0a04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0a04:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a08:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0a0a:	d006      	beq.n	80a0a1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a0a0c:	2a03      	cmp	r2, #3
 80a0a0e:	d017      	beq.n	80a0a40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a0a10:	2a01      	cmp	r2, #1
 80a0a12:	d121      	bne.n	80a0a58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0a14:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0a16:	6003      	str	r3, [r0, #0]
	      break;
 80a0a18:	e01e      	b.n	80a0a58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0a1a:	2018      	movs	r0, #24
 80a0a1c:	680e      	ldr	r6, [r1, #0]
 80a0a1e:	f7ff fb3c 	bl	80a009a <_Znwj>
 80a0a22:	4605      	mov	r5, r0
 80a0a24:	b150      	cbz	r0, 80a0a3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0a26:	4631      	mov	r1, r6
 80a0a28:	f7ff fed3 	bl	80a07d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0a2c:	6930      	ldr	r0, [r6, #16]
 80a0a2e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0a32:	b108      	cbz	r0, 80a0a38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a0a34:	f000 ff9a 	bl	80a196c <strdup>
 80a0a38:	6128      	str	r0, [r5, #16]
 80a0a3a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0a3c:	6025      	str	r5, [r4, #0]
 80a0a3e:	e00b      	b.n	80a0a58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0a40:	6804      	ldr	r4, [r0, #0]
 80a0a42:	b14c      	cbz	r4, 80a0a58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0a44:	6920      	ldr	r0, [r4, #16]
 80a0a46:	f7ff fded 	bl	80a0624 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0a4a:	4620      	mov	r0, r4
 80a0a4c:	f7ff fe30 	bl	80a06b0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0a50:	2118      	movs	r1, #24
 80a0a52:	4620      	mov	r0, r4
 80a0a54:	f000 fdf3 	bl	80a163e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0a58:	2000      	movs	r0, #0
 80a0a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a5c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0a5c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0a5e:	2300      	movs	r3, #0
 80a0a60:	6083      	str	r3, [r0, #8]
 80a0a62:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0a64:	4604      	mov	r4, r0
 80a0a66:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0a68:	b12b      	cbz	r3, 80a0a76 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0a6a:	2202      	movs	r2, #2
 80a0a6c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0a6e:	68eb      	ldr	r3, [r5, #12]
 80a0a70:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0a72:	68ab      	ldr	r3, [r5, #8]
 80a0a74:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0a76:	4620      	mov	r0, r4
 80a0a78:	bd38      	pop	{r3, r4, r5, pc}

080a0a7a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0a7a:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0a7c:	b570      	push	{r4, r5, r6, lr}
 80a0a7e:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0a80:	d006      	beq.n	80a0a90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a0a82:	2a03      	cmp	r2, #3
 80a0a84:	d011      	beq.n	80a0aaa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a0a86:	2a01      	cmp	r2, #1
 80a0a88:	d118      	bne.n	80a0abc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0a8a:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0a8c:	6003      	str	r3, [r0, #0]
	      break;
 80a0a8e:	e015      	b.n	80a0abc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0a90:	2014      	movs	r0, #20
 80a0a92:	680e      	ldr	r6, [r1, #0]
 80a0a94:	f7ff fb01 	bl	80a009a <_Znwj>
 80a0a98:	4605      	mov	r5, r0
 80a0a9a:	b120      	cbz	r0, 80a0aa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0a9c:	4631      	mov	r1, r6
 80a0a9e:	f7ff ffdd 	bl	80a0a5c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a0aa2:	7c33      	ldrb	r3, [r6, #16]
 80a0aa4:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0aa6:	6025      	str	r5, [r4, #0]
 80a0aa8:	e008      	b.n	80a0abc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0aaa:	6804      	ldr	r4, [r0, #0]
 80a0aac:	b134      	cbz	r4, 80a0abc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0aae:	4620      	mov	r0, r4
 80a0ab0:	f7ff fdfe 	bl	80a06b0 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0ab4:	2114      	movs	r1, #20
 80a0ab6:	4620      	mov	r0, r4
 80a0ab8:	f000 fdc1 	bl	80a163e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0abc:	2000      	movs	r0, #0
 80a0abe:	bd70      	pop	{r4, r5, r6, pc}

080a0ac0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a0ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ac2:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0ac4:	f3bf 8f5f 	dmb	sy
 80a0ac8:	b087      	sub	sp, #28
 80a0aca:	2300      	movs	r3, #0
 80a0acc:	e850 6f00 	ldrex	r6, [r0]
 80a0ad0:	e840 3200 	strex	r2, r3, [r0]
 80a0ad4:	2a00      	cmp	r2, #0
 80a0ad6:	d1f9      	bne.n	80a0acc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a0ad8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0adc:	2e00      	cmp	r6, #0
 80a0ade:	d03f      	beq.n	80a0b60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0ae0:	4618      	mov	r0, r3
 80a0ae2:	f7ff fd13 	bl	80a050c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0ae6:	4607      	mov	r7, r0
 80a0ae8:	b120      	cbz	r0, 80a0af4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0aea:	4621      	mov	r1, r4
 80a0aec:	4630      	mov	r0, r6
 80a0aee:	f7ff fe60 	bl	80a07b2 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0af2:	e02e      	b.n	80a0b52 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0af4:	4631      	mov	r1, r6
 80a0af6:	a801      	add	r0, sp, #4
 80a0af8:	f7ff ffb0 	bl	80a0a5c <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0afc:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0afe:	2010      	movs	r0, #16
 80a0b00:	f88d 3014 	strb.w	r3, [sp, #20]
 80a0b04:	f7ff fac9 	bl	80a009a <_Znwj>
 80a0b08:	4605      	mov	r5, r0
 80a0b0a:	b1d0      	cbz	r0, 80a0b42 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0b0c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0b0e:	2014      	movs	r0, #20
 80a0b10:	f7ff fac3 	bl	80a009a <_Znwj>
 80a0b14:	4604      	mov	r4, r0
 80a0b16:	b178      	cbz	r0, 80a0b38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0b18:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0b1a:	4601      	mov	r1, r0
 80a0b1c:	a801      	add	r0, sp, #4
 80a0b1e:	f7ff fe28 	bl	80a0772 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0b22:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0b24:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b26:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0b28:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0b2a:	9203      	str	r2, [sp, #12]
 80a0b2c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b2e:	60e3      	str	r3, [r4, #12]
 80a0b30:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0b34:	9204      	str	r2, [sp, #16]
 80a0b36:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0b38:	4b0a      	ldr	r3, [pc, #40]	; (80a0b64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0b3a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0b3c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0b3e:	4b0a      	ldr	r3, [pc, #40]	; (80a0b68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a0b40:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0b42:	a801      	add	r0, sp, #4
 80a0b44:	f7ff fdb4 	bl	80a06b0 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0b48:	2200      	movs	r2, #0
 80a0b4a:	4629      	mov	r1, r5
 80a0b4c:	4807      	ldr	r0, [pc, #28]	; (80a0b6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a0b4e:	f7ff fce5 	bl	80a051c <application_thread_invoke>
 80a0b52:	4630      	mov	r0, r6
 80a0b54:	f7ff fdac 	bl	80a06b0 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0b58:	2110      	movs	r1, #16
 80a0b5a:	4630      	mov	r0, r6
 80a0b5c:	f000 fd6f 	bl	80a163e <_ZdlPvj>
        }
    }
 80a0b60:	b007      	add	sp, #28
 80a0b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0b64:	080a07c5 	.word	0x080a07c5
 80a0b68:	080a0a7b 	.word	0x080a0a7b
 80a0b6c:	080a066b 	.word	0x080a066b

080a0b70 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a0b70:	b530      	push	{r4, r5, lr}
 80a0b72:	4604      	mov	r4, r0
 80a0b74:	b085      	sub	sp, #20
 80a0b76:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a0b78:	4668      	mov	r0, sp
 80a0b7a:	4611      	mov	r1, r2
 80a0b7c:	f7ff fddb 	bl	80a0736 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a0b80:	b17c      	cbz	r4, 80a0ba2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a0b82:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0b84:	4628      	mov	r0, r5
 80a0b86:	b10d      	cbz	r5, 80a0b8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a0b88:	f000 fef0 	bl	80a196c <strdup>
 80a0b8c:	9002      	str	r0, [sp, #8]
 80a0b8e:	a902      	add	r1, sp, #8
 80a0b90:	4668      	mov	r0, sp
 80a0b92:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a0b96:	f7ff fe2b 	bl	80a07f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0b9a:	9802      	ldr	r0, [sp, #8]
 80a0b9c:	f7ff fd42 	bl	80a0624 <free>
 80a0ba0:	e01d      	b.n	80a0bde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0ba2:	f04f 0201 	mov.w	r2, #1
 80a0ba6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0ba8:	f88d 4008 	strb.w	r4, [sp, #8]
 80a0bac:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a0bb0:	42a3      	cmp	r3, r4
 80a0bb2:	d103      	bne.n	80a0bbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a0bb4:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a0bb8:	2900      	cmp	r1, #0
 80a0bba:	d1f7      	bne.n	80a0bac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a0bbc:	d002      	beq.n	80a0bc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a0bbe:	f88d 3008 	strb.w	r3, [sp, #8]
 80a0bc2:	e00c      	b.n	80a0bde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a0bc4:	f110 010c 	adds.w	r1, r0, #12
 80a0bc8:	f04f 0301 	mov.w	r3, #1
 80a0bcc:	bf18      	it	ne
 80a0bce:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0bd0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a0bd4:	3004      	adds	r0, #4
 80a0bd6:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a0bda:	f7ff ff71 	bl	80a0ac0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a0bde:	a801      	add	r0, sp, #4
 80a0be0:	f7ff fa67 	bl	80a00b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a0be4:	b005      	add	sp, #20
 80a0be6:	bd30      	pop	{r4, r5, pc}

080a0be8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0be8:	4770      	bx	lr

080a0bea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0bec:	4606      	mov	r6, r0
 80a0bee:	4615      	mov	r5, r2
 80a0bf0:	460c      	mov	r4, r1
 80a0bf2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0bf4:	42bc      	cmp	r4, r7
 80a0bf6:	d006      	beq.n	80a0c06 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0bf8:	6833      	ldr	r3, [r6, #0]
 80a0bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0bfe:	689b      	ldr	r3, [r3, #8]
 80a0c00:	4630      	mov	r0, r6
 80a0c02:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0c04:	e7f6      	b.n	80a0bf4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0c06:	4628      	mov	r0, r5
 80a0c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c0a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0c0a:	2200      	movs	r2, #0
 80a0c0c:	7c00      	ldrb	r0, [r0, #16]
 80a0c0e:	f7ff bbab 	b.w	80a0368 <HAL_I2C_Write_Data>

080a0c12 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0c12:	2100      	movs	r1, #0
 80a0c14:	7c00      	ldrb	r0, [r0, #16]
 80a0c16:	f7ff bbaf 	b.w	80a0378 <HAL_I2C_Available_Data>

080a0c1a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0c1a:	2100      	movs	r1, #0
 80a0c1c:	7c00      	ldrb	r0, [r0, #16]
 80a0c1e:	f7ff bbb3 	b.w	80a0388 <HAL_I2C_Read_Data>

080a0c22 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0c22:	2100      	movs	r1, #0
 80a0c24:	7c00      	ldrb	r0, [r0, #16]
 80a0c26:	f7ff bbb7 	b.w	80a0398 <HAL_I2C_Peek_Data>

080a0c2a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0c2a:	2100      	movs	r1, #0
 80a0c2c:	7c00      	ldrb	r0, [r0, #16]
 80a0c2e:	f7ff bbbb 	b.w	80a03a8 <HAL_I2C_Flush_Data>

080a0c32 <_ZN7TwoWireD0Ev>:
 80a0c32:	b510      	push	{r4, lr}
 80a0c34:	4604      	mov	r4, r0
 80a0c36:	2114      	movs	r1, #20
 80a0c38:	f000 fd01 	bl	80a163e <_ZdlPvj>
 80a0c3c:	4620      	mov	r0, r4
 80a0c3e:	bd10      	pop	{r4, pc}

080a0c40 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0c40:	b510      	push	{r4, lr}
 80a0c42:	4604      	mov	r4, r0
 80a0c44:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c4a:	60a3      	str	r3, [r4, #8]
 80a0c4c:	4b04      	ldr	r3, [pc, #16]	; (80a0c60 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0c4e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0c50:	7420      	strb	r0, [r4, #16]
 80a0c52:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0c54:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0c56:	f7ff fbb7 	bl	80a03c8 <HAL_I2C_Init>

}
 80a0c5a:	4620      	mov	r0, r4
 80a0c5c:	bd10      	pop	{r4, pc}
 80a0c5e:	bf00      	nop
 80a0c60:	080a1a20 	.word	0x080a1a20

080a0c64 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0c64:	2100      	movs	r1, #0
 80a0c66:	7c00      	ldrb	r0, [r0, #16]
 80a0c68:	f7ff bba6 	b.w	80a03b8 <HAL_I2C_Is_Enabled>

080a0c6c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0c6c:	4770      	bx	lr

080a0c6e <_ZN9IPAddressD0Ev>:
 80a0c6e:	b510      	push	{r4, lr}
 80a0c70:	4604      	mov	r4, r0
 80a0c72:	2118      	movs	r1, #24
 80a0c74:	f000 fce3 	bl	80a163e <_ZdlPvj>
 80a0c78:	4620      	mov	r0, r4
 80a0c7a:	bd10      	pop	{r4, pc}

080a0c7c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c7e:	460f      	mov	r7, r1
 80a0c80:	f100 0608 	add.w	r6, r0, #8
 80a0c84:	1d05      	adds	r5, r0, #4
 80a0c86:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0c88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0c8c:	220a      	movs	r2, #10
 80a0c8e:	4638      	mov	r0, r7
 80a0c90:	f000 f911 	bl	80a0eb6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0c94:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0c96:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0c98:	d007      	beq.n	80a0caa <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0c9a:	2c00      	cmp	r4, #0
 80a0c9c:	d0f4      	beq.n	80a0c88 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0c9e:	212e      	movs	r1, #46	; 0x2e
 80a0ca0:	4638      	mov	r0, r7
 80a0ca2:	f000 f8db 	bl	80a0e5c <_ZN5Print5printEc>
 80a0ca6:	4404      	add	r4, r0
 80a0ca8:	e7ee      	b.n	80a0c88 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0caa:	4620      	mov	r0, r4
 80a0cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0cb0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0cb0:	b510      	push	{r4, lr}
 80a0cb2:	4604      	mov	r4, r0
 80a0cb4:	4b04      	ldr	r3, [pc, #16]	; (80a0cc8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0cb6:	2211      	movs	r2, #17
 80a0cb8:	f840 3b04 	str.w	r3, [r0], #4
 80a0cbc:	2100      	movs	r1, #0
 80a0cbe:	f000 fe24 	bl	80a190a <memset>
{
    clear();
}
 80a0cc2:	4620      	mov	r0, r4
 80a0cc4:	bd10      	pop	{r4, pc}
 80a0cc6:	bf00      	nop
 80a0cc8:	080a1a48 	.word	0x080a1a48

080a0ccc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0ccc:	4603      	mov	r3, r0
 80a0cce:	4a07      	ldr	r2, [pc, #28]	; (80a0cec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0cd0:	b510      	push	{r4, lr}
 80a0cd2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0cd6:	f101 0210 	add.w	r2, r1, #16
 80a0cda:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0cde:	4291      	cmp	r1, r2
 80a0ce0:	f843 4b04 	str.w	r4, [r3], #4
 80a0ce4:	d1f9      	bne.n	80a0cda <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0ce6:	780a      	ldrb	r2, [r1, #0]
 80a0ce8:	701a      	strb	r2, [r3, #0]
}
 80a0cea:	bd10      	pop	{r4, pc}
 80a0cec:	080a1a48 	.word	0x080a1a48

080a0cf0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0cf0:	4a02      	ldr	r2, [pc, #8]	; (80a0cfc <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0cf2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0cf4:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0cf6:	2204      	movs	r2, #4
 80a0cf8:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0cfa:	4770      	bx	lr
 80a0cfc:	080a1a48 	.word	0x080a1a48

080a0d00 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0d00:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0d02:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0d06:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0d0a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0d0e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0d12:	2304      	movs	r3, #4
 80a0d14:	6041      	str	r1, [r0, #4]
 80a0d16:	7503      	strb	r3, [r0, #20]
 80a0d18:	bd10      	pop	{r4, pc}
	...

080a0d1c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0d1e:	4d04      	ldr	r5, [pc, #16]	; (80a0d30 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0d20:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0d22:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0d26:	9500      	str	r5, [sp, #0]
 80a0d28:	f7ff ffea 	bl	80a0d00 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0d2c:	b003      	add	sp, #12
 80a0d2e:	bd30      	pop	{r4, r5, pc}
 80a0d30:	080a1a48 	.word	0x080a1a48

080a0d34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0d34:	4a01      	ldr	r2, [pc, #4]	; (80a0d3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0d36:	4b02      	ldr	r3, [pc, #8]	; (80a0d40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0d38:	601a      	str	r2, [r3, #0]
 80a0d3a:	4770      	bx	lr
 80a0d3c:	080a1b0d 	.word	0x080a1b0d
 80a0d40:	200003a4 	.word	0x200003a4

080a0d44 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0d44:	2300      	movs	r3, #0
 80a0d46:	461a      	mov	r2, r3
 80a0d48:	6840      	ldr	r0, [r0, #4]
 80a0d4a:	f7ff bc13 	b.w	80a0574 <network_connect>

080a0d4e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0d4e:	2200      	movs	r2, #0
 80a0d50:	2102      	movs	r1, #2
 80a0d52:	6840      	ldr	r0, [r0, #4]
 80a0d54:	f7ff bc1e 	b.w	80a0594 <network_disconnect>

080a0d58 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0d58:	2200      	movs	r2, #0
 80a0d5a:	4611      	mov	r1, r2
 80a0d5c:	6840      	ldr	r0, [r0, #4]
 80a0d5e:	f7ff bc11 	b.w	80a0584 <network_connecting>

080a0d62 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0d62:	2200      	movs	r2, #0
 80a0d64:	4611      	mov	r1, r2
 80a0d66:	6840      	ldr	r0, [r0, #4]
 80a0d68:	f7ff bc1c 	b.w	80a05a4 <network_ready>

080a0d6c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0d6c:	2300      	movs	r3, #0
 80a0d6e:	461a      	mov	r2, r3
 80a0d70:	4619      	mov	r1, r3
 80a0d72:	6840      	ldr	r0, [r0, #4]
 80a0d74:	f7ff bc1e 	b.w	80a05b4 <network_on>

080a0d78 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0d78:	2300      	movs	r3, #0
 80a0d7a:	461a      	mov	r2, r3
 80a0d7c:	4619      	mov	r1, r3
 80a0d7e:	6840      	ldr	r0, [r0, #4]
 80a0d80:	f7ff bc20 	b.w	80a05c4 <network_off>

080a0d84 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0d84:	2200      	movs	r2, #0
 80a0d86:	f081 0101 	eor.w	r1, r1, #1
 80a0d8a:	6840      	ldr	r0, [r0, #4]
 80a0d8c:	f7ff bc22 	b.w	80a05d4 <network_listen>

080a0d90 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0d90:	2200      	movs	r2, #0
 80a0d92:	6840      	ldr	r0, [r0, #4]
 80a0d94:	f7ff bc2e 	b.w	80a05f4 <network_set_listen_timeout>

080a0d98 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0d98:	2200      	movs	r2, #0
 80a0d9a:	4611      	mov	r1, r2
 80a0d9c:	6840      	ldr	r0, [r0, #4]
 80a0d9e:	f7ff bc31 	b.w	80a0604 <network_get_listen_timeout>

080a0da2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0da2:	2200      	movs	r2, #0
 80a0da4:	4611      	mov	r1, r2
 80a0da6:	6840      	ldr	r0, [r0, #4]
 80a0da8:	f7ff bc1c 	b.w	80a05e4 <network_listening>

080a0dac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0dac:	b570      	push	{r4, r5, r6, lr}
 80a0dae:	4616      	mov	r6, r2
 80a0db0:	b08e      	sub	sp, #56	; 0x38
 80a0db2:	4604      	mov	r4, r0
    IPAddress addr;
 80a0db4:	a808      	add	r0, sp, #32
 80a0db6:	f7ff ff7b 	bl	80a0cb0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0dba:	2211      	movs	r2, #17
 80a0dbc:	2100      	movs	r1, #0
 80a0dbe:	a803      	add	r0, sp, #12
 80a0dc0:	f000 fda3 	bl	80a190a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0dc4:	4630      	mov	r0, r6
 80a0dc6:	f000 fdec 	bl	80a19a2 <strlen>
 80a0dca:	2500      	movs	r5, #0
 80a0dcc:	4b0a      	ldr	r3, [pc, #40]	; (80a0df8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0dce:	9500      	str	r5, [sp, #0]
 80a0dd0:	b281      	uxth	r1, r0
 80a0dd2:	685b      	ldr	r3, [r3, #4]
 80a0dd4:	aa03      	add	r2, sp, #12
 80a0dd6:	4630      	mov	r0, r6
 80a0dd8:	f7ff fb80 	bl	80a04dc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0ddc:	b120      	cbz	r0, 80a0de8 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0dde:	4629      	mov	r1, r5
 80a0de0:	4620      	mov	r0, r4
 80a0de2:	f7ff ff85 	bl	80a0cf0 <_ZN9IPAddressC1Em>
 80a0de6:	e003      	b.n	80a0df0 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0de8:	a903      	add	r1, sp, #12
 80a0dea:	4620      	mov	r0, r4
 80a0dec:	f7ff ff6e 	bl	80a0ccc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0df0:	4620      	mov	r0, r4
 80a0df2:	b00e      	add	sp, #56	; 0x38
 80a0df4:	bd70      	pop	{r4, r5, r6, pc}
 80a0df6:	bf00      	nop
 80a0df8:	20000828 	.word	0x20000828

080a0dfc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0dfc:	4b02      	ldr	r3, [pc, #8]	; (80a0e08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0dfe:	4a03      	ldr	r2, [pc, #12]	; (80a0e0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0e00:	601a      	str	r2, [r3, #0]
 80a0e02:	2200      	movs	r2, #0
 80a0e04:	605a      	str	r2, [r3, #4]
 80a0e06:	4770      	bx	lr
 80a0e08:	200003a8 	.word	0x200003a8
 80a0e0c:	080a1b40 	.word	0x080a1b40

080a0e10 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e12:	4606      	mov	r6, r0
 80a0e14:	460d      	mov	r5, r1
 80a0e16:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0e18:	2400      	movs	r4, #0
  while (size--) {
 80a0e1a:	42bd      	cmp	r5, r7
 80a0e1c:	d00c      	beq.n	80a0e38 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0e1e:	6833      	ldr	r3, [r6, #0]
 80a0e20:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0e24:	689b      	ldr	r3, [r3, #8]
 80a0e26:	4630      	mov	r0, r6
 80a0e28:	4798      	blx	r3
     if (chunk>=0)
 80a0e2a:	2800      	cmp	r0, #0
 80a0e2c:	db01      	blt.n	80a0e32 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0e2e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0e30:	e7f3      	b.n	80a0e1a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0e32:	2c00      	cmp	r4, #0
 80a0e34:	bf08      	it	eq
 80a0e36:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0e38:	4620      	mov	r0, r4
 80a0e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e3c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0e3c:	b570      	push	{r4, r5, r6, lr}
 80a0e3e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0e40:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0e42:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0e44:	b149      	cbz	r1, 80a0e5a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0e46:	f000 fdac 	bl	80a19a2 <strlen>
 80a0e4a:	682b      	ldr	r3, [r5, #0]
 80a0e4c:	4602      	mov	r2, r0
 80a0e4e:	4621      	mov	r1, r4
 80a0e50:	4628      	mov	r0, r5
    }
 80a0e52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0e56:	68db      	ldr	r3, [r3, #12]
 80a0e58:	4718      	bx	r3
    }
 80a0e5a:	bd70      	pop	{r4, r5, r6, pc}

080a0e5c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0e5c:	6803      	ldr	r3, [r0, #0]
 80a0e5e:	689b      	ldr	r3, [r3, #8]
 80a0e60:	4718      	bx	r3

080a0e62 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0e62:	2a01      	cmp	r2, #1
 80a0e64:	bf98      	it	ls
 80a0e66:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0e68:	b530      	push	{r4, r5, lr}
 80a0e6a:	460b      	mov	r3, r1
 80a0e6c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0e6e:	2100      	movs	r1, #0
 80a0e70:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0e74:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0e78:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0e7c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0e80:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0e82:	2b09      	cmp	r3, #9
 80a0e84:	bf94      	ite	ls
 80a0e86:	3330      	addls	r3, #48	; 0x30
 80a0e88:	3337      	addhi	r3, #55	; 0x37
 80a0e8a:	b2db      	uxtb	r3, r3
 80a0e8c:	4621      	mov	r1, r4
 80a0e8e:	f804 3901 	strb.w	r3, [r4], #-1
 80a0e92:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0e94:	2d00      	cmp	r5, #0
 80a0e96:	d1ef      	bne.n	80a0e78 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0e98:	f7ff ffd0 	bl	80a0e3c <_ZN5Print5writeEPKc>
}
 80a0e9c:	b00b      	add	sp, #44	; 0x2c
 80a0e9e:	bd30      	pop	{r4, r5, pc}

080a0ea0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0ea0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0ea2:	b922      	cbnz	r2, 80a0eae <_ZN5Print5printEmi+0xe>
 80a0ea4:	6803      	ldr	r3, [r0, #0]
 80a0ea6:	b2c9      	uxtb	r1, r1
 80a0ea8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0eaa:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0eac:	4718      	bx	r3
  else return printNumber(n, base);
 80a0eae:	b2d2      	uxtb	r2, r2
}
 80a0eb0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0eb2:	f7ff bfd6 	b.w	80a0e62 <_ZN5Print11printNumberEmh>

080a0eb6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0eb6:	f7ff bff3 	b.w	80a0ea0 <_ZN5Print5printEmi>

080a0eba <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0eba:	b510      	push	{r4, lr}
 80a0ebc:	4604      	mov	r4, r0
 80a0ebe:	f7ff fbf7 	bl	80a06b0 <_ZNSt14_Function_baseD1Ev>
 80a0ec2:	4620      	mov	r0, r4
 80a0ec4:	bd10      	pop	{r4, pc}
	...

080a0ec8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ec8:	4803      	ldr	r0, [pc, #12]	; (80a0ed8 <_GLOBAL__sub_I_RGB+0x10>)
 80a0eca:	2300      	movs	r3, #0
 80a0ecc:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0ece:	4a03      	ldr	r2, [pc, #12]	; (80a0edc <_GLOBAL__sub_I_RGB+0x14>)
 80a0ed0:	4903      	ldr	r1, [pc, #12]	; (80a0ee0 <_GLOBAL__sub_I_RGB+0x18>)
 80a0ed2:	f000 bbaf 	b.w	80a1634 <__aeabi_atexit>
 80a0ed6:	bf00      	nop
 80a0ed8:	200003b0 	.word	0x200003b0
 80a0edc:	20000380 	.word	0x20000380
 80a0ee0:	080a0ebb 	.word	0x080a0ebb

080a0ee4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0ee4:	4770      	bx	lr

080a0ee6 <_ZN8SPIClassD0Ev>:
 80a0ee6:	b510      	push	{r4, lr}
 80a0ee8:	4604      	mov	r4, r0
 80a0eea:	2110      	movs	r1, #16
 80a0eec:	f000 fba7 	bl	80a163e <_ZdlPvj>
 80a0ef0:	4620      	mov	r0, r4
 80a0ef2:	bd10      	pop	{r4, pc}

080a0ef4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0ef4:	b570      	push	{r4, r5, r6, lr}
 80a0ef6:	4604      	mov	r4, r0
 80a0ef8:	460e      	mov	r6, r1
 80a0efa:	4b07      	ldr	r3, [pc, #28]	; (80a0f18 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0efc:	2500      	movs	r5, #0
 80a0efe:	6003      	str	r3, [r0, #0]
 80a0f00:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0f04:	f7ff f9f0 	bl	80a02e8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0f08:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0f0a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0f0c:	f7ff fa66 	bl	80a03dc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0f10:	60a5      	str	r5, [r4, #8]
}
 80a0f12:	4620      	mov	r0, r4
 80a0f14:	bd70      	pop	{r4, r5, r6, pc}
 80a0f16:	bf00      	nop
 80a0f18:	080a1b74 	.word	0x080a1b74

080a0f1c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0f1c:	7900      	ldrb	r0, [r0, #4]
 80a0f1e:	f7ff ba65 	b.w	80a03ec <HAL_SPI_Is_Enabled>

080a0f22 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0f22:	b510      	push	{r4, lr}
 80a0f24:	4604      	mov	r4, r0
{
	free(buffer);
 80a0f26:	6800      	ldr	r0, [r0, #0]
 80a0f28:	f7ff fb7c 	bl	80a0624 <free>
}
 80a0f2c:	4620      	mov	r0, r4
 80a0f2e:	bd10      	pop	{r4, pc}

080a0f30 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0f30:	b510      	push	{r4, lr}
 80a0f32:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0f34:	6800      	ldr	r0, [r0, #0]
 80a0f36:	b108      	cbz	r0, 80a0f3c <_ZN6String10invalidateEv+0xc>
 80a0f38:	f7ff fb74 	bl	80a0624 <free>
	buffer = NULL;
 80a0f3c:	2300      	movs	r3, #0
 80a0f3e:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0f40:	60a3      	str	r3, [r4, #8]
 80a0f42:	6063      	str	r3, [r4, #4]
 80a0f44:	bd10      	pop	{r4, pc}

080a0f46 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0f46:	b538      	push	{r3, r4, r5, lr}
 80a0f48:	4604      	mov	r4, r0
 80a0f4a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0f4c:	6800      	ldr	r0, [r0, #0]
 80a0f4e:	3101      	adds	r1, #1
 80a0f50:	f7ff fb70 	bl	80a0634 <realloc>
	if (newbuffer) {
 80a0f54:	b110      	cbz	r0, 80a0f5c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0f56:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0f5a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0f5c:	bd38      	pop	{r3, r4, r5, pc}

080a0f5e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0f5e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0f60:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0f62:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0f64:	b113      	cbz	r3, 80a0f6c <_ZN6String7reserveEj+0xe>
 80a0f66:	6843      	ldr	r3, [r0, #4]
 80a0f68:	428b      	cmp	r3, r1
 80a0f6a:	d207      	bcs.n	80a0f7c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0f6c:	4620      	mov	r0, r4
 80a0f6e:	f7ff ffea 	bl	80a0f46 <_ZN6String12changeBufferEj>
 80a0f72:	b120      	cbz	r0, 80a0f7e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0f74:	68a3      	ldr	r3, [r4, #8]
 80a0f76:	b90b      	cbnz	r3, 80a0f7c <_ZN6String7reserveEj+0x1e>
 80a0f78:	6822      	ldr	r2, [r4, #0]
 80a0f7a:	7013      	strb	r3, [r2, #0]
 80a0f7c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0f7e:	bd10      	pop	{r4, pc}

080a0f80 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0f80:	b570      	push	{r4, r5, r6, lr}
 80a0f82:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0f84:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0f86:	4604      	mov	r4, r0
 80a0f88:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0f8a:	f7ff ffe8 	bl	80a0f5e <_ZN6String7reserveEj>
 80a0f8e:	b918      	cbnz	r0, 80a0f98 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0f90:	4620      	mov	r0, r4
 80a0f92:	f7ff ffcd 	bl	80a0f30 <_ZN6String10invalidateEv>
		return *this;
 80a0f96:	e009      	b.n	80a0fac <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0f98:	462a      	mov	r2, r5
 80a0f9a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0f9c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0f9e:	6820      	ldr	r0, [r4, #0]
 80a0fa0:	f000 fca8 	bl	80a18f4 <memcpy>
	buffer[len] = 0;
 80a0fa4:	6822      	ldr	r2, [r4, #0]
 80a0fa6:	68a3      	ldr	r3, [r4, #8]
 80a0fa8:	2100      	movs	r1, #0
 80a0faa:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0fac:	4620      	mov	r0, r4
 80a0fae:	bd70      	pop	{r4, r5, r6, pc}

080a0fb0 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0fb0:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0fb2:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0fb4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0fb6:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0fb8:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0fba:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0fbc:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0fbe:	460d      	mov	r5, r1
 80a0fc0:	b139      	cbz	r1, 80a0fd2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0fc2:	4608      	mov	r0, r1
 80a0fc4:	f000 fced 	bl	80a19a2 <strlen>
 80a0fc8:	4629      	mov	r1, r5
 80a0fca:	4602      	mov	r2, r0
 80a0fcc:	4620      	mov	r0, r4
 80a0fce:	f7ff ffd7 	bl	80a0f80 <_ZN6String4copyEPKcj>
}
 80a0fd2:	4620      	mov	r0, r4
 80a0fd4:	bd38      	pop	{r3, r4, r5, pc}

080a0fd6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a0fd6:	b538      	push	{r3, r4, r5, lr}
 80a0fd8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a0fda:	460c      	mov	r4, r1
 80a0fdc:	b141      	cbz	r1, 80a0ff0 <_ZN6StringaSEPKc+0x1a>
 80a0fde:	4608      	mov	r0, r1
 80a0fe0:	f000 fcdf 	bl	80a19a2 <strlen>
 80a0fe4:	4621      	mov	r1, r4
 80a0fe6:	4602      	mov	r2, r0
 80a0fe8:	4628      	mov	r0, r5
 80a0fea:	f7ff ffc9 	bl	80a0f80 <_ZN6String4copyEPKcj>
 80a0fee:	e001      	b.n	80a0ff4 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a0ff0:	f7ff ff9e 	bl	80a0f30 <_ZN6String10invalidateEv>

	return *this;
}
 80a0ff4:	4628      	mov	r0, r5
 80a0ff6:	bd38      	pop	{r3, r4, r5, pc}

080a0ff8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0ffc:	4b03      	ldr	r3, [pc, #12]	; (80a100c <_GLOBAL__sub_I_System+0x14>)
 80a0ffe:	2000      	movs	r0, #0
 80a1000:	7018      	strb	r0, [r3, #0]
 80a1002:	8058      	strh	r0, [r3, #2]
 80a1004:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1006:	f7ff ba71 	b.w	80a04ec <set_system_mode>
 80a100a:	bf00      	nop
 80a100c:	200003c0 	.word	0x200003c0

080a1010 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1010:	4b02      	ldr	r3, [pc, #8]	; (80a101c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1012:	681a      	ldr	r2, [r3, #0]
 80a1014:	4b02      	ldr	r3, [pc, #8]	; (80a1020 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1016:	601a      	str	r2, [r3, #0]
 80a1018:	4770      	bx	lr
 80a101a:	bf00      	nop
 80a101c:	20000318 	.word	0x20000318
 80a1020:	200003c8 	.word	0x200003c8

080a1024 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1024:	4770      	bx	lr

080a1026 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1026:	7441      	strb	r1, [r0, #17]
 80a1028:	4770      	bx	lr

080a102a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a102a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a102c:	7c00      	ldrb	r0, [r0, #16]
 80a102e:	f7ff fa1d 	bl	80a046c <HAL_USART_Available_Data_For_Write>
}
 80a1032:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1036:	bd08      	pop	{r3, pc}

080a1038 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1038:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a103a:	7c00      	ldrb	r0, [r0, #16]
 80a103c:	f7ff f9ee 	bl	80a041c <HAL_USART_Available_Data>
}
 80a1040:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1044:	bd08      	pop	{r3, pc}

080a1046 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1046:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1048:	7c00      	ldrb	r0, [r0, #16]
 80a104a:	f7ff f9f7 	bl	80a043c <HAL_USART_Peek_Data>
}
 80a104e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1052:	bf28      	it	cs
 80a1054:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1058:	bd08      	pop	{r3, pc}

080a105a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a105a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a105c:	7c00      	ldrb	r0, [r0, #16]
 80a105e:	f7ff f9e5 	bl	80a042c <HAL_USART_Read_Data>
}
 80a1062:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1066:	bf28      	it	cs
 80a1068:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a106c:	bd08      	pop	{r3, pc}

080a106e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a106e:	7c00      	ldrb	r0, [r0, #16]
 80a1070:	f7ff b9ec 	b.w	80a044c <HAL_USART_Flush_Data>

080a1074 <_ZN11USARTSerialD0Ev>:
 80a1074:	b510      	push	{r4, lr}
 80a1076:	4604      	mov	r4, r0
 80a1078:	2114      	movs	r1, #20
 80a107a:	f000 fae0 	bl	80a163e <_ZdlPvj>
 80a107e:	4620      	mov	r0, r4
 80a1080:	bd10      	pop	{r4, pc}

080a1082 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1082:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1084:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1086:	4604      	mov	r4, r0
 80a1088:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a108a:	b925      	cbnz	r5, 80a1096 <_ZN11USARTSerial5writeEh+0x14>
 80a108c:	7c00      	ldrb	r0, [r0, #16]
 80a108e:	f7ff f9ed 	bl	80a046c <HAL_USART_Available_Data_For_Write>
 80a1092:	2800      	cmp	r0, #0
 80a1094:	dd05      	ble.n	80a10a2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1096:	4631      	mov	r1, r6
 80a1098:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a109a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a109e:	f7ff b9b5 	b.w	80a040c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a10a2:	4628      	mov	r0, r5
 80a10a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a10a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a10a8:	b510      	push	{r4, lr}
 80a10aa:	4604      	mov	r4, r0
 80a10ac:	4608      	mov	r0, r1
 80a10ae:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a10b0:	2200      	movs	r2, #0
 80a10b2:	6062      	str	r2, [r4, #4]
 80a10b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a10b8:	60a2      	str	r2, [r4, #8]
 80a10ba:	4a05      	ldr	r2, [pc, #20]	; (80a10d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a10bc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a10be:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a10c0:	2201      	movs	r2, #1
 80a10c2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a10c4:	461a      	mov	r2, r3
 80a10c6:	f7ff f999 	bl	80a03fc <HAL_USART_Init>
}
 80a10ca:	4620      	mov	r0, r4
 80a10cc:	bd10      	pop	{r4, pc}
 80a10ce:	bf00      	nop
 80a10d0:	080a1bb0 	.word	0x080a1bb0

080a10d4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a10d4:	7c00      	ldrb	r0, [r0, #16]
 80a10d6:	f7ff b9c1 	b.w	80a045c <HAL_USART_Is_Enabled>
	...

080a10dc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a10dc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a10de:	4d0c      	ldr	r5, [pc, #48]	; (80a1110 <_Z22__fetch_global_Serial1v+0x34>)
 80a10e0:	6829      	ldr	r1, [r5, #0]
 80a10e2:	f011 0401 	ands.w	r4, r1, #1
 80a10e6:	d111      	bne.n	80a110c <_Z22__fetch_global_Serial1v+0x30>
 80a10e8:	4628      	mov	r0, r5
 80a10ea:	f7fe ffda 	bl	80a00a2 <__cxa_guard_acquire>
 80a10ee:	b168      	cbz	r0, 80a110c <_Z22__fetch_global_Serial1v+0x30>
 80a10f0:	4a08      	ldr	r2, [pc, #32]	; (80a1114 <_Z22__fetch_global_Serial1v+0x38>)
 80a10f2:	4621      	mov	r1, r4
 80a10f4:	4b08      	ldr	r3, [pc, #32]	; (80a1118 <_Z22__fetch_global_Serial1v+0x3c>)
 80a10f6:	4809      	ldr	r0, [pc, #36]	; (80a111c <_Z22__fetch_global_Serial1v+0x40>)
 80a10f8:	f7ff ffd6 	bl	80a10a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a10fc:	4628      	mov	r0, r5
 80a10fe:	f7fe ffd5 	bl	80a00ac <__cxa_guard_release>
 80a1102:	4a07      	ldr	r2, [pc, #28]	; (80a1120 <_Z22__fetch_global_Serial1v+0x44>)
 80a1104:	4907      	ldr	r1, [pc, #28]	; (80a1124 <_Z22__fetch_global_Serial1v+0x48>)
 80a1106:	4805      	ldr	r0, [pc, #20]	; (80a111c <_Z22__fetch_global_Serial1v+0x40>)
 80a1108:	f000 fa94 	bl	80a1634 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a110c:	4803      	ldr	r0, [pc, #12]	; (80a111c <_Z22__fetch_global_Serial1v+0x40>)
 80a110e:	bd38      	pop	{r3, r4, r5, pc}
 80a1110:	20000464 	.word	0x20000464
 80a1114:	20000468 	.word	0x20000468
 80a1118:	200003e0 	.word	0x200003e0
 80a111c:	200003cc 	.word	0x200003cc
 80a1120:	20000380 	.word	0x20000380
 80a1124:	080a1025 	.word	0x080a1025

080a1128 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1128:	7441      	strb	r1, [r0, #17]
 80a112a:	4770      	bx	lr

080a112c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a112c:	4770      	bx	lr

080a112e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a112e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1130:	2100      	movs	r1, #0
 80a1132:	7c00      	ldrb	r0, [r0, #16]
 80a1134:	f7ff f9ba 	bl	80a04ac <HAL_USB_USART_Receive_Data>
}
 80a1138:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a113c:	bf28      	it	cs
 80a113e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1142:	bd08      	pop	{r3, pc}

080a1144 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1144:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1146:	2101      	movs	r1, #1
 80a1148:	7c00      	ldrb	r0, [r0, #16]
 80a114a:	f7ff f9af 	bl	80a04ac <HAL_USB_USART_Receive_Data>
}
 80a114e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1152:	bf28      	it	cs
 80a1154:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1158:	bd08      	pop	{r3, pc}

080a115a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a115a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a115c:	7c00      	ldrb	r0, [r0, #16]
 80a115e:	f7ff f99d 	bl	80a049c <HAL_USB_USART_Available_Data_For_Write>
}
 80a1162:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1166:	bd08      	pop	{r3, pc}

080a1168 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1168:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a116a:	7c00      	ldrb	r0, [r0, #16]
 80a116c:	f7ff f98e 	bl	80a048c <HAL_USB_USART_Available_Data>
}
 80a1170:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1174:	bd08      	pop	{r3, pc}

080a1176 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1176:	7c00      	ldrb	r0, [r0, #16]
 80a1178:	f7ff b9a8 	b.w	80a04cc <HAL_USB_USART_Flush_Data>

080a117c <_ZN9USBSerialD0Ev>:
 80a117c:	b510      	push	{r4, lr}
 80a117e:	4604      	mov	r4, r0
 80a1180:	2114      	movs	r1, #20
 80a1182:	f000 fa5c 	bl	80a163e <_ZdlPvj>
 80a1186:	4620      	mov	r0, r4
 80a1188:	bd10      	pop	{r4, pc}

080a118a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a118a:	b538      	push	{r3, r4, r5, lr}
 80a118c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a118e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1190:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1192:	f7ff f983 	bl	80a049c <HAL_USB_USART_Available_Data_For_Write>
 80a1196:	2800      	cmp	r0, #0
 80a1198:	dc01      	bgt.n	80a119e <_ZN9USBSerial5writeEh+0x14>
 80a119a:	7c60      	ldrb	r0, [r4, #17]
 80a119c:	b128      	cbz	r0, 80a11aa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a119e:	4629      	mov	r1, r5
 80a11a0:	7c20      	ldrb	r0, [r4, #16]
 80a11a2:	f7ff f98b 	bl	80a04bc <HAL_USB_USART_Send_Data>
 80a11a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a11aa:	bd38      	pop	{r3, r4, r5, pc}

080a11ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a11ac:	b510      	push	{r4, lr}
 80a11ae:	4604      	mov	r4, r0
 80a11b0:	2300      	movs	r3, #0
 80a11b2:	6063      	str	r3, [r4, #4]
 80a11b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a11b8:	60a3      	str	r3, [r4, #8]
 80a11ba:	4b05      	ldr	r3, [pc, #20]	; (80a11d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a11bc:	4608      	mov	r0, r1
 80a11be:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a11c0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a11c2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a11c4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a11c6:	4611      	mov	r1, r2
 80a11c8:	f7ff f958 	bl	80a047c <HAL_USB_USART_Init>
}
 80a11cc:	4620      	mov	r0, r4
 80a11ce:	bd10      	pop	{r4, pc}
 80a11d0:	080a1be0 	.word	0x080a1be0

080a11d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a11d4:	b510      	push	{r4, lr}
 80a11d6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a11d8:	2214      	movs	r2, #20
 80a11da:	2100      	movs	r1, #0
 80a11dc:	f000 fb95 	bl	80a190a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a11e0:	4b05      	ldr	r3, [pc, #20]	; (80a11f8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a11e2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a11e4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a11e6:	4b05      	ldr	r3, [pc, #20]	; (80a11fc <_Z19acquireSerialBufferv+0x28>)
 80a11e8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a11ea:	f240 1301 	movw	r3, #257	; 0x101
 80a11ee:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a11f0:	2381      	movs	r3, #129	; 0x81
 80a11f2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a11f4:	bd10      	pop	{r4, pc}
 80a11f6:	bf00      	nop
 80a11f8:	20000571 	.word	0x20000571
 80a11fc:	200004f0 	.word	0x200004f0

080a1200 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1200:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1202:	4d0e      	ldr	r5, [pc, #56]	; (80a123c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1204:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1206:	a801      	add	r0, sp, #4
 80a1208:	f7ff ffe4 	bl	80a11d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a120c:	6829      	ldr	r1, [r5, #0]
 80a120e:	f011 0401 	ands.w	r4, r1, #1
 80a1212:	d110      	bne.n	80a1236 <_Z16_fetch_usbserialv+0x36>
 80a1214:	4628      	mov	r0, r5
 80a1216:	f7fe ff44 	bl	80a00a2 <__cxa_guard_acquire>
 80a121a:	b160      	cbz	r0, 80a1236 <_Z16_fetch_usbserialv+0x36>
 80a121c:	aa01      	add	r2, sp, #4
 80a121e:	4621      	mov	r1, r4
 80a1220:	4807      	ldr	r0, [pc, #28]	; (80a1240 <_Z16_fetch_usbserialv+0x40>)
 80a1222:	f7ff ffc3 	bl	80a11ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1226:	4628      	mov	r0, r5
 80a1228:	f7fe ff40 	bl	80a00ac <__cxa_guard_release>
 80a122c:	4a05      	ldr	r2, [pc, #20]	; (80a1244 <_Z16_fetch_usbserialv+0x44>)
 80a122e:	4906      	ldr	r1, [pc, #24]	; (80a1248 <_Z16_fetch_usbserialv+0x48>)
 80a1230:	4803      	ldr	r0, [pc, #12]	; (80a1240 <_Z16_fetch_usbserialv+0x40>)
 80a1232:	f000 f9ff 	bl	80a1634 <__aeabi_atexit>
	return _usbserial;
}
 80a1236:	4802      	ldr	r0, [pc, #8]	; (80a1240 <_Z16_fetch_usbserialv+0x40>)
 80a1238:	b007      	add	sp, #28
 80a123a:	bd30      	pop	{r4, r5, pc}
 80a123c:	200004ec 	.word	0x200004ec
 80a1240:	20000674 	.word	0x20000674
 80a1244:	20000380 	.word	0x20000380
 80a1248:	080a112d 	.word	0x080a112d

080a124c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a124c:	b510      	push	{r4, lr}
 80a124e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1250:	2214      	movs	r2, #20
 80a1252:	2100      	movs	r1, #0
 80a1254:	f000 fb59 	bl	80a190a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1258:	4b05      	ldr	r3, [pc, #20]	; (80a1270 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a125a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a125c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a125e:	4b05      	ldr	r3, [pc, #20]	; (80a1274 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1260:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1262:	f240 1301 	movw	r3, #257	; 0x101
 80a1266:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1268:	2381      	movs	r3, #129	; 0x81
 80a126a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a126c:	bd10      	pop	{r4, pc}
 80a126e:	bf00      	nop
 80a1270:	20000724 	.word	0x20000724
 80a1274:	2000068c 	.word	0x2000068c

080a1278 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1278:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a127a:	4c0e      	ldr	r4, [pc, #56]	; (80a12b4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a127c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a127e:	a801      	add	r0, sp, #4
 80a1280:	f7ff ffe4 	bl	80a124c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1284:	6823      	ldr	r3, [r4, #0]
 80a1286:	07db      	lsls	r3, r3, #31
 80a1288:	d410      	bmi.n	80a12ac <_Z17_fetch_usbserial1v+0x34>
 80a128a:	4620      	mov	r0, r4
 80a128c:	f7fe ff09 	bl	80a00a2 <__cxa_guard_acquire>
 80a1290:	b160      	cbz	r0, 80a12ac <_Z17_fetch_usbserial1v+0x34>
 80a1292:	aa01      	add	r2, sp, #4
 80a1294:	2101      	movs	r1, #1
 80a1296:	4808      	ldr	r0, [pc, #32]	; (80a12b8 <_Z17_fetch_usbserial1v+0x40>)
 80a1298:	f7ff ff88 	bl	80a11ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a129c:	4620      	mov	r0, r4
 80a129e:	f7fe ff05 	bl	80a00ac <__cxa_guard_release>
 80a12a2:	4a06      	ldr	r2, [pc, #24]	; (80a12bc <_Z17_fetch_usbserial1v+0x44>)
 80a12a4:	4906      	ldr	r1, [pc, #24]	; (80a12c0 <_Z17_fetch_usbserial1v+0x48>)
 80a12a6:	4804      	ldr	r0, [pc, #16]	; (80a12b8 <_Z17_fetch_usbserial1v+0x40>)
 80a12a8:	f000 f9c4 	bl	80a1634 <__aeabi_atexit>
  return _usbserial1;
}
 80a12ac:	4802      	ldr	r0, [pc, #8]	; (80a12b8 <_Z17_fetch_usbserial1v+0x40>)
 80a12ae:	b006      	add	sp, #24
 80a12b0:	bd10      	pop	{r4, pc}
 80a12b2:	bf00      	nop
 80a12b4:	20000688 	.word	0x20000688
 80a12b8:	20000710 	.word	0x20000710
 80a12bc:	20000380 	.word	0x20000380
 80a12c0:	080a112d 	.word	0x080a112d

080a12c4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a12c4:	2200      	movs	r2, #0
 80a12c6:	4611      	mov	r1, r2
 80a12c8:	6840      	ldr	r0, [r0, #4]
 80a12ca:	f7ff b96b 	b.w	80a05a4 <network_ready>

080a12ce <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a12ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a12d0:	4616      	mov	r6, r2
 80a12d2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a12d4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a12d6:	460f      	mov	r7, r1
 80a12d8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a12da:	2100      	movs	r1, #0
 80a12dc:	a803      	add	r0, sp, #12
 80a12de:	f000 fb14 	bl	80a190a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a12e2:	4630      	mov	r0, r6
 80a12e4:	f000 fb5d 	bl	80a19a2 <strlen>
 80a12e8:	2500      	movs	r5, #0
 80a12ea:	9500      	str	r5, [sp, #0]
 80a12ec:	b281      	uxth	r1, r0
 80a12ee:	687b      	ldr	r3, [r7, #4]
 80a12f0:	aa03      	add	r2, sp, #12
 80a12f2:	4630      	mov	r0, r6
 80a12f4:	f7ff f8f2 	bl	80a04dc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a12f8:	b120      	cbz	r0, 80a1304 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a12fa:	4629      	mov	r1, r5
 80a12fc:	4620      	mov	r0, r4
 80a12fe:	f7ff fcf7 	bl	80a0cf0 <_ZN9IPAddressC1Em>
 80a1302:	e003      	b.n	80a130c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1304:	a903      	add	r1, sp, #12
 80a1306:	4620      	mov	r0, r4
 80a1308:	f7ff fce0 	bl	80a0ccc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a130c:	4620      	mov	r0, r4
 80a130e:	b009      	add	sp, #36	; 0x24
 80a1310:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1312 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1312:	2200      	movs	r2, #0
 80a1314:	4611      	mov	r1, r2
 80a1316:	6840      	ldr	r0, [r0, #4]
 80a1318:	f7ff b964 	b.w	80a05e4 <network_listening>

080a131c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a131c:	2200      	movs	r2, #0
 80a131e:	4611      	mov	r1, r2
 80a1320:	6840      	ldr	r0, [r0, #4]
 80a1322:	f7ff b96f 	b.w	80a0604 <network_get_listen_timeout>

080a1326 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1326:	2200      	movs	r2, #0
 80a1328:	6840      	ldr	r0, [r0, #4]
 80a132a:	f7ff b963 	b.w	80a05f4 <network_set_listen_timeout>

080a132e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a132e:	2200      	movs	r2, #0
 80a1330:	f081 0101 	eor.w	r1, r1, #1
 80a1334:	6840      	ldr	r0, [r0, #4]
 80a1336:	f7ff b94d 	b.w	80a05d4 <network_listen>

080a133a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a133a:	2300      	movs	r3, #0
 80a133c:	461a      	mov	r2, r3
 80a133e:	4619      	mov	r1, r3
 80a1340:	6840      	ldr	r0, [r0, #4]
 80a1342:	f7ff b93f 	b.w	80a05c4 <network_off>

080a1346 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1346:	2300      	movs	r3, #0
 80a1348:	461a      	mov	r2, r3
 80a134a:	4619      	mov	r1, r3
 80a134c:	6840      	ldr	r0, [r0, #4]
 80a134e:	f7ff b931 	b.w	80a05b4 <network_on>

080a1352 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1352:	2200      	movs	r2, #0
 80a1354:	4611      	mov	r1, r2
 80a1356:	6840      	ldr	r0, [r0, #4]
 80a1358:	f7ff b914 	b.w	80a0584 <network_connecting>

080a135c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a135c:	2200      	movs	r2, #0
 80a135e:	2102      	movs	r1, #2
 80a1360:	6840      	ldr	r0, [r0, #4]
 80a1362:	f7ff b917 	b.w	80a0594 <network_disconnect>

080a1366 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1366:	2300      	movs	r3, #0
 80a1368:	461a      	mov	r2, r3
 80a136a:	6840      	ldr	r0, [r0, #4]
 80a136c:	f7ff b902 	b.w	80a0574 <network_connect>

080a1370 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1370:	4b02      	ldr	r3, [pc, #8]	; (80a137c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1372:	2204      	movs	r2, #4
 80a1374:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1376:	4a02      	ldr	r2, [pc, #8]	; (80a1380 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1378:	601a      	str	r2, [r3, #0]
 80a137a:	4770      	bx	lr
 80a137c:	20000828 	.word	0x20000828
 80a1380:	080a1c10 	.word	0x080a1c10

080a1384 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1384:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1386:	4b14      	ldr	r3, [pc, #80]	; (80a13d8 <serialEventRun+0x54>)
 80a1388:	b133      	cbz	r3, 80a1398 <serialEventRun+0x14>
 80a138a:	f7ff ff39 	bl	80a1200 <_Z16_fetch_usbserialv>
 80a138e:	6803      	ldr	r3, [r0, #0]
 80a1390:	691b      	ldr	r3, [r3, #16]
 80a1392:	4798      	blx	r3
 80a1394:	2800      	cmp	r0, #0
 80a1396:	dc16      	bgt.n	80a13c6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1398:	4b10      	ldr	r3, [pc, #64]	; (80a13dc <serialEventRun+0x58>)
 80a139a:	b133      	cbz	r3, 80a13aa <serialEventRun+0x26>
 80a139c:	f7ff fe9e 	bl	80a10dc <_Z22__fetch_global_Serial1v>
 80a13a0:	6803      	ldr	r3, [r0, #0]
 80a13a2:	691b      	ldr	r3, [r3, #16]
 80a13a4:	4798      	blx	r3
 80a13a6:	2800      	cmp	r0, #0
 80a13a8:	dc10      	bgt.n	80a13cc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a13aa:	4b0d      	ldr	r3, [pc, #52]	; (80a13e0 <serialEventRun+0x5c>)
 80a13ac:	b10b      	cbz	r3, 80a13b2 <serialEventRun+0x2e>
 80a13ae:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a13b2:	4b0c      	ldr	r3, [pc, #48]	; (80a13e4 <serialEventRun+0x60>)
 80a13b4:	b17b      	cbz	r3, 80a13d6 <serialEventRun+0x52>
 80a13b6:	f7ff ff5f 	bl	80a1278 <_Z17_fetch_usbserial1v>
 80a13ba:	6803      	ldr	r3, [r0, #0]
 80a13bc:	691b      	ldr	r3, [r3, #16]
 80a13be:	4798      	blx	r3
 80a13c0:	2800      	cmp	r0, #0
 80a13c2:	dc06      	bgt.n	80a13d2 <serialEventRun+0x4e>
 80a13c4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a13c6:	f3af 8000 	nop.w
 80a13ca:	e7e5      	b.n	80a1398 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a13cc:	f3af 8000 	nop.w
 80a13d0:	e7eb      	b.n	80a13aa <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a13d2:	f3af 8000 	nop.w
 80a13d6:	bd08      	pop	{r3, pc}
	...

080a13e8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a13e8:	b508      	push	{r3, lr}
	serialEventRun();
 80a13ea:	f7ff ffcb 	bl	80a1384 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a13ee:	f7fe ff8b 	bl	80a0308 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a13f2:	4b01      	ldr	r3, [pc, #4]	; (80a13f8 <_post_loop+0x10>)
 80a13f4:	6018      	str	r0, [r3, #0]
 80a13f6:	bd08      	pop	{r3, pc}
 80a13f8:	20000838 	.word	0x20000838

080a13fc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a13fc:	4802      	ldr	r0, [pc, #8]	; (80a1408 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a13fe:	4a03      	ldr	r2, [pc, #12]	; (80a140c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1400:	4903      	ldr	r1, [pc, #12]	; (80a1410 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1402:	1a12      	subs	r2, r2, r0
 80a1404:	f000 ba76 	b.w	80a18f4 <memcpy>
 80a1408:	40024000 	.word	0x40024000
 80a140c:	40024004 	.word	0x40024004
 80a1410:	080a1ce0 	.word	0x080a1ce0

080a1414 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1414:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1416:	2300      	movs	r3, #0
 80a1418:	9300      	str	r3, [sp, #0]
 80a141a:	461a      	mov	r2, r3
 80a141c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1420:	f7ff f88e 	bl	80a0540 <system_ctrl_set_result>
}
 80a1424:	b003      	add	sp, #12
 80a1426:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a142c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a142c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a142e:	8843      	ldrh	r3, [r0, #2]
 80a1430:	2b0a      	cmp	r3, #10
 80a1432:	d008      	beq.n	80a1446 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1434:	2b50      	cmp	r3, #80	; 0x50
 80a1436:	d109      	bne.n	80a144c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1438:	4b09      	ldr	r3, [pc, #36]	; (80a1460 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a143a:	681b      	ldr	r3, [r3, #0]
 80a143c:	b13b      	cbz	r3, 80a144e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a143e:	b003      	add	sp, #12
 80a1440:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1444:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1446:	f7ff ffe5 	bl	80a1414 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a144a:	e006      	b.n	80a145a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a144c:	2300      	movs	r3, #0
 80a144e:	9300      	str	r3, [sp, #0]
 80a1450:	461a      	mov	r2, r3
 80a1452:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1456:	f7ff f873 	bl	80a0540 <system_ctrl_set_result>
        break;
    }
}
 80a145a:	b003      	add	sp, #12
 80a145c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1460:	20000830 	.word	0x20000830

080a1464 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1464:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1466:	4c10      	ldr	r4, [pc, #64]	; (80a14a8 <module_user_init_hook+0x44>)
 80a1468:	4d10      	ldr	r5, [pc, #64]	; (80a14ac <module_user_init_hook+0x48>)
 80a146a:	6823      	ldr	r3, [r4, #0]
 80a146c:	42ab      	cmp	r3, r5
 80a146e:	4b10      	ldr	r3, [pc, #64]	; (80a14b0 <module_user_init_hook+0x4c>)
 80a1470:	bf0c      	ite	eq
 80a1472:	2201      	moveq	r2, #1
 80a1474:	2200      	movne	r2, #0
 80a1476:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1478:	d002      	beq.n	80a1480 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a147a:	f7ff ffbf 	bl	80a13fc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a147e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1480:	f7fe ff3a 	bl	80a02f8 <HAL_RNG_GetRandomNumber>
 80a1484:	4604      	mov	r4, r0
    srand(seed);
 80a1486:	f000 fa49 	bl	80a191c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a148a:	4b0a      	ldr	r3, [pc, #40]	; (80a14b4 <module_user_init_hook+0x50>)
 80a148c:	b113      	cbz	r3, 80a1494 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a148e:	4620      	mov	r0, r4
 80a1490:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1494:	2100      	movs	r1, #0
 80a1496:	4807      	ldr	r0, [pc, #28]	; (80a14b4 <module_user_init_hook+0x50>)
 80a1498:	f7ff f864 	bl	80a0564 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a149c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a14a0:	2100      	movs	r1, #0
 80a14a2:	4805      	ldr	r0, [pc, #20]	; (80a14b8 <module_user_init_hook+0x54>)
 80a14a4:	f7ff b842 	b.w	80a052c <system_ctrl_set_app_request_handler>
 80a14a8:	40024000 	.word	0x40024000
 80a14ac:	9a271c1e 	.word	0x9a271c1e
 80a14b0:	20000834 	.word	0x20000834
 80a14b4:	00000000 	.word	0x00000000
 80a14b8:	080a142d 	.word	0x080a142d

080a14bc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a14bc:	b510      	push	{r4, lr}
 80a14be:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a14c0:	480f      	ldr	r0, [pc, #60]	; (80a1500 <pinAvailable+0x44>)
 80a14c2:	f7ff fd2b 	bl	80a0f1c <_ZN8SPIClass9isEnabledEv>
 80a14c6:	b128      	cbz	r0, 80a14d4 <pinAvailable+0x18>
 80a14c8:	f1a4 030d 	sub.w	r3, r4, #13
 80a14cc:	2b02      	cmp	r3, #2
 80a14ce:	d801      	bhi.n	80a14d4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a14d0:	2000      	movs	r0, #0
 80a14d2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a14d4:	f000 f854 	bl	80a1580 <_Z19__fetch_global_Wirev>
 80a14d8:	f7ff fbc4 	bl	80a0c64 <_ZN7TwoWire9isEnabledEv>
 80a14dc:	b108      	cbz	r0, 80a14e2 <pinAvailable+0x26>
 80a14de:	2c01      	cmp	r4, #1
 80a14e0:	d9f6      	bls.n	80a14d0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a14e2:	f7ff fdfb 	bl	80a10dc <_Z22__fetch_global_Serial1v>
 80a14e6:	f7ff fdf5 	bl	80a10d4 <_ZN11USARTSerial9isEnabledEv>
 80a14ea:	b118      	cbz	r0, 80a14f4 <pinAvailable+0x38>
 80a14ec:	f1a4 0312 	sub.w	r3, r4, #18
 80a14f0:	2b01      	cmp	r3, #1
 80a14f2:	d9ed      	bls.n	80a14d0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a14f4:	2c17      	cmp	r4, #23
 80a14f6:	bf8c      	ite	hi
 80a14f8:	2000      	movhi	r0, #0
 80a14fa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a14fc:	bd10      	pop	{r4, pc}
 80a14fe:	bf00      	nop
 80a1500:	2000086c 	.word	0x2000086c

080a1504 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1504:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1506:	b538      	push	{r3, r4, r5, lr}
 80a1508:	4604      	mov	r4, r0
 80a150a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a150c:	d80a      	bhi.n	80a1524 <pinMode+0x20>
 80a150e:	29ff      	cmp	r1, #255	; 0xff
 80a1510:	d008      	beq.n	80a1524 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1512:	f7ff ffd3 	bl	80a14bc <pinAvailable>
 80a1516:	b128      	cbz	r0, 80a1524 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1518:	4629      	mov	r1, r5
 80a151a:	4620      	mov	r0, r4
}
 80a151c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1520:	f7fe bf02 	b.w	80a0328 <HAL_Pin_Mode>
 80a1524:	bd38      	pop	{r3, r4, r5, pc}

080a1526 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1526:	b538      	push	{r3, r4, r5, lr}
 80a1528:	4604      	mov	r4, r0
 80a152a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a152c:	f7fe ff04 	bl	80a0338 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1530:	28ff      	cmp	r0, #255	; 0xff
 80a1532:	d010      	beq.n	80a1556 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1534:	2806      	cmp	r0, #6
 80a1536:	d804      	bhi.n	80a1542 <digitalWrite+0x1c>
 80a1538:	234d      	movs	r3, #77	; 0x4d
 80a153a:	fa23 f000 	lsr.w	r0, r3, r0
 80a153e:	07c3      	lsls	r3, r0, #31
 80a1540:	d409      	bmi.n	80a1556 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1542:	4620      	mov	r0, r4
 80a1544:	f7ff ffba 	bl	80a14bc <pinAvailable>
 80a1548:	b128      	cbz	r0, 80a1556 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a154a:	4629      	mov	r1, r5
 80a154c:	4620      	mov	r0, r4
}
 80a154e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1552:	f7fe bef9 	b.w	80a0348 <HAL_GPIO_Write>
 80a1556:	bd38      	pop	{r3, r4, r5, pc}

080a1558 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1558:	b510      	push	{r4, lr}
 80a155a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a155c:	f7fe feec 	bl	80a0338 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1560:	3804      	subs	r0, #4
 80a1562:	b2c0      	uxtb	r0, r0
 80a1564:	2801      	cmp	r0, #1
 80a1566:	d908      	bls.n	80a157a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1568:	4620      	mov	r0, r4
 80a156a:	f7ff ffa7 	bl	80a14bc <pinAvailable>
 80a156e:	b120      	cbz	r0, 80a157a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1570:	4620      	mov	r0, r4
}
 80a1572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1576:	f7fe beef 	b.w	80a0358 <HAL_GPIO_Read>
}
 80a157a:	2000      	movs	r0, #0
 80a157c:	bd10      	pop	{r4, pc}
	...

080a1580 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1580:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1582:	4d0b      	ldr	r5, [pc, #44]	; (80a15b0 <_Z19__fetch_global_Wirev+0x30>)
 80a1584:	6829      	ldr	r1, [r5, #0]
 80a1586:	f011 0401 	ands.w	r4, r1, #1
 80a158a:	d10f      	bne.n	80a15ac <_Z19__fetch_global_Wirev+0x2c>
 80a158c:	4628      	mov	r0, r5
 80a158e:	f7fe fd88 	bl	80a00a2 <__cxa_guard_acquire>
 80a1592:	b158      	cbz	r0, 80a15ac <_Z19__fetch_global_Wirev+0x2c>
 80a1594:	4621      	mov	r1, r4
 80a1596:	4807      	ldr	r0, [pc, #28]	; (80a15b4 <_Z19__fetch_global_Wirev+0x34>)
 80a1598:	f7ff fb52 	bl	80a0c40 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a159c:	4628      	mov	r0, r5
 80a159e:	f7fe fd85 	bl	80a00ac <__cxa_guard_release>
 80a15a2:	4a05      	ldr	r2, [pc, #20]	; (80a15b8 <_Z19__fetch_global_Wirev+0x38>)
 80a15a4:	4905      	ldr	r1, [pc, #20]	; (80a15bc <_Z19__fetch_global_Wirev+0x3c>)
 80a15a6:	4803      	ldr	r0, [pc, #12]	; (80a15b4 <_Z19__fetch_global_Wirev+0x34>)
 80a15a8:	f000 f844 	bl	80a1634 <__aeabi_atexit>
	return wire;
}
 80a15ac:	4801      	ldr	r0, [pc, #4]	; (80a15b4 <_Z19__fetch_global_Wirev+0x34>)
 80a15ae:	bd38      	pop	{r3, r4, r5, pc}
 80a15b0:	2000083c 	.word	0x2000083c
 80a15b4:	20000840 	.word	0x20000840
 80a15b8:	20000380 	.word	0x20000380
 80a15bc:	080a0be9 	.word	0x080a0be9

080a15c0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a15c0:	b513      	push	{r0, r1, r4, lr}
 80a15c2:	4c08      	ldr	r4, [pc, #32]	; (80a15e4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a15c4:	2300      	movs	r3, #0
 80a15c6:	461a      	mov	r2, r3
 80a15c8:	4619      	mov	r1, r3
 80a15ca:	9300      	str	r3, [sp, #0]
 80a15cc:	4620      	mov	r0, r4
 80a15ce:	f7ff fba5 	bl	80a0d1c <_ZN9IPAddressC1Ehhhh>
 80a15d2:	4620      	mov	r0, r4
 80a15d4:	4a04      	ldr	r2, [pc, #16]	; (80a15e8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a15d6:	4905      	ldr	r1, [pc, #20]	; (80a15ec <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a15d8:	b002      	add	sp, #8
 80a15da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a15de:	f000 b829 	b.w	80a1634 <__aeabi_atexit>
 80a15e2:	bf00      	nop
 80a15e4:	20000854 	.word	0x20000854
 80a15e8:	20000380 	.word	0x20000380
 80a15ec:	080a0c6d 	.word	0x080a0c6d

080a15f0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a15f0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a15f2:	4c0c      	ldr	r4, [pc, #48]	; (80a1624 <_GLOBAL__sub_I_SPI+0x34>)
 80a15f4:	4e0c      	ldr	r6, [pc, #48]	; (80a1628 <_GLOBAL__sub_I_SPI+0x38>)
 80a15f6:	4d0d      	ldr	r5, [pc, #52]	; (80a162c <_GLOBAL__sub_I_SPI+0x3c>)
 80a15f8:	2100      	movs	r1, #0
 80a15fa:	4620      	mov	r0, r4
 80a15fc:	f7ff fc7a 	bl	80a0ef4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1600:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1602:	4c0b      	ldr	r4, [pc, #44]	; (80a1630 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1604:	4632      	mov	r2, r6
 80a1606:	4629      	mov	r1, r5
 80a1608:	f000 f814 	bl	80a1634 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a160c:	2101      	movs	r1, #1
 80a160e:	4620      	mov	r0, r4
 80a1610:	f7ff fc70 	bl	80a0ef4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1614:	4632      	mov	r2, r6
 80a1616:	4629      	mov	r1, r5
 80a1618:	4620      	mov	r0, r4
 80a161a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a161e:	f000 b809 	b.w	80a1634 <__aeabi_atexit>
 80a1622:	bf00      	nop
 80a1624:	2000086c 	.word	0x2000086c
 80a1628:	20000380 	.word	0x20000380
 80a162c:	080a0ee5 	.word	0x080a0ee5
 80a1630:	2000087c 	.word	0x2000087c

080a1634 <__aeabi_atexit>:
 80a1634:	460b      	mov	r3, r1
 80a1636:	4601      	mov	r1, r0
 80a1638:	4618      	mov	r0, r3
 80a163a:	f000 b94d 	b.w	80a18d8 <__cxa_atexit>

080a163e <_ZdlPvj>:
 80a163e:	f7fe bd2e 	b.w	80a009e <_ZdlPv>

080a1642 <_ZSt25__throw_bad_function_callv>:
 80a1642:	b508      	push	{r3, lr}
 80a1644:	f7fe fffe 	bl	80a0644 <abort>

080a1648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1648:	4b24      	ldr	r3, [pc, #144]	; (80a16dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a164a:	681a      	ldr	r2, [r3, #0]
 80a164c:	07d0      	lsls	r0, r2, #31
 80a164e:	bf5c      	itt	pl
 80a1650:	2201      	movpl	r2, #1
 80a1652:	601a      	strpl	r2, [r3, #0]
 80a1654:	4b22      	ldr	r3, [pc, #136]	; (80a16e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1656:	681a      	ldr	r2, [r3, #0]
 80a1658:	07d1      	lsls	r1, r2, #31
 80a165a:	bf5c      	itt	pl
 80a165c:	2201      	movpl	r2, #1
 80a165e:	601a      	strpl	r2, [r3, #0]
 80a1660:	4b20      	ldr	r3, [pc, #128]	; (80a16e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1662:	681a      	ldr	r2, [r3, #0]
 80a1664:	07d2      	lsls	r2, r2, #31
 80a1666:	bf5c      	itt	pl
 80a1668:	2201      	movpl	r2, #1
 80a166a:	601a      	strpl	r2, [r3, #0]
 80a166c:	4b1e      	ldr	r3, [pc, #120]	; (80a16e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a166e:	681a      	ldr	r2, [r3, #0]
 80a1670:	07d0      	lsls	r0, r2, #31
 80a1672:	bf5c      	itt	pl
 80a1674:	2201      	movpl	r2, #1
 80a1676:	601a      	strpl	r2, [r3, #0]
 80a1678:	4b1c      	ldr	r3, [pc, #112]	; (80a16ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a167a:	681a      	ldr	r2, [r3, #0]
 80a167c:	07d1      	lsls	r1, r2, #31
 80a167e:	bf5c      	itt	pl
 80a1680:	2201      	movpl	r2, #1
 80a1682:	601a      	strpl	r2, [r3, #0]
 80a1684:	4b1a      	ldr	r3, [pc, #104]	; (80a16f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1686:	681a      	ldr	r2, [r3, #0]
 80a1688:	07d2      	lsls	r2, r2, #31
 80a168a:	bf5c      	itt	pl
 80a168c:	2201      	movpl	r2, #1
 80a168e:	601a      	strpl	r2, [r3, #0]
 80a1690:	4b18      	ldr	r3, [pc, #96]	; (80a16f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1692:	681a      	ldr	r2, [r3, #0]
 80a1694:	07d0      	lsls	r0, r2, #31
 80a1696:	bf5c      	itt	pl
 80a1698:	2201      	movpl	r2, #1
 80a169a:	601a      	strpl	r2, [r3, #0]
 80a169c:	4b16      	ldr	r3, [pc, #88]	; (80a16f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a169e:	681a      	ldr	r2, [r3, #0]
 80a16a0:	07d1      	lsls	r1, r2, #31
 80a16a2:	bf5c      	itt	pl
 80a16a4:	2201      	movpl	r2, #1
 80a16a6:	601a      	strpl	r2, [r3, #0]
 80a16a8:	4b14      	ldr	r3, [pc, #80]	; (80a16fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a16aa:	681a      	ldr	r2, [r3, #0]
 80a16ac:	07d2      	lsls	r2, r2, #31
 80a16ae:	bf5c      	itt	pl
 80a16b0:	2201      	movpl	r2, #1
 80a16b2:	601a      	strpl	r2, [r3, #0]
 80a16b4:	4b12      	ldr	r3, [pc, #72]	; (80a1700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a16b6:	681a      	ldr	r2, [r3, #0]
 80a16b8:	07d0      	lsls	r0, r2, #31
 80a16ba:	bf5c      	itt	pl
 80a16bc:	2201      	movpl	r2, #1
 80a16be:	601a      	strpl	r2, [r3, #0]
 80a16c0:	4b10      	ldr	r3, [pc, #64]	; (80a1704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a16c2:	681a      	ldr	r2, [r3, #0]
 80a16c4:	07d1      	lsls	r1, r2, #31
 80a16c6:	bf5c      	itt	pl
 80a16c8:	2201      	movpl	r2, #1
 80a16ca:	601a      	strpl	r2, [r3, #0]
 80a16cc:	4b0e      	ldr	r3, [pc, #56]	; (80a1708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a16ce:	681a      	ldr	r2, [r3, #0]
 80a16d0:	07d2      	lsls	r2, r2, #31
 80a16d2:	bf5c      	itt	pl
 80a16d4:	2201      	movpl	r2, #1
 80a16d6:	601a      	strpl	r2, [r3, #0]
 80a16d8:	4770      	bx	lr
 80a16da:	bf00      	nop
 80a16dc:	200008b8 	.word	0x200008b8
 80a16e0:	200008b4 	.word	0x200008b4
 80a16e4:	200008b0 	.word	0x200008b0
 80a16e8:	200008ac 	.word	0x200008ac
 80a16ec:	200008a8 	.word	0x200008a8
 80a16f0:	200008a4 	.word	0x200008a4
 80a16f4:	200008a0 	.word	0x200008a0
 80a16f8:	2000089c 	.word	0x2000089c
 80a16fc:	20000898 	.word	0x20000898
 80a1700:	20000894 	.word	0x20000894
 80a1704:	20000890 	.word	0x20000890
 80a1708:	2000088c 	.word	0x2000088c

080a170c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a170c:	4b18      	ldr	r3, [pc, #96]	; (80a1770 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a170e:	681a      	ldr	r2, [r3, #0]
 80a1710:	07d1      	lsls	r1, r2, #31
 80a1712:	bf5c      	itt	pl
 80a1714:	2201      	movpl	r2, #1
 80a1716:	601a      	strpl	r2, [r3, #0]
 80a1718:	4b16      	ldr	r3, [pc, #88]	; (80a1774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a171a:	681a      	ldr	r2, [r3, #0]
 80a171c:	07d2      	lsls	r2, r2, #31
 80a171e:	bf5c      	itt	pl
 80a1720:	2201      	movpl	r2, #1
 80a1722:	601a      	strpl	r2, [r3, #0]
 80a1724:	4b14      	ldr	r3, [pc, #80]	; (80a1778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1726:	681a      	ldr	r2, [r3, #0]
 80a1728:	07d0      	lsls	r0, r2, #31
 80a172a:	bf5c      	itt	pl
 80a172c:	2201      	movpl	r2, #1
 80a172e:	601a      	strpl	r2, [r3, #0]
 80a1730:	4b12      	ldr	r3, [pc, #72]	; (80a177c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1732:	681a      	ldr	r2, [r3, #0]
 80a1734:	07d1      	lsls	r1, r2, #31
 80a1736:	bf5c      	itt	pl
 80a1738:	2201      	movpl	r2, #1
 80a173a:	601a      	strpl	r2, [r3, #0]
 80a173c:	4b10      	ldr	r3, [pc, #64]	; (80a1780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a173e:	681a      	ldr	r2, [r3, #0]
 80a1740:	07d2      	lsls	r2, r2, #31
 80a1742:	bf5c      	itt	pl
 80a1744:	2201      	movpl	r2, #1
 80a1746:	601a      	strpl	r2, [r3, #0]
 80a1748:	4b0e      	ldr	r3, [pc, #56]	; (80a1784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a174a:	681a      	ldr	r2, [r3, #0]
 80a174c:	07d0      	lsls	r0, r2, #31
 80a174e:	bf5c      	itt	pl
 80a1750:	2201      	movpl	r2, #1
 80a1752:	601a      	strpl	r2, [r3, #0]
 80a1754:	4b0c      	ldr	r3, [pc, #48]	; (80a1788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1756:	681a      	ldr	r2, [r3, #0]
 80a1758:	07d1      	lsls	r1, r2, #31
 80a175a:	bf5c      	itt	pl
 80a175c:	2201      	movpl	r2, #1
 80a175e:	601a      	strpl	r2, [r3, #0]
 80a1760:	4b0a      	ldr	r3, [pc, #40]	; (80a178c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1762:	681a      	ldr	r2, [r3, #0]
 80a1764:	07d2      	lsls	r2, r2, #31
 80a1766:	bf5c      	itt	pl
 80a1768:	2201      	movpl	r2, #1
 80a176a:	601a      	strpl	r2, [r3, #0]
 80a176c:	4770      	bx	lr
 80a176e:	bf00      	nop
 80a1770:	200008d8 	.word	0x200008d8
 80a1774:	200008d4 	.word	0x200008d4
 80a1778:	200008d0 	.word	0x200008d0
 80a177c:	200008cc 	.word	0x200008cc
 80a1780:	200008c8 	.word	0x200008c8
 80a1784:	200008c4 	.word	0x200008c4
 80a1788:	200008c0 	.word	0x200008c0
 80a178c:	200008bc 	.word	0x200008bc

080a1790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1790:	4b18      	ldr	r3, [pc, #96]	; (80a17f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1792:	681a      	ldr	r2, [r3, #0]
 80a1794:	07d1      	lsls	r1, r2, #31
 80a1796:	bf5c      	itt	pl
 80a1798:	2201      	movpl	r2, #1
 80a179a:	601a      	strpl	r2, [r3, #0]
 80a179c:	4b16      	ldr	r3, [pc, #88]	; (80a17f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a179e:	681a      	ldr	r2, [r3, #0]
 80a17a0:	07d2      	lsls	r2, r2, #31
 80a17a2:	bf5c      	itt	pl
 80a17a4:	2201      	movpl	r2, #1
 80a17a6:	601a      	strpl	r2, [r3, #0]
 80a17a8:	4b14      	ldr	r3, [pc, #80]	; (80a17fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a17aa:	681a      	ldr	r2, [r3, #0]
 80a17ac:	07d0      	lsls	r0, r2, #31
 80a17ae:	bf5c      	itt	pl
 80a17b0:	2201      	movpl	r2, #1
 80a17b2:	601a      	strpl	r2, [r3, #0]
 80a17b4:	4b12      	ldr	r3, [pc, #72]	; (80a1800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a17b6:	681a      	ldr	r2, [r3, #0]
 80a17b8:	07d1      	lsls	r1, r2, #31
 80a17ba:	bf5c      	itt	pl
 80a17bc:	2201      	movpl	r2, #1
 80a17be:	601a      	strpl	r2, [r3, #0]
 80a17c0:	4b10      	ldr	r3, [pc, #64]	; (80a1804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a17c2:	681a      	ldr	r2, [r3, #0]
 80a17c4:	07d2      	lsls	r2, r2, #31
 80a17c6:	bf5c      	itt	pl
 80a17c8:	2201      	movpl	r2, #1
 80a17ca:	601a      	strpl	r2, [r3, #0]
 80a17cc:	4b0e      	ldr	r3, [pc, #56]	; (80a1808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a17ce:	681a      	ldr	r2, [r3, #0]
 80a17d0:	07d0      	lsls	r0, r2, #31
 80a17d2:	bf5c      	itt	pl
 80a17d4:	2201      	movpl	r2, #1
 80a17d6:	601a      	strpl	r2, [r3, #0]
 80a17d8:	4b0c      	ldr	r3, [pc, #48]	; (80a180c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a17da:	681a      	ldr	r2, [r3, #0]
 80a17dc:	07d1      	lsls	r1, r2, #31
 80a17de:	bf5c      	itt	pl
 80a17e0:	2201      	movpl	r2, #1
 80a17e2:	601a      	strpl	r2, [r3, #0]
 80a17e4:	4b0a      	ldr	r3, [pc, #40]	; (80a1810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a17e6:	681a      	ldr	r2, [r3, #0]
 80a17e8:	07d2      	lsls	r2, r2, #31
 80a17ea:	bf5c      	itt	pl
 80a17ec:	2201      	movpl	r2, #1
 80a17ee:	601a      	strpl	r2, [r3, #0]
 80a17f0:	4770      	bx	lr
 80a17f2:	bf00      	nop
 80a17f4:	200008f8 	.word	0x200008f8
 80a17f8:	200008f4 	.word	0x200008f4
 80a17fc:	200008f0 	.word	0x200008f0
 80a1800:	200008ec 	.word	0x200008ec
 80a1804:	200008e8 	.word	0x200008e8
 80a1808:	200008e4 	.word	0x200008e4
 80a180c:	200008e0 	.word	0x200008e0
 80a1810:	200008dc 	.word	0x200008dc

080a1814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1814:	4b24      	ldr	r3, [pc, #144]	; (80a18a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1816:	681a      	ldr	r2, [r3, #0]
 80a1818:	07d0      	lsls	r0, r2, #31
 80a181a:	bf5c      	itt	pl
 80a181c:	2201      	movpl	r2, #1
 80a181e:	601a      	strpl	r2, [r3, #0]
 80a1820:	4b22      	ldr	r3, [pc, #136]	; (80a18ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1822:	681a      	ldr	r2, [r3, #0]
 80a1824:	07d1      	lsls	r1, r2, #31
 80a1826:	bf5c      	itt	pl
 80a1828:	2201      	movpl	r2, #1
 80a182a:	601a      	strpl	r2, [r3, #0]
 80a182c:	4b20      	ldr	r3, [pc, #128]	; (80a18b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a182e:	681a      	ldr	r2, [r3, #0]
 80a1830:	07d2      	lsls	r2, r2, #31
 80a1832:	bf5c      	itt	pl
 80a1834:	2201      	movpl	r2, #1
 80a1836:	601a      	strpl	r2, [r3, #0]
 80a1838:	4b1e      	ldr	r3, [pc, #120]	; (80a18b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a183a:	681a      	ldr	r2, [r3, #0]
 80a183c:	07d0      	lsls	r0, r2, #31
 80a183e:	bf5c      	itt	pl
 80a1840:	2201      	movpl	r2, #1
 80a1842:	601a      	strpl	r2, [r3, #0]
 80a1844:	4b1c      	ldr	r3, [pc, #112]	; (80a18b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1846:	681a      	ldr	r2, [r3, #0]
 80a1848:	07d1      	lsls	r1, r2, #31
 80a184a:	bf5c      	itt	pl
 80a184c:	2201      	movpl	r2, #1
 80a184e:	601a      	strpl	r2, [r3, #0]
 80a1850:	4b1a      	ldr	r3, [pc, #104]	; (80a18bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1852:	681a      	ldr	r2, [r3, #0]
 80a1854:	07d2      	lsls	r2, r2, #31
 80a1856:	bf5c      	itt	pl
 80a1858:	2201      	movpl	r2, #1
 80a185a:	601a      	strpl	r2, [r3, #0]
 80a185c:	4b18      	ldr	r3, [pc, #96]	; (80a18c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a185e:	681a      	ldr	r2, [r3, #0]
 80a1860:	07d0      	lsls	r0, r2, #31
 80a1862:	bf5c      	itt	pl
 80a1864:	2201      	movpl	r2, #1
 80a1866:	601a      	strpl	r2, [r3, #0]
 80a1868:	4b16      	ldr	r3, [pc, #88]	; (80a18c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a186a:	681a      	ldr	r2, [r3, #0]
 80a186c:	07d1      	lsls	r1, r2, #31
 80a186e:	bf5c      	itt	pl
 80a1870:	2201      	movpl	r2, #1
 80a1872:	601a      	strpl	r2, [r3, #0]
 80a1874:	4b14      	ldr	r3, [pc, #80]	; (80a18c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1876:	681a      	ldr	r2, [r3, #0]
 80a1878:	07d2      	lsls	r2, r2, #31
 80a187a:	bf5c      	itt	pl
 80a187c:	2201      	movpl	r2, #1
 80a187e:	601a      	strpl	r2, [r3, #0]
 80a1880:	4b12      	ldr	r3, [pc, #72]	; (80a18cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1882:	681a      	ldr	r2, [r3, #0]
 80a1884:	07d0      	lsls	r0, r2, #31
 80a1886:	bf5c      	itt	pl
 80a1888:	2201      	movpl	r2, #1
 80a188a:	601a      	strpl	r2, [r3, #0]
 80a188c:	4b10      	ldr	r3, [pc, #64]	; (80a18d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a188e:	681a      	ldr	r2, [r3, #0]
 80a1890:	07d1      	lsls	r1, r2, #31
 80a1892:	bf5c      	itt	pl
 80a1894:	2201      	movpl	r2, #1
 80a1896:	601a      	strpl	r2, [r3, #0]
 80a1898:	4b0e      	ldr	r3, [pc, #56]	; (80a18d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a189a:	681a      	ldr	r2, [r3, #0]
 80a189c:	07d2      	lsls	r2, r2, #31
 80a189e:	bf5c      	itt	pl
 80a18a0:	2201      	movpl	r2, #1
 80a18a2:	601a      	strpl	r2, [r3, #0]
 80a18a4:	4770      	bx	lr
 80a18a6:	bf00      	nop
 80a18a8:	20000928 	.word	0x20000928
 80a18ac:	20000924 	.word	0x20000924
 80a18b0:	20000920 	.word	0x20000920
 80a18b4:	2000091c 	.word	0x2000091c
 80a18b8:	20000918 	.word	0x20000918
 80a18bc:	20000914 	.word	0x20000914
 80a18c0:	20000910 	.word	0x20000910
 80a18c4:	2000090c 	.word	0x2000090c
 80a18c8:	20000908 	.word	0x20000908
 80a18cc:	20000904 	.word	0x20000904
 80a18d0:	20000900 	.word	0x20000900
 80a18d4:	200008fc 	.word	0x200008fc

080a18d8 <__cxa_atexit>:
 80a18d8:	b510      	push	{r4, lr}
 80a18da:	4c05      	ldr	r4, [pc, #20]	; (80a18f0 <__cxa_atexit+0x18>)
 80a18dc:	4613      	mov	r3, r2
 80a18de:	b12c      	cbz	r4, 80a18ec <__cxa_atexit+0x14>
 80a18e0:	460a      	mov	r2, r1
 80a18e2:	4601      	mov	r1, r0
 80a18e4:	2002      	movs	r0, #2
 80a18e6:	f3af 8000 	nop.w
 80a18ea:	bd10      	pop	{r4, pc}
 80a18ec:	4620      	mov	r0, r4
 80a18ee:	bd10      	pop	{r4, pc}
 80a18f0:	00000000 	.word	0x00000000

080a18f4 <memcpy>:
 80a18f4:	b510      	push	{r4, lr}
 80a18f6:	1e43      	subs	r3, r0, #1
 80a18f8:	440a      	add	r2, r1
 80a18fa:	4291      	cmp	r1, r2
 80a18fc:	d004      	beq.n	80a1908 <memcpy+0x14>
 80a18fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1902:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1906:	e7f8      	b.n	80a18fa <memcpy+0x6>
 80a1908:	bd10      	pop	{r4, pc}

080a190a <memset>:
 80a190a:	4603      	mov	r3, r0
 80a190c:	4402      	add	r2, r0
 80a190e:	4293      	cmp	r3, r2
 80a1910:	d002      	beq.n	80a1918 <memset+0xe>
 80a1912:	f803 1b01 	strb.w	r1, [r3], #1
 80a1916:	e7fa      	b.n	80a190e <memset+0x4>
 80a1918:	4770      	bx	lr
	...

080a191c <srand>:
 80a191c:	b538      	push	{r3, r4, r5, lr}
 80a191e:	4b12      	ldr	r3, [pc, #72]	; (80a1968 <srand+0x4c>)
 80a1920:	4605      	mov	r5, r0
 80a1922:	681c      	ldr	r4, [r3, #0]
 80a1924:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1926:	b9d3      	cbnz	r3, 80a195e <srand+0x42>
 80a1928:	2018      	movs	r0, #24
 80a192a:	f7fe fe73 	bl	80a0614 <malloc>
 80a192e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1932:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1934:	8003      	strh	r3, [r0, #0]
 80a1936:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a193a:	8043      	strh	r3, [r0, #2]
 80a193c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1940:	8083      	strh	r3, [r0, #4]
 80a1942:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1946:	80c3      	strh	r3, [r0, #6]
 80a1948:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a194c:	8103      	strh	r3, [r0, #8]
 80a194e:	2305      	movs	r3, #5
 80a1950:	8143      	strh	r3, [r0, #10]
 80a1952:	230b      	movs	r3, #11
 80a1954:	8183      	strh	r3, [r0, #12]
 80a1956:	2201      	movs	r2, #1
 80a1958:	2300      	movs	r3, #0
 80a195a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a195e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1960:	2200      	movs	r2, #0
 80a1962:	611d      	str	r5, [r3, #16]
 80a1964:	615a      	str	r2, [r3, #20]
 80a1966:	bd38      	pop	{r3, r4, r5, pc}
 80a1968:	2000037c 	.word	0x2000037c

080a196c <strdup>:
 80a196c:	4b02      	ldr	r3, [pc, #8]	; (80a1978 <strdup+0xc>)
 80a196e:	4601      	mov	r1, r0
 80a1970:	6818      	ldr	r0, [r3, #0]
 80a1972:	f000 b803 	b.w	80a197c <_strdup_r>
 80a1976:	bf00      	nop
 80a1978:	2000037c 	.word	0x2000037c

080a197c <_strdup_r>:
 80a197c:	b570      	push	{r4, r5, r6, lr}
 80a197e:	4606      	mov	r6, r0
 80a1980:	4608      	mov	r0, r1
 80a1982:	460c      	mov	r4, r1
 80a1984:	f000 f80d 	bl	80a19a2 <strlen>
 80a1988:	1c45      	adds	r5, r0, #1
 80a198a:	4629      	mov	r1, r5
 80a198c:	4630      	mov	r0, r6
 80a198e:	f7fe fe61 	bl	80a0654 <_malloc_r>
 80a1992:	4606      	mov	r6, r0
 80a1994:	b118      	cbz	r0, 80a199e <_strdup_r+0x22>
 80a1996:	462a      	mov	r2, r5
 80a1998:	4621      	mov	r1, r4
 80a199a:	f7ff ffab 	bl	80a18f4 <memcpy>
 80a199e:	4630      	mov	r0, r6
 80a19a0:	bd70      	pop	{r4, r5, r6, pc}

080a19a2 <strlen>:
 80a19a2:	4603      	mov	r3, r0
 80a19a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a19a8:	2a00      	cmp	r2, #0
 80a19aa:	d1fb      	bne.n	80a19a4 <strlen+0x2>
 80a19ac:	1a18      	subs	r0, r3, r0
 80a19ae:	3801      	subs	r0, #1
 80a19b0:	4770      	bx	lr

080a19b2 <link_code_end>:
	...

080a19b4 <dynalib_user>:
 80a19b4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a19c4:	0000 0000 6572 0064 654c 4364 6c6f 726f     ....red.LedColor
 80a19d4:	6700 6572 6e65 4d00 7361 6574 4f72 006e     .green.MasterOn.
 80a19e4:	614d 7473 7265 6f50 6577 0072 614d 7473     MasterPower.Mast
 80a19f4:	7265 664f 0066 0000                         erOff...

080a19fc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a1a04:	0693 080a 0699 080a 06c3 080a 06a7 080a     ................
 80a1a14:	0695 080a                                   ....

080a1a18 <_ZTV7TwoWire>:
	...
 80a1a20:	0be9 080a 0c33 080a 0c0b 080a 0beb 080a     ....3...........
 80a1a30:	0c13 080a 0c1b 080a 0c23 080a 0c2b 080a     ........#...+...

080a1a40 <_ZTV9IPAddress>:
	...
 80a1a48:	0c7d 080a 0c6d 080a 0c6f 080a 6e6c 6600     }...m...o...ln.f
 80a1a58:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 80a1a68:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
 80a1a78:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 80a1a88:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
 80a1a98:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a1aa8:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a1ab8:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a1ac8:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a1ad8:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a1ae8:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a1af8:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a1b08:	6c64 7265 6100 7070 6e00 6e6f 0065 7274     dler.app.none.tr
 80a1b18:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a1b28:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a1b38 <_ZTVN5spark12NetworkClassE>:
	...
 80a1b40:	0d45 080a 0d4f 080a 0d59 080a 0d63 080a     E...O...Y...c...
 80a1b50:	0d6d 080a 0d79 080a 0d85 080a 0d91 080a     m...y...........
 80a1b60:	0d99 080a 0da3 080a 0dad 080a               ............

080a1b6c <_ZTV8SPIClass>:
	...
 80a1b74:	0ee5 080a 0ee7 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a1b84:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1b94:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1ba4:	0000 0000                                   ....

080a1ba8 <_ZTV11USARTSerial>:
	...
 80a1bb0:	1025 080a 1075 080a 1083 080a 0e11 080a     %...u...........
 80a1bc0:	1039 080a 105b 080a 1047 080a 106f 080a     9...[...G...o...
 80a1bd0:	1027 080a 102b 080a                         '...+...

080a1bd8 <_ZTV9USBSerial>:
	...
 80a1be0:	112d 080a 117d 080a 118b 080a 0e11 080a     -...}...........
 80a1bf0:	1169 080a 112f 080a 1145 080a 1177 080a     i.../...E...w...
 80a1c00:	115b 080a 1129 080a                         [...)...

080a1c08 <_ZTVN5spark9WiFiClassE>:
	...
 80a1c10:	1367 080a 135d 080a 1353 080a 12c5 080a     g...]...S.......
 80a1c20:	1347 080a 133b 080a 132f 080a 1327 080a     G...;.../...'...
 80a1c30:	131d 080a 1313 080a 12cf 080a               ............

080a1c3c <__sf_fake_stdin>:
	...

080a1c5c <__sf_fake_stdout>:
	...

080a1c7c <__sf_fake_stderr>:
	...
 80a1c9c:	0043                                        C.

080a1c9e <link_const_variable_data_end>:
	...

080a1ca0 <link_constructors_location>:
 80a1ca0:	080a02b1 	.word	0x080a02b1
 80a1ca4:	080a0d35 	.word	0x080a0d35
 80a1ca8:	080a0dfd 	.word	0x080a0dfd
 80a1cac:	080a0ec9 	.word	0x080a0ec9
 80a1cb0:	080a0ff9 	.word	0x080a0ff9
 80a1cb4:	080a1011 	.word	0x080a1011
 80a1cb8:	080a1371 	.word	0x080a1371
 80a1cbc:	080a15c1 	.word	0x080a15c1
 80a1cc0:	080a15f1 	.word	0x080a15f1
 80a1cc4:	080a1649 	.word	0x080a1649
 80a1cc8:	080a170d 	.word	0x080a170d
 80a1ccc:	080a1791 	.word	0x080a1791
 80a1cd0:	080a1815 	.word	0x080a1815

080a1cd4 <link_constructors_end>:
	...
